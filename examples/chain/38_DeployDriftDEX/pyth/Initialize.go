// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package pyth

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// Initialize is the `initialize` instruction.
type Initialize struct {
	Price *int64
	Expo  *int32
	Conf  *uint64

	// [0] = [WRITE] price
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewInitializeInstructionBuilder creates a new `Initialize` instruction builder.
func NewInitializeInstructionBuilder() *Initialize {
	nd := &Initialize{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 1),
	}
	return nd
}

// SetPrice sets the "price" parameter.
func (inst *Initialize) SetPrice(price int64) *Initialize {
	inst.Price = &price
	return inst
}

// SetExpo sets the "expo" parameter.
func (inst *Initialize) SetExpo(expo int32) *Initialize {
	inst.Expo = &expo
	return inst
}

// SetConf sets the "conf" parameter.
func (inst *Initialize) SetConf(conf uint64) *Initialize {
	inst.Conf = &conf
	return inst
}

// SetPriceAccount sets the "price" account.
func (inst *Initialize) SetPriceAccount(price ag_solanago.PublicKey) *Initialize {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(price).WRITE()
	return inst
}

// GetPriceAccount gets the "price" account.
func (inst *Initialize) GetPriceAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

func (inst Initialize) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_Initialize,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst Initialize) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *Initialize) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Price == nil {
			return errors.New("Price parameter is not set")
		}
		if inst.Expo == nil {
			return errors.New("Expo parameter is not set")
		}
		if inst.Conf == nil {
			return errors.New("Conf parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Price is not set")
		}
	}
	return nil
}

func (inst *Initialize) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("Initialize")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=3]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("Price", *inst.Price))
						paramsBranch.Child(ag_format.Param(" Expo", *inst.Expo))
						paramsBranch.Child(ag_format.Param(" Conf", *inst.Conf))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=1]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("price", inst.AccountMetaSlice.Get(0)))
					})
				})
		})
}

func (obj Initialize) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Price` param:
	err = encoder.Encode(obj.Price)
	if err != nil {
		return err
	}
	// Serialize `Expo` param:
	err = encoder.Encode(obj.Expo)
	if err != nil {
		return err
	}
	// Serialize `Conf` param:
	err = encoder.Encode(obj.Conf)
	if err != nil {
		return err
	}
	return nil
}
func (obj *Initialize) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Price`:
	err = decoder.Decode(&obj.Price)
	if err != nil {
		return err
	}
	// Deserialize `Expo`:
	err = decoder.Decode(&obj.Expo)
	if err != nil {
		return err
	}
	// Deserialize `Conf`:
	err = decoder.Decode(&obj.Conf)
	if err != nil {
		return err
	}
	return nil
}

// NewInitializeInstruction declares a new Initialize instruction with the provided parameters and accounts.
func NewInitializeInstruction(
	// Parameters:
	price int64,
	expo int32,
	conf uint64,
	// Accounts:
	priceAccount ag_solanago.PublicKey) *Initialize {
	return NewInitializeInstructionBuilder().
		SetPrice(price).
		SetExpo(expo).
		SetConf(conf).
		SetPriceAccount(priceAccount)
}
