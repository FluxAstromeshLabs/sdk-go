// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package drift

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// DepositIntoSpotMarketVault is the `depositIntoSpotMarketVault` instruction.
type DepositIntoSpotMarketVault struct {
	Amount *uint64

	// [0] = [] state
	//
	// [1] = [WRITE] spotMarket
	//
	// [2] = [SIGNER] admin
	//
	// [3] = [WRITE] sourceVault
	//
	// [4] = [WRITE] spotMarketVault
	//
	// [5] = [] tokenProgram
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewDepositIntoSpotMarketVaultInstructionBuilder creates a new `DepositIntoSpotMarketVault` instruction builder.
func NewDepositIntoSpotMarketVaultInstructionBuilder() *DepositIntoSpotMarketVault {
	nd := &DepositIntoSpotMarketVault{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 6),
	}
	return nd
}

// SetAmount sets the "amount" parameter.
func (inst *DepositIntoSpotMarketVault) SetAmount(amount uint64) *DepositIntoSpotMarketVault {
	inst.Amount = &amount
	return inst
}

// SetStateAccount sets the "state" account.
func (inst *DepositIntoSpotMarketVault) SetStateAccount(state ag_solanago.PublicKey) *DepositIntoSpotMarketVault {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(state)
	return inst
}

// GetStateAccount gets the "state" account.
func (inst *DepositIntoSpotMarketVault) GetStateAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetSpotMarketAccount sets the "spotMarket" account.
func (inst *DepositIntoSpotMarketVault) SetSpotMarketAccount(spotMarket ag_solanago.PublicKey) *DepositIntoSpotMarketVault {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(spotMarket).WRITE()
	return inst
}

// GetSpotMarketAccount gets the "spotMarket" account.
func (inst *DepositIntoSpotMarketVault) GetSpotMarketAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetAdminAccount sets the "admin" account.
func (inst *DepositIntoSpotMarketVault) SetAdminAccount(admin ag_solanago.PublicKey) *DepositIntoSpotMarketVault {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(admin).SIGNER()
	return inst
}

// GetAdminAccount gets the "admin" account.
func (inst *DepositIntoSpotMarketVault) GetAdminAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetSourceVaultAccount sets the "sourceVault" account.
func (inst *DepositIntoSpotMarketVault) SetSourceVaultAccount(sourceVault ag_solanago.PublicKey) *DepositIntoSpotMarketVault {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(sourceVault).WRITE()
	return inst
}

// GetSourceVaultAccount gets the "sourceVault" account.
func (inst *DepositIntoSpotMarketVault) GetSourceVaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetSpotMarketVaultAccount sets the "spotMarketVault" account.
func (inst *DepositIntoSpotMarketVault) SetSpotMarketVaultAccount(spotMarketVault ag_solanago.PublicKey) *DepositIntoSpotMarketVault {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(spotMarketVault).WRITE()
	return inst
}

// GetSpotMarketVaultAccount gets the "spotMarketVault" account.
func (inst *DepositIntoSpotMarketVault) GetSpotMarketVaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetTokenProgramAccount sets the "tokenProgram" account.
func (inst *DepositIntoSpotMarketVault) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *DepositIntoSpotMarketVault {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "tokenProgram" account.
func (inst *DepositIntoSpotMarketVault) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

func (inst DepositIntoSpotMarketVault) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_DepositIntoSpotMarketVault,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst DepositIntoSpotMarketVault) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *DepositIntoSpotMarketVault) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Amount == nil {
			return errors.New("Amount parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.State is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.SpotMarket is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.Admin is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.SourceVault is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.SpotMarketVault is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
	}
	return nil
}

func (inst *DepositIntoSpotMarketVault) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("DepositIntoSpotMarketVault")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("Amount", *inst.Amount))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=6]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("          state", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("     spotMarket", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("          admin", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("    sourceVault", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("spotMarketVault", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("   tokenProgram", inst.AccountMetaSlice.Get(5)))
					})
				})
		})
}

func (obj DepositIntoSpotMarketVault) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Amount` param:
	err = encoder.Encode(obj.Amount)
	if err != nil {
		return err
	}
	return nil
}
func (obj *DepositIntoSpotMarketVault) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Amount`:
	err = decoder.Decode(&obj.Amount)
	if err != nil {
		return err
	}
	return nil
}

// NewDepositIntoSpotMarketVaultInstruction declares a new DepositIntoSpotMarketVault instruction with the provided parameters and accounts.
func NewDepositIntoSpotMarketVaultInstruction(
	// Parameters:
	amount uint64,
	// Accounts:
	state ag_solanago.PublicKey,
	spotMarket ag_solanago.PublicKey,
	admin ag_solanago.PublicKey,
	sourceVault ag_solanago.PublicKey,
	spotMarketVault ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey) *DepositIntoSpotMarketVault {
	return NewDepositIntoSpotMarketVaultInstructionBuilder().
		SetAmount(amount).
		SetStateAccount(state).
		SetSpotMarketAccount(spotMarket).
		SetAdminAccount(admin).
		SetSourceVaultAccount(sourceVault).
		SetSpotMarketVaultAccount(spotMarketVault).
		SetTokenProgramAccount(tokenProgram)
}
