// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package drift

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// OpenbookV2FulfillmentConfigStatus is the `openbookV2FulfillmentConfigStatus` instruction.
type OpenbookV2FulfillmentConfigStatus struct {
	Status *SpotFulfillmentConfigStatus

	// [0] = [] state
	//
	// [1] = [WRITE] openbookV2FulfillmentConfig
	//
	// [2] = [WRITE, SIGNER] admin
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewOpenbookV2FulfillmentConfigStatusInstructionBuilder creates a new `OpenbookV2FulfillmentConfigStatus` instruction builder.
func NewOpenbookV2FulfillmentConfigStatusInstructionBuilder() *OpenbookV2FulfillmentConfigStatus {
	nd := &OpenbookV2FulfillmentConfigStatus{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 3),
	}
	return nd
}

// SetStatus sets the "status" parameter.
func (inst *OpenbookV2FulfillmentConfigStatus) SetStatus(status SpotFulfillmentConfigStatus) *OpenbookV2FulfillmentConfigStatus {
	inst.Status = &status
	return inst
}

// SetStateAccount sets the "state" account.
func (inst *OpenbookV2FulfillmentConfigStatus) SetStateAccount(state ag_solanago.PublicKey) *OpenbookV2FulfillmentConfigStatus {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(state)
	return inst
}

// GetStateAccount gets the "state" account.
func (inst *OpenbookV2FulfillmentConfigStatus) GetStateAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetOpenbookV2FulfillmentConfigAccount sets the "openbookV2FulfillmentConfig" account.
func (inst *OpenbookV2FulfillmentConfigStatus) SetOpenbookV2FulfillmentConfigAccount(openbookV2FulfillmentConfig ag_solanago.PublicKey) *OpenbookV2FulfillmentConfigStatus {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(openbookV2FulfillmentConfig).WRITE()
	return inst
}

// GetOpenbookV2FulfillmentConfigAccount gets the "openbookV2FulfillmentConfig" account.
func (inst *OpenbookV2FulfillmentConfigStatus) GetOpenbookV2FulfillmentConfigAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetAdminAccount sets the "admin" account.
func (inst *OpenbookV2FulfillmentConfigStatus) SetAdminAccount(admin ag_solanago.PublicKey) *OpenbookV2FulfillmentConfigStatus {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(admin).WRITE().SIGNER()
	return inst
}

// GetAdminAccount gets the "admin" account.
func (inst *OpenbookV2FulfillmentConfigStatus) GetAdminAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

func (inst OpenbookV2FulfillmentConfigStatus) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_OpenbookV2FulfillmentConfigStatus,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst OpenbookV2FulfillmentConfigStatus) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *OpenbookV2FulfillmentConfigStatus) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Status == nil {
			return errors.New("Status parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.State is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.OpenbookV2FulfillmentConfig is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.Admin is not set")
		}
	}
	return nil
}

func (inst *OpenbookV2FulfillmentConfigStatus) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("OpenbookV2FulfillmentConfigStatus")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("Status", *inst.Status))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=3]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("                      state", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("openbookV2FulfillmentConfig", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("                      admin", inst.AccountMetaSlice.Get(2)))
					})
				})
		})
}

func (obj OpenbookV2FulfillmentConfigStatus) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Status` param:
	err = encoder.Encode(obj.Status)
	if err != nil {
		return err
	}
	return nil
}
func (obj *OpenbookV2FulfillmentConfigStatus) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Status`:
	err = decoder.Decode(&obj.Status)
	if err != nil {
		return err
	}
	return nil
}

// NewOpenbookV2FulfillmentConfigStatusInstruction declares a new OpenbookV2FulfillmentConfigStatus instruction with the provided parameters and accounts.
func NewOpenbookV2FulfillmentConfigStatusInstruction(
	// Parameters:
	status SpotFulfillmentConfigStatus,
	// Accounts:
	state ag_solanago.PublicKey,
	openbookV2FulfillmentConfig ag_solanago.PublicKey,
	admin ag_solanago.PublicKey) *OpenbookV2FulfillmentConfigStatus {
	return NewOpenbookV2FulfillmentConfigStatusInstructionBuilder().
		SetStatus(status).
		SetStateAccount(state).
		SetOpenbookV2FulfillmentConfigAccount(openbookV2FulfillmentConfig).
		SetAdminAccount(admin)
}
