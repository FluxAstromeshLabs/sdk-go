// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package drift

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// UpdateSpotMarketFuel is the `updateSpotMarketFuel` instruction.
type UpdateSpotMarketFuel struct {
	FuelBoostDeposits  *uint8 `bin:"optional"`
	FuelBoostBorrows   *uint8 `bin:"optional"`
	FuelBoostTaker     *uint8 `bin:"optional"`
	FuelBoostMaker     *uint8 `bin:"optional"`
	FuelBoostInsurance *uint8 `bin:"optional"`

	// [0] = [SIGNER] admin
	//
	// [1] = [] state
	//
	// [2] = [WRITE] spotMarket
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewUpdateSpotMarketFuelInstructionBuilder creates a new `UpdateSpotMarketFuel` instruction builder.
func NewUpdateSpotMarketFuelInstructionBuilder() *UpdateSpotMarketFuel {
	nd := &UpdateSpotMarketFuel{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 3),
	}
	return nd
}

// SetFuelBoostDeposits sets the "fuelBoostDeposits" parameter.
func (inst *UpdateSpotMarketFuel) SetFuelBoostDeposits(fuelBoostDeposits uint8) *UpdateSpotMarketFuel {
	inst.FuelBoostDeposits = &fuelBoostDeposits
	return inst
}

// SetFuelBoostBorrows sets the "fuelBoostBorrows" parameter.
func (inst *UpdateSpotMarketFuel) SetFuelBoostBorrows(fuelBoostBorrows uint8) *UpdateSpotMarketFuel {
	inst.FuelBoostBorrows = &fuelBoostBorrows
	return inst
}

// SetFuelBoostTaker sets the "fuelBoostTaker" parameter.
func (inst *UpdateSpotMarketFuel) SetFuelBoostTaker(fuelBoostTaker uint8) *UpdateSpotMarketFuel {
	inst.FuelBoostTaker = &fuelBoostTaker
	return inst
}

// SetFuelBoostMaker sets the "fuelBoostMaker" parameter.
func (inst *UpdateSpotMarketFuel) SetFuelBoostMaker(fuelBoostMaker uint8) *UpdateSpotMarketFuel {
	inst.FuelBoostMaker = &fuelBoostMaker
	return inst
}

// SetFuelBoostInsurance sets the "fuelBoostInsurance" parameter.
func (inst *UpdateSpotMarketFuel) SetFuelBoostInsurance(fuelBoostInsurance uint8) *UpdateSpotMarketFuel {
	inst.FuelBoostInsurance = &fuelBoostInsurance
	return inst
}

// SetAdminAccount sets the "admin" account.
func (inst *UpdateSpotMarketFuel) SetAdminAccount(admin ag_solanago.PublicKey) *UpdateSpotMarketFuel {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(admin).SIGNER()
	return inst
}

// GetAdminAccount gets the "admin" account.
func (inst *UpdateSpotMarketFuel) GetAdminAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetStateAccount sets the "state" account.
func (inst *UpdateSpotMarketFuel) SetStateAccount(state ag_solanago.PublicKey) *UpdateSpotMarketFuel {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(state)
	return inst
}

// GetStateAccount gets the "state" account.
func (inst *UpdateSpotMarketFuel) GetStateAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetSpotMarketAccount sets the "spotMarket" account.
func (inst *UpdateSpotMarketFuel) SetSpotMarketAccount(spotMarket ag_solanago.PublicKey) *UpdateSpotMarketFuel {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(spotMarket).WRITE()
	return inst
}

// GetSpotMarketAccount gets the "spotMarket" account.
func (inst *UpdateSpotMarketFuel) GetSpotMarketAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

func (inst UpdateSpotMarketFuel) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_UpdateSpotMarketFuel,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst UpdateSpotMarketFuel) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *UpdateSpotMarketFuel) Validate() error {
	// Check whether all (required) parameters are set:
	{
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Admin is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.State is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.SpotMarket is not set")
		}
	}
	return nil
}

func (inst *UpdateSpotMarketFuel) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("UpdateSpotMarketFuel")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=5]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param(" FuelBoostDeposits (OPT)", inst.FuelBoostDeposits))
						paramsBranch.Child(ag_format.Param("  FuelBoostBorrows (OPT)", inst.FuelBoostBorrows))
						paramsBranch.Child(ag_format.Param("    FuelBoostTaker (OPT)", inst.FuelBoostTaker))
						paramsBranch.Child(ag_format.Param("    FuelBoostMaker (OPT)", inst.FuelBoostMaker))
						paramsBranch.Child(ag_format.Param("FuelBoostInsurance (OPT)", inst.FuelBoostInsurance))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=3]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("     admin", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("     state", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("spotMarket", inst.AccountMetaSlice.Get(2)))
					})
				})
		})
}

func (obj UpdateSpotMarketFuel) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `FuelBoostDeposits` param (optional):
	{
		if obj.FuelBoostDeposits == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.FuelBoostDeposits)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `FuelBoostBorrows` param (optional):
	{
		if obj.FuelBoostBorrows == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.FuelBoostBorrows)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `FuelBoostTaker` param (optional):
	{
		if obj.FuelBoostTaker == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.FuelBoostTaker)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `FuelBoostMaker` param (optional):
	{
		if obj.FuelBoostMaker == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.FuelBoostMaker)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `FuelBoostInsurance` param (optional):
	{
		if obj.FuelBoostInsurance == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.FuelBoostInsurance)
			if err != nil {
				return err
			}
		}
	}
	return nil
}
func (obj *UpdateSpotMarketFuel) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `FuelBoostDeposits` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.FuelBoostDeposits)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `FuelBoostBorrows` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.FuelBoostBorrows)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `FuelBoostTaker` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.FuelBoostTaker)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `FuelBoostMaker` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.FuelBoostMaker)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `FuelBoostInsurance` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.FuelBoostInsurance)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

// NewUpdateSpotMarketFuelInstruction declares a new UpdateSpotMarketFuel instruction with the provided parameters and accounts.
func NewUpdateSpotMarketFuelInstruction(
	// Parameters:
	fuelBoostDeposits uint8,
	fuelBoostBorrows uint8,
	fuelBoostTaker uint8,
	fuelBoostMaker uint8,
	fuelBoostInsurance uint8,
	// Accounts:
	admin ag_solanago.PublicKey,
	state ag_solanago.PublicKey,
	spotMarket ag_solanago.PublicKey) *UpdateSpotMarketFuel {
	return NewUpdateSpotMarketFuelInstructionBuilder().
		SetFuelBoostDeposits(fuelBoostDeposits).
		SetFuelBoostBorrows(fuelBoostBorrows).
		SetFuelBoostTaker(fuelBoostTaker).
		SetFuelBoostMaker(fuelBoostMaker).
		SetFuelBoostInsurance(fuelBoostInsurance).
		SetAdminAccount(admin).
		SetStateAccount(state).
		SetSpotMarketAccount(spotMarket)
}
