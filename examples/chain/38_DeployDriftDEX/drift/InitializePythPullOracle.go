// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package drift

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// InitializePythPullOracle is the `initializePythPullOracle` instruction.
type InitializePythPullOracle struct {
	FeedId *[32]uint8

	// [0] = [WRITE, SIGNER] admin
	//
	// [1] = [] pythSolanaReceiver
	//
	// [2] = [WRITE] priceFeed
	//
	// [3] = [] systemProgram
	//
	// [4] = [] state
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewInitializePythPullOracleInstructionBuilder creates a new `InitializePythPullOracle` instruction builder.
func NewInitializePythPullOracleInstructionBuilder() *InitializePythPullOracle {
	nd := &InitializePythPullOracle{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 5),
	}
	return nd
}

// SetFeedId sets the "feedId" parameter.
func (inst *InitializePythPullOracle) SetFeedId(feedId [32]uint8) *InitializePythPullOracle {
	inst.FeedId = &feedId
	return inst
}

// SetAdminAccount sets the "admin" account.
func (inst *InitializePythPullOracle) SetAdminAccount(admin ag_solanago.PublicKey) *InitializePythPullOracle {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(admin).WRITE().SIGNER()
	return inst
}

// GetAdminAccount gets the "admin" account.
func (inst *InitializePythPullOracle) GetAdminAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetPythSolanaReceiverAccount sets the "pythSolanaReceiver" account.
func (inst *InitializePythPullOracle) SetPythSolanaReceiverAccount(pythSolanaReceiver ag_solanago.PublicKey) *InitializePythPullOracle {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(pythSolanaReceiver)
	return inst
}

// GetPythSolanaReceiverAccount gets the "pythSolanaReceiver" account.
func (inst *InitializePythPullOracle) GetPythSolanaReceiverAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetPriceFeedAccount sets the "priceFeed" account.
func (inst *InitializePythPullOracle) SetPriceFeedAccount(priceFeed ag_solanago.PublicKey) *InitializePythPullOracle {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(priceFeed).WRITE()
	return inst
}

// GetPriceFeedAccount gets the "priceFeed" account.
func (inst *InitializePythPullOracle) GetPriceFeedAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetSystemProgramAccount sets the "systemProgram" account.
func (inst *InitializePythPullOracle) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *InitializePythPullOracle {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
func (inst *InitializePythPullOracle) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetStateAccount sets the "state" account.
func (inst *InitializePythPullOracle) SetStateAccount(state ag_solanago.PublicKey) *InitializePythPullOracle {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(state)
	return inst
}

// GetStateAccount gets the "state" account.
func (inst *InitializePythPullOracle) GetStateAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

func (inst InitializePythPullOracle) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_InitializePythPullOracle,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst InitializePythPullOracle) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *InitializePythPullOracle) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.FeedId == nil {
			return errors.New("FeedId parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Admin is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.PythSolanaReceiver is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.PriceFeed is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.State is not set")
		}
	}
	return nil
}

func (inst *InitializePythPullOracle) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("InitializePythPullOracle")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("FeedId", *inst.FeedId))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=5]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("             admin", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("pythSolanaReceiver", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("         priceFeed", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("     systemProgram", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("             state", inst.AccountMetaSlice.Get(4)))
					})
				})
		})
}

func (obj InitializePythPullOracle) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `FeedId` param:
	err = encoder.Encode(obj.FeedId)
	if err != nil {
		return err
	}
	return nil
}
func (obj *InitializePythPullOracle) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `FeedId`:
	err = decoder.Decode(&obj.FeedId)
	if err != nil {
		return err
	}
	return nil
}

// NewInitializePythPullOracleInstruction declares a new InitializePythPullOracle instruction with the provided parameters and accounts.
func NewInitializePythPullOracleInstruction(
	// Parameters:
	feedId [32]uint8,
	// Accounts:
	admin ag_solanago.PublicKey,
	pythSolanaReceiver ag_solanago.PublicKey,
	priceFeed ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey,
	state ag_solanago.PublicKey) *InitializePythPullOracle {
	return NewInitializePythPullOracleInstructionBuilder().
		SetFeedId(feedId).
		SetAdminAccount(admin).
		SetPythSolanaReceiverAccount(pythSolanaReceiver).
		SetPriceFeedAccount(priceFeed).
		SetSystemProgramAccount(systemProgram).
		SetStateAccount(state)
}
