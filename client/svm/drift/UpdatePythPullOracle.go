// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package drift

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// UpdatePythPullOracle is the `updatePythPullOracle` instruction.
type UpdatePythPullOracle struct {
	FeedId *[32]uint8
	Params *[]byte

	// [0] = [WRITE, SIGNER] keeper
	//
	// [1] = [] pythSolanaReceiver
	//
	// [2] = [] encodedVaa
	//
	// [3] = [WRITE] priceFeed
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewUpdatePythPullOracleInstructionBuilder creates a new `UpdatePythPullOracle` instruction builder.
func NewUpdatePythPullOracleInstructionBuilder() *UpdatePythPullOracle {
	nd := &UpdatePythPullOracle{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 4),
	}
	return nd
}

// SetFeedId sets the "feedId" parameter.
func (inst *UpdatePythPullOracle) SetFeedId(feedId [32]uint8) *UpdatePythPullOracle {
	inst.FeedId = &feedId
	return inst
}

// SetParams sets the "params" parameter.
func (inst *UpdatePythPullOracle) SetParams(params []byte) *UpdatePythPullOracle {
	inst.Params = &params
	return inst
}

// SetKeeperAccount sets the "keeper" account.
func (inst *UpdatePythPullOracle) SetKeeperAccount(keeper ag_solanago.PublicKey) *UpdatePythPullOracle {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(keeper).WRITE().SIGNER()
	return inst
}

// GetKeeperAccount gets the "keeper" account.
func (inst *UpdatePythPullOracle) GetKeeperAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetPythSolanaReceiverAccount sets the "pythSolanaReceiver" account.
func (inst *UpdatePythPullOracle) SetPythSolanaReceiverAccount(pythSolanaReceiver ag_solanago.PublicKey) *UpdatePythPullOracle {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(pythSolanaReceiver)
	return inst
}

// GetPythSolanaReceiverAccount gets the "pythSolanaReceiver" account.
func (inst *UpdatePythPullOracle) GetPythSolanaReceiverAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetEncodedVaaAccount sets the "encodedVaa" account.
func (inst *UpdatePythPullOracle) SetEncodedVaaAccount(encodedVaa ag_solanago.PublicKey) *UpdatePythPullOracle {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(encodedVaa)
	return inst
}

// GetEncodedVaaAccount gets the "encodedVaa" account.
func (inst *UpdatePythPullOracle) GetEncodedVaaAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetPriceFeedAccount sets the "priceFeed" account.
func (inst *UpdatePythPullOracle) SetPriceFeedAccount(priceFeed ag_solanago.PublicKey) *UpdatePythPullOracle {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(priceFeed).WRITE()
	return inst
}

// GetPriceFeedAccount gets the "priceFeed" account.
func (inst *UpdatePythPullOracle) GetPriceFeedAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

func (inst UpdatePythPullOracle) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_UpdatePythPullOracle,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst UpdatePythPullOracle) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *UpdatePythPullOracle) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.FeedId == nil {
			return errors.New("FeedId parameter is not set")
		}
		if inst.Params == nil {
			return errors.New("Params parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Keeper is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.PythSolanaReceiver is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.EncodedVaa is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.PriceFeed is not set")
		}
	}
	return nil
}

func (inst *UpdatePythPullOracle) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("UpdatePythPullOracle")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=2]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("FeedId", *inst.FeedId))
						paramsBranch.Child(ag_format.Param("Params", *inst.Params))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=4]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("            keeper", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("pythSolanaReceiver", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("        encodedVaa", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("         priceFeed", inst.AccountMetaSlice.Get(3)))
					})
				})
		})
}

func (obj UpdatePythPullOracle) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `FeedId` param:
	err = encoder.Encode(obj.FeedId)
	if err != nil {
		return err
	}
	// Serialize `Params` param:
	err = encoder.Encode(obj.Params)
	if err != nil {
		return err
	}
	return nil
}
func (obj *UpdatePythPullOracle) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `FeedId`:
	err = decoder.Decode(&obj.FeedId)
	if err != nil {
		return err
	}
	// Deserialize `Params`:
	err = decoder.Decode(&obj.Params)
	if err != nil {
		return err
	}
	return nil
}

// NewUpdatePythPullOracleInstruction declares a new UpdatePythPullOracle instruction with the provided parameters and accounts.
func NewUpdatePythPullOracleInstruction(
	// Parameters:
	feedId [32]uint8,
	params []byte,
	// Accounts:
	keeper ag_solanago.PublicKey,
	pythSolanaReceiver ag_solanago.PublicKey,
	encodedVaa ag_solanago.PublicKey,
	priceFeed ag_solanago.PublicKey) *UpdatePythPullOracle {
	return NewUpdatePythPullOracleInstructionBuilder().
		SetFeedId(feedId).
		SetParams(params).
		SetKeeperAccount(keeper).
		SetPythSolanaReceiverAccount(pythSolanaReceiver).
		SetEncodedVaaAccount(encodedVaa).
		SetPriceFeedAccount(priceFeed)
}
