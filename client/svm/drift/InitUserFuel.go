// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package drift

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// InitUserFuel is the `initUserFuel` instruction.
type InitUserFuel struct {
	FuelBoostDeposits  *uint32 `bin:"optional"`
	FuelBoostBorrows   *uint32 `bin:"optional"`
	FuelBoostTaker     *uint32 `bin:"optional"`
	FuelBoostMaker     *uint32 `bin:"optional"`
	FuelBoostInsurance *uint32 `bin:"optional"`

	// [0] = [SIGNER] admin
	//
	// [1] = [] state
	//
	// [2] = [WRITE] user
	//
	// [3] = [WRITE] userStats
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewInitUserFuelInstructionBuilder creates a new `InitUserFuel` instruction builder.
func NewInitUserFuelInstructionBuilder() *InitUserFuel {
	nd := &InitUserFuel{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 4),
	}
	return nd
}

// SetFuelBoostDeposits sets the "fuelBoostDeposits" parameter.
func (inst *InitUserFuel) SetFuelBoostDeposits(fuelBoostDeposits uint32) *InitUserFuel {
	inst.FuelBoostDeposits = &fuelBoostDeposits
	return inst
}

// SetFuelBoostBorrows sets the "fuelBoostBorrows" parameter.
func (inst *InitUserFuel) SetFuelBoostBorrows(fuelBoostBorrows uint32) *InitUserFuel {
	inst.FuelBoostBorrows = &fuelBoostBorrows
	return inst
}

// SetFuelBoostTaker sets the "fuelBoostTaker" parameter.
func (inst *InitUserFuel) SetFuelBoostTaker(fuelBoostTaker uint32) *InitUserFuel {
	inst.FuelBoostTaker = &fuelBoostTaker
	return inst
}

// SetFuelBoostMaker sets the "fuelBoostMaker" parameter.
func (inst *InitUserFuel) SetFuelBoostMaker(fuelBoostMaker uint32) *InitUserFuel {
	inst.FuelBoostMaker = &fuelBoostMaker
	return inst
}

// SetFuelBoostInsurance sets the "fuelBoostInsurance" parameter.
func (inst *InitUserFuel) SetFuelBoostInsurance(fuelBoostInsurance uint32) *InitUserFuel {
	inst.FuelBoostInsurance = &fuelBoostInsurance
	return inst
}

// SetAdminAccount sets the "admin" account.
func (inst *InitUserFuel) SetAdminAccount(admin ag_solanago.PublicKey) *InitUserFuel {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(admin).SIGNER()
	return inst
}

// GetAdminAccount gets the "admin" account.
func (inst *InitUserFuel) GetAdminAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetStateAccount sets the "state" account.
func (inst *InitUserFuel) SetStateAccount(state ag_solanago.PublicKey) *InitUserFuel {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(state)
	return inst
}

// GetStateAccount gets the "state" account.
func (inst *InitUserFuel) GetStateAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetUserAccount sets the "user" account.
func (inst *InitUserFuel) SetUserAccount(user ag_solanago.PublicKey) *InitUserFuel {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(user).WRITE()
	return inst
}

// GetUserAccount gets the "user" account.
func (inst *InitUserFuel) GetUserAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetUserStatsAccount sets the "userStats" account.
func (inst *InitUserFuel) SetUserStatsAccount(userStats ag_solanago.PublicKey) *InitUserFuel {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(userStats).WRITE()
	return inst
}

// GetUserStatsAccount gets the "userStats" account.
func (inst *InitUserFuel) GetUserStatsAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

func (inst InitUserFuel) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_InitUserFuel,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst InitUserFuel) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *InitUserFuel) Validate() error {
	// Check whether all (required) parameters are set:
	{
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Admin is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.State is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.User is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.UserStats is not set")
		}
	}
	return nil
}

func (inst *InitUserFuel) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("InitUserFuel")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=5]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param(" FuelBoostDeposits (OPT)", inst.FuelBoostDeposits))
						paramsBranch.Child(ag_format.Param("  FuelBoostBorrows (OPT)", inst.FuelBoostBorrows))
						paramsBranch.Child(ag_format.Param("    FuelBoostTaker (OPT)", inst.FuelBoostTaker))
						paramsBranch.Child(ag_format.Param("    FuelBoostMaker (OPT)", inst.FuelBoostMaker))
						paramsBranch.Child(ag_format.Param("FuelBoostInsurance (OPT)", inst.FuelBoostInsurance))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=4]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("    admin", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("    state", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("     user", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("userStats", inst.AccountMetaSlice.Get(3)))
					})
				})
		})
}

func (obj InitUserFuel) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `FuelBoostDeposits` param (optional):
	{
		if obj.FuelBoostDeposits == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.FuelBoostDeposits)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `FuelBoostBorrows` param (optional):
	{
		if obj.FuelBoostBorrows == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.FuelBoostBorrows)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `FuelBoostTaker` param (optional):
	{
		if obj.FuelBoostTaker == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.FuelBoostTaker)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `FuelBoostMaker` param (optional):
	{
		if obj.FuelBoostMaker == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.FuelBoostMaker)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `FuelBoostInsurance` param (optional):
	{
		if obj.FuelBoostInsurance == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.FuelBoostInsurance)
			if err != nil {
				return err
			}
		}
	}
	return nil
}
func (obj *InitUserFuel) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `FuelBoostDeposits` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.FuelBoostDeposits)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `FuelBoostBorrows` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.FuelBoostBorrows)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `FuelBoostTaker` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.FuelBoostTaker)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `FuelBoostMaker` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.FuelBoostMaker)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `FuelBoostInsurance` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.FuelBoostInsurance)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

// NewInitUserFuelInstruction declares a new InitUserFuel instruction with the provided parameters and accounts.
func NewInitUserFuelInstruction(
	// Parameters:
	fuelBoostDeposits uint32,
	fuelBoostBorrows uint32,
	fuelBoostTaker uint32,
	fuelBoostMaker uint32,
	fuelBoostInsurance uint32,
	// Accounts:
	admin ag_solanago.PublicKey,
	state ag_solanago.PublicKey,
	user ag_solanago.PublicKey,
	userStats ag_solanago.PublicKey) *InitUserFuel {
	return NewInitUserFuelInstructionBuilder().
		SetFuelBoostDeposits(fuelBoostDeposits).
		SetFuelBoostBorrows(fuelBoostBorrows).
		SetFuelBoostTaker(fuelBoostTaker).
		SetFuelBoostMaker(fuelBoostMaker).
		SetFuelBoostInsurance(fuelBoostInsurance).
		SetAdminAccount(admin).
		SetStateAccount(state).
		SetUserAccount(user).
		SetUserStatsAccount(userStats)
}
