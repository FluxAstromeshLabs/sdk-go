// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: flux/stream/v1beta1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/codec/types"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ChainStreamRequest struct {
	Modules []string `protobuf:"bytes,1,rep,name=modules,proto3" json:"modules,omitempty"`
}

func (m *ChainStreamRequest) Reset()         { *m = ChainStreamRequest{} }
func (m *ChainStreamRequest) String() string { return proto.CompactTextString(m) }
func (*ChainStreamRequest) ProtoMessage()    {}
func (*ChainStreamRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a82db9e8fada1d29, []int{0}
}
func (m *ChainStreamRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChainStreamRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChainStreamRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChainStreamRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChainStreamRequest.Merge(m, src)
}
func (m *ChainStreamRequest) XXX_Size() int {
	return m.Size()
}
func (m *ChainStreamRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ChainStreamRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ChainStreamRequest proto.InternalMessageInfo

func (m *ChainStreamRequest) GetModules() []string {
	if m != nil {
		return m.Modules
	}
	return nil
}

type ChainStreamResponse struct {
	BlockHeight uint64    `protobuf:"varint,1,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	Modules     []string  `protobuf:"bytes,2,rep,name=modules,proto3" json:"modules,omitempty"`
	Events      []*Events `protobuf:"bytes,3,rep,name=events,proto3" json:"events,omitempty"`
}

func (m *ChainStreamResponse) Reset()         { *m = ChainStreamResponse{} }
func (m *ChainStreamResponse) String() string { return proto.CompactTextString(m) }
func (*ChainStreamResponse) ProtoMessage()    {}
func (*ChainStreamResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a82db9e8fada1d29, []int{1}
}
func (m *ChainStreamResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChainStreamResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChainStreamResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChainStreamResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChainStreamResponse.Merge(m, src)
}
func (m *ChainStreamResponse) XXX_Size() int {
	return m.Size()
}
func (m *ChainStreamResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ChainStreamResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ChainStreamResponse proto.InternalMessageInfo

func (m *ChainStreamResponse) GetBlockHeight() uint64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *ChainStreamResponse) GetModules() []string {
	if m != nil {
		return m.Modules
	}
	return nil
}

func (m *ChainStreamResponse) GetEvents() []*Events {
	if m != nil {
		return m.Events
	}
	return nil
}

type Events struct {
	RawEvents []*types.Any `protobuf:"bytes,1,rep,name=raw_events,json=rawEvents,proto3" json:"raw_events,omitempty"`
}

func (m *Events) Reset()         { *m = Events{} }
func (m *Events) String() string { return proto.CompactTextString(m) }
func (*Events) ProtoMessage()    {}
func (*Events) Descriptor() ([]byte, []int) {
	return fileDescriptor_a82db9e8fada1d29, []int{2}
}
func (m *Events) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Events) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Events.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Events) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Events.Merge(m, src)
}
func (m *Events) XXX_Size() int {
	return m.Size()
}
func (m *Events) XXX_DiscardUnknown() {
	xxx_messageInfo_Events.DiscardUnknown(m)
}

var xxx_messageInfo_Events proto.InternalMessageInfo

func (m *Events) GetRawEvents() []*types.Any {
	if m != nil {
		return m.RawEvents
	}
	return nil
}

func init() {
	proto.RegisterType((*ChainStreamRequest)(nil), "flux.stream.v1beta1.ChainStreamRequest")
	proto.RegisterType((*ChainStreamResponse)(nil), "flux.stream.v1beta1.ChainStreamResponse")
	proto.RegisterType((*Events)(nil), "flux.stream.v1beta1.Events")
}

func init() { proto.RegisterFile("flux/stream/v1beta1/query.proto", fileDescriptor_a82db9e8fada1d29) }

var fileDescriptor_a82db9e8fada1d29 = []byte{
	// 328 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x91, 0x3f, 0x4f, 0x02, 0x31,
	0x18, 0xc6, 0xa9, 0x18, 0x0c, 0xc5, 0xa9, 0x38, 0x9c, 0x98, 0x9c, 0xc8, 0xe2, 0x4d, 0xad, 0xc0,
	0xec, 0xa0, 0x46, 0xa2, 0x89, 0x71, 0x38, 0x9d, 0x5c, 0x48, 0x0b, 0x2f, 0x77, 0xc4, 0xe3, 0x0a,
	0xd7, 0x96, 0x3f, 0x9f, 0xc0, 0xd5, 0x8f, 0xe5, 0xc8, 0xe8, 0x68, 0xe0, 0x8b, 0x18, 0x7a, 0x47,
	0xc2, 0x45, 0x12, 0xc7, 0xf7, 0xcd, 0xef, 0xf9, 0xa5, 0xcf, 0x5b, 0x7c, 0x3e, 0x88, 0xcc, 0x9c,
	0x29, 0x9d, 0x00, 0x1f, 0xb1, 0x69, 0x53, 0x80, 0xe6, 0x4d, 0x36, 0x31, 0x90, 0x2c, 0xe8, 0x38,
	0x91, 0x5a, 0x92, 0xea, 0x06, 0xa0, 0x29, 0x40, 0x33, 0xa0, 0x76, 0x1a, 0x48, 0x19, 0x44, 0xc0,
	0x2c, 0x22, 0xcc, 0x80, 0xf1, 0x38, 0xe3, 0x1b, 0x14, 0x93, 0xbb, 0x90, 0x0f, 0xe3, 0x17, 0x9b,
	0xf0, 0x61, 0x62, 0x40, 0x69, 0xe2, 0xe0, 0xa3, 0x91, 0xec, 0x9b, 0x08, 0x94, 0x83, 0xea, 0x45,
	0xaf, 0xec, 0x6f, 0xc7, 0xc6, 0x07, 0xc2, 0xd5, 0x5c, 0x40, 0x8d, 0x65, 0xac, 0x80, 0x5c, 0xe0,
	0x63, 0x11, 0xc9, 0xde, 0x7b, 0x37, 0x84, 0x61, 0x10, 0x6a, 0x07, 0xd5, 0x91, 0x77, 0xe8, 0x57,
	0xec, 0xee, 0xc1, 0xae, 0x76, 0xa5, 0x07, 0x39, 0x29, 0x69, 0xe3, 0x12, 0x4c, 0x21, 0xd6, 0xca,
	0x29, 0xd6, 0x8b, 0x5e, 0xa5, 0x75, 0x46, 0xf7, 0xb4, 0xa0, 0xf7, 0x16, 0xf1, 0x33, 0xb4, 0x71,
	0x8d, 0x4b, 0xe9, 0x86, 0xb4, 0x31, 0x4e, 0xf8, 0xac, 0x9b, 0x29, 0x90, 0x55, 0x9c, 0xd0, 0xb4,
	0x33, 0xdd, 0x76, 0xa6, 0x37, 0xf1, 0xc2, 0x2f, 0x27, 0x7c, 0x96, 0x86, 0x5a, 0x13, 0x5c, 0xd9,
	0xe9, 0x41, 0x44, 0x7e, 0xbc, 0xdc, 0xfb, 0x82, 0xbf, 0x97, 0xaa, 0x79, 0xff, 0x83, 0xe9, 0x85,
	0xae, 0xd0, 0xed, 0xe3, 0xd7, 0xca, 0x45, 0xcb, 0x95, 0x8b, 0x7e, 0x56, 0x2e, 0xfa, 0x5c, 0xbb,
	0x85, 0xe5, 0xda, 0x2d, 0x7c, 0xaf, 0xdd, 0xc2, 0x1b, 0x0b, 0x86, 0x3a, 0x34, 0x82, 0xf6, 0xe4,
	0x88, 0x75, 0x22, 0x33, 0x7f, 0xee, 0xbc, 0x3e, 0x71, 0xa1, 0xd8, 0xc6, 0xdd, 0x67, 0xbd, 0x8d,
	0x6d, 0xfb, 0xe9, 0x7a, 0x31, 0x06, 0x25, 0x4a, 0xb6, 0x56, 0xfb, 0x37, 0x00, 0x00, 0xff, 0xff,
	0x15, 0x7c, 0xea, 0xa9, 0x10, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ChainStreamClient is the client API for ChainStream service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ChainStreamClient interface {
	ChainStream(ctx context.Context, in *ChainStreamRequest, opts ...grpc.CallOption) (ChainStream_ChainStreamClient, error)
}

type chainStreamClient struct {
	cc grpc1.ClientConn
}

func NewChainStreamClient(cc grpc1.ClientConn) ChainStreamClient {
	return &chainStreamClient{cc}
}

func (c *chainStreamClient) ChainStream(ctx context.Context, in *ChainStreamRequest, opts ...grpc.CallOption) (ChainStream_ChainStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ChainStream_serviceDesc.Streams[0], "/flux.stream.v1beta1.ChainStream/ChainStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &chainStreamChainStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ChainStream_ChainStreamClient interface {
	Recv() (*ChainStreamResponse, error)
	grpc.ClientStream
}

type chainStreamChainStreamClient struct {
	grpc.ClientStream
}

func (x *chainStreamChainStreamClient) Recv() (*ChainStreamResponse, error) {
	m := new(ChainStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ChainStreamServer is the server API for ChainStream service.
type ChainStreamServer interface {
	ChainStream(*ChainStreamRequest, ChainStream_ChainStreamServer) error
}

// UnimplementedChainStreamServer can be embedded to have forward compatible implementations.
type UnimplementedChainStreamServer struct {
}

func (*UnimplementedChainStreamServer) ChainStream(req *ChainStreamRequest, srv ChainStream_ChainStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ChainStream not implemented")
}

func RegisterChainStreamServer(s grpc1.Server, srv ChainStreamServer) {
	s.RegisterService(&_ChainStream_serviceDesc, srv)
}

func _ChainStream_ChainStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ChainStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ChainStreamServer).ChainStream(m, &chainStreamChainStreamServer{stream})
}

type ChainStream_ChainStreamServer interface {
	Send(*ChainStreamResponse) error
	grpc.ServerStream
}

type chainStreamChainStreamServer struct {
	grpc.ServerStream
}

func (x *chainStreamChainStreamServer) Send(m *ChainStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _ChainStream_serviceDesc = grpc.ServiceDesc{
	ServiceName: "flux.stream.v1beta1.ChainStream",
	HandlerType: (*ChainStreamServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ChainStream",
			Handler:       _ChainStream_ChainStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "flux/stream/v1beta1/query.proto",
}

func (m *ChainStreamRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChainStreamRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChainStreamRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Modules) > 0 {
		for iNdEx := len(m.Modules) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Modules[iNdEx])
			copy(dAtA[i:], m.Modules[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.Modules[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ChainStreamResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChainStreamResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChainStreamResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Events) > 0 {
		for iNdEx := len(m.Events) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Events[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Modules) > 0 {
		for iNdEx := len(m.Modules) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Modules[iNdEx])
			copy(dAtA[i:], m.Modules[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.Modules[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.BlockHeight != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Events) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Events) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Events) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RawEvents) > 0 {
		for iNdEx := len(m.RawEvents) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RawEvents[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ChainStreamRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Modules) > 0 {
		for _, s := range m.Modules {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *ChainStreamResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlockHeight != 0 {
		n += 1 + sovQuery(uint64(m.BlockHeight))
	}
	if len(m.Modules) > 0 {
		for _, s := range m.Modules {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if len(m.Events) > 0 {
		for _, e := range m.Events {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *Events) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.RawEvents) > 0 {
		for _, e := range m.RawEvents {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ChainStreamRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChainStreamRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChainStreamRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Modules", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Modules = append(m.Modules, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChainStreamResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChainStreamResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChainStreamResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Modules", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Modules = append(m.Modules, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Events", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Events = append(m.Events, &Events{})
			if err := m.Events[len(m.Events)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Events) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Events: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Events: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RawEvents", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RawEvents = append(m.RawEvents, &types.Any{})
			if err := m.RawEvents[len(m.RawEvents)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
