// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: flux/indexer/campclash/camp_query.proto

package campclash

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Define the Action enum
// TODO: Add more action here
type Action int32

const (
	Action_OPEN_PAGE  Action = 0
	Action_CLOSE_PAGE Action = 1
)

var Action_name = map[int32]string{
	0: "OPEN_PAGE",
	1: "CLOSE_PAGE",
}

var Action_value = map[string]int32{
	"OPEN_PAGE":  0,
	"CLOSE_PAGE": 1,
}

func (x Action) String() string {
	return proto.EnumName(Action_name, int32(x))
}

func (Action) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_8e5a303a04a3aae5, []int{0}
}

type ListProjectsRequest struct {
	Pagination        *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
	CampDenom         string             `protobuf:"bytes,2,opt,name=camp_denom,json=campDenom,proto3" json:"camp_denom,omitempty"`
	Search            string             `protobuf:"bytes,3,opt,name=search,proto3" json:"search,omitempty"`
	SortByFields      []string           `protobuf:"bytes,4,rep,name=sort_by_fields,json=sortByFields,proto3" json:"sort_by_fields,omitempty"`
	CampType          string             `protobuf:"bytes,5,opt,name=camp_type,json=campType,proto3" json:"camp_type,omitempty"`
	Tags              []string           `protobuf:"bytes,6,rep,name=tags,proto3" json:"tags,omitempty"`
	OnlyChallengeable bool               `protobuf:"varint,7,opt,name=only_challengeable,json=onlyChallengeable,proto3" json:"only_challengeable,omitempty"`
}

func (m *ListProjectsRequest) Reset()         { *m = ListProjectsRequest{} }
func (m *ListProjectsRequest) String() string { return proto.CompactTextString(m) }
func (*ListProjectsRequest) ProtoMessage()    {}
func (*ListProjectsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e5a303a04a3aae5, []int{0}
}
func (m *ListProjectsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListProjectsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListProjectsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListProjectsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListProjectsRequest.Merge(m, src)
}
func (m *ListProjectsRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListProjectsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListProjectsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListProjectsRequest proto.InternalMessageInfo

func (m *ListProjectsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func (m *ListProjectsRequest) GetCampDenom() string {
	if m != nil {
		return m.CampDenom
	}
	return ""
}

func (m *ListProjectsRequest) GetSearch() string {
	if m != nil {
		return m.Search
	}
	return ""
}

func (m *ListProjectsRequest) GetSortByFields() []string {
	if m != nil {
		return m.SortByFields
	}
	return nil
}

func (m *ListProjectsRequest) GetCampType() string {
	if m != nil {
		return m.CampType
	}
	return ""
}

func (m *ListProjectsRequest) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *ListProjectsRequest) GetOnlyChallengeable() bool {
	if m != nil {
		return m.OnlyChallengeable
	}
	return false
}

type ListProjectsResponse struct {
	Pagination *query.PageResponse `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
	Projects   []*Project          `protobuf:"bytes,2,rep,name=projects,proto3" json:"projects,omitempty"`
}

func (m *ListProjectsResponse) Reset()         { *m = ListProjectsResponse{} }
func (m *ListProjectsResponse) String() string { return proto.CompactTextString(m) }
func (*ListProjectsResponse) ProtoMessage()    {}
func (*ListProjectsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e5a303a04a3aae5, []int{1}
}
func (m *ListProjectsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListProjectsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListProjectsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListProjectsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListProjectsResponse.Merge(m, src)
}
func (m *ListProjectsResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListProjectsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListProjectsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListProjectsResponse proto.InternalMessageInfo

func (m *ListProjectsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func (m *ListProjectsResponse) GetProjects() []*Project {
	if m != nil {
		return m.Projects
	}
	return nil
}

type StreamProjectRequest struct {
	CampDenom string   `protobuf:"bytes,1,opt,name=camp_denom,json=campDenom,proto3" json:"camp_denom,omitempty"`
	CampType  string   `protobuf:"bytes,2,opt,name=camp_type,json=campType,proto3" json:"camp_type,omitempty"`
	Tags      []string `protobuf:"bytes,3,rep,name=tags,proto3" json:"tags,omitempty"`
}

func (m *StreamProjectRequest) Reset()         { *m = StreamProjectRequest{} }
func (m *StreamProjectRequest) String() string { return proto.CompactTextString(m) }
func (*StreamProjectRequest) ProtoMessage()    {}
func (*StreamProjectRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e5a303a04a3aae5, []int{2}
}
func (m *StreamProjectRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StreamProjectRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StreamProjectRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StreamProjectRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamProjectRequest.Merge(m, src)
}
func (m *StreamProjectRequest) XXX_Size() int {
	return m.Size()
}
func (m *StreamProjectRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamProjectRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StreamProjectRequest proto.InternalMessageInfo

func (m *StreamProjectRequest) GetCampDenom() string {
	if m != nil {
		return m.CampDenom
	}
	return ""
}

func (m *StreamProjectRequest) GetCampType() string {
	if m != nil {
		return m.CampType
	}
	return ""
}

func (m *StreamProjectRequest) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

type StreamProjectResponse struct {
	Deleted         uint64   `protobuf:"varint,1,opt,name=deleted,proto3" json:"deleted,omitempty"`
	Height          uint64   `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
	Project         *Project `protobuf:"bytes,3,opt,name=project,proto3" json:"project,omitempty"`
	StreamOperation string   `protobuf:"bytes,4,opt,name=stream_operation,json=streamOperation,proto3" json:"stream_operation,omitempty"`
}

func (m *StreamProjectResponse) Reset()         { *m = StreamProjectResponse{} }
func (m *StreamProjectResponse) String() string { return proto.CompactTextString(m) }
func (*StreamProjectResponse) ProtoMessage()    {}
func (*StreamProjectResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e5a303a04a3aae5, []int{3}
}
func (m *StreamProjectResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StreamProjectResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StreamProjectResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StreamProjectResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamProjectResponse.Merge(m, src)
}
func (m *StreamProjectResponse) XXX_Size() int {
	return m.Size()
}
func (m *StreamProjectResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamProjectResponse.DiscardUnknown(m)
}

var xxx_messageInfo_StreamProjectResponse proto.InternalMessageInfo

func (m *StreamProjectResponse) GetDeleted() uint64 {
	if m != nil {
		return m.Deleted
	}
	return 0
}

func (m *StreamProjectResponse) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *StreamProjectResponse) GetProject() *Project {
	if m != nil {
		return m.Project
	}
	return nil
}

func (m *StreamProjectResponse) GetStreamOperation() string {
	if m != nil {
		return m.StreamOperation
	}
	return ""
}

type ListBalancesRequest struct {
	Pagination  *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
	CampDenom   string             `protobuf:"bytes,2,opt,name=camp_denom,json=campDenom,proto3" json:"camp_denom,omitempty"`
	UserAddress string             `protobuf:"bytes,3,opt,name=user_address,json=userAddress,proto3" json:"user_address,omitempty"`
	SortBy      string             `protobuf:"bytes,4,opt,name=sort_by,json=sortBy,proto3" json:"sort_by,omitempty"`
	SortAsc     bool               `protobuf:"varint,5,opt,name=sort_asc,json=sortAsc,proto3" json:"sort_asc,omitempty"`
	ChallengeId uint64             `protobuf:"varint,6,opt,name=challenge_id,json=challengeId,proto3" json:"challenge_id,omitempty"`
}

func (m *ListBalancesRequest) Reset()         { *m = ListBalancesRequest{} }
func (m *ListBalancesRequest) String() string { return proto.CompactTextString(m) }
func (*ListBalancesRequest) ProtoMessage()    {}
func (*ListBalancesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e5a303a04a3aae5, []int{4}
}
func (m *ListBalancesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListBalancesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListBalancesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListBalancesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListBalancesRequest.Merge(m, src)
}
func (m *ListBalancesRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListBalancesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListBalancesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListBalancesRequest proto.InternalMessageInfo

func (m *ListBalancesRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func (m *ListBalancesRequest) GetCampDenom() string {
	if m != nil {
		return m.CampDenom
	}
	return ""
}

func (m *ListBalancesRequest) GetUserAddress() string {
	if m != nil {
		return m.UserAddress
	}
	return ""
}

func (m *ListBalancesRequest) GetSortBy() string {
	if m != nil {
		return m.SortBy
	}
	return ""
}

func (m *ListBalancesRequest) GetSortAsc() bool {
	if m != nil {
		return m.SortAsc
	}
	return false
}

func (m *ListBalancesRequest) GetChallengeId() uint64 {
	if m != nil {
		return m.ChallengeId
	}
	return 0
}

type ListBalancesResponse struct {
	Pagination  *query.PageResponse `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
	UserBalance []*UserBalance      `protobuf:"bytes,2,rep,name=user_balance,json=userBalance,proto3" json:"user_balance,omitempty"`
	ChallengeId uint64              `protobuf:"varint,3,opt,name=challenge_id,json=challengeId,proto3" json:"challenge_id,omitempty"`
}

func (m *ListBalancesResponse) Reset()         { *m = ListBalancesResponse{} }
func (m *ListBalancesResponse) String() string { return proto.CompactTextString(m) }
func (*ListBalancesResponse) ProtoMessage()    {}
func (*ListBalancesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e5a303a04a3aae5, []int{5}
}
func (m *ListBalancesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListBalancesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListBalancesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListBalancesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListBalancesResponse.Merge(m, src)
}
func (m *ListBalancesResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListBalancesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListBalancesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListBalancesResponse proto.InternalMessageInfo

func (m *ListBalancesResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func (m *ListBalancesResponse) GetUserBalance() []*UserBalance {
	if m != nil {
		return m.UserBalance
	}
	return nil
}

func (m *ListBalancesResponse) GetChallengeId() uint64 {
	if m != nil {
		return m.ChallengeId
	}
	return 0
}

type StreamBalancesRequest struct {
	CampDenom string `protobuf:"bytes,1,opt,name=camp_denom,json=campDenom,proto3" json:"camp_denom,omitempty"`
	Address   string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *StreamBalancesRequest) Reset()         { *m = StreamBalancesRequest{} }
func (m *StreamBalancesRequest) String() string { return proto.CompactTextString(m) }
func (*StreamBalancesRequest) ProtoMessage()    {}
func (*StreamBalancesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e5a303a04a3aae5, []int{6}
}
func (m *StreamBalancesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StreamBalancesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StreamBalancesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StreamBalancesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamBalancesRequest.Merge(m, src)
}
func (m *StreamBalancesRequest) XXX_Size() int {
	return m.Size()
}
func (m *StreamBalancesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamBalancesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StreamBalancesRequest proto.InternalMessageInfo

func (m *StreamBalancesRequest) GetCampDenom() string {
	if m != nil {
		return m.CampDenom
	}
	return ""
}

func (m *StreamBalancesRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type StreamBalancesResponse struct {
	Deleted uint64       `protobuf:"varint,1,opt,name=deleted,proto3" json:"deleted,omitempty"`
	User    *UserBalance `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
}

func (m *StreamBalancesResponse) Reset()         { *m = StreamBalancesResponse{} }
func (m *StreamBalancesResponse) String() string { return proto.CompactTextString(m) }
func (*StreamBalancesResponse) ProtoMessage()    {}
func (*StreamBalancesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e5a303a04a3aae5, []int{7}
}
func (m *StreamBalancesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StreamBalancesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StreamBalancesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StreamBalancesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamBalancesResponse.Merge(m, src)
}
func (m *StreamBalancesResponse) XXX_Size() int {
	return m.Size()
}
func (m *StreamBalancesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamBalancesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_StreamBalancesResponse proto.InternalMessageInfo

func (m *StreamBalancesResponse) GetDeleted() uint64 {
	if m != nil {
		return m.Deleted
	}
	return 0
}

func (m *StreamBalancesResponse) GetUser() *UserBalance {
	if m != nil {
		return m.User
	}
	return nil
}

type ListTradesRequest struct {
	Pagination  *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
	CampDenom   string             `protobuf:"bytes,2,opt,name=camp_denom,json=campDenom,proto3" json:"camp_denom,omitempty"`
	UserAddress string             `protobuf:"bytes,3,opt,name=user_address,json=userAddress,proto3" json:"user_address,omitempty"`
}

func (m *ListTradesRequest) Reset()         { *m = ListTradesRequest{} }
func (m *ListTradesRequest) String() string { return proto.CompactTextString(m) }
func (*ListTradesRequest) ProtoMessage()    {}
func (*ListTradesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e5a303a04a3aae5, []int{8}
}
func (m *ListTradesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListTradesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListTradesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListTradesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListTradesRequest.Merge(m, src)
}
func (m *ListTradesRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListTradesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListTradesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListTradesRequest proto.InternalMessageInfo

func (m *ListTradesRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func (m *ListTradesRequest) GetCampDenom() string {
	if m != nil {
		return m.CampDenom
	}
	return ""
}

func (m *ListTradesRequest) GetUserAddress() string {
	if m != nil {
		return m.UserAddress
	}
	return ""
}

type ListTradesResponse struct {
	Pagination *query.PageResponse `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
	Trades     []*Trade            `protobuf:"bytes,2,rep,name=trades,proto3" json:"trades,omitempty"`
}

func (m *ListTradesResponse) Reset()         { *m = ListTradesResponse{} }
func (m *ListTradesResponse) String() string { return proto.CompactTextString(m) }
func (*ListTradesResponse) ProtoMessage()    {}
func (*ListTradesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e5a303a04a3aae5, []int{9}
}
func (m *ListTradesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListTradesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListTradesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListTradesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListTradesResponse.Merge(m, src)
}
func (m *ListTradesResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListTradesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListTradesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListTradesResponse proto.InternalMessageInfo

func (m *ListTradesResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func (m *ListTradesResponse) GetTrades() []*Trade {
	if m != nil {
		return m.Trades
	}
	return nil
}

type StreamTradesRequest struct {
	CampDenom   string `protobuf:"bytes,1,opt,name=camp_denom,json=campDenom,proto3" json:"camp_denom,omitempty"`
	UserAddress string `protobuf:"bytes,2,opt,name=user_address,json=userAddress,proto3" json:"user_address,omitempty"`
	CampType    string `protobuf:"bytes,3,opt,name=camp_type,json=campType,proto3" json:"camp_type,omitempty"`
}

func (m *StreamTradesRequest) Reset()         { *m = StreamTradesRequest{} }
func (m *StreamTradesRequest) String() string { return proto.CompactTextString(m) }
func (*StreamTradesRequest) ProtoMessage()    {}
func (*StreamTradesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e5a303a04a3aae5, []int{10}
}
func (m *StreamTradesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StreamTradesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StreamTradesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StreamTradesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamTradesRequest.Merge(m, src)
}
func (m *StreamTradesRequest) XXX_Size() int {
	return m.Size()
}
func (m *StreamTradesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamTradesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StreamTradesRequest proto.InternalMessageInfo

func (m *StreamTradesRequest) GetCampDenom() string {
	if m != nil {
		return m.CampDenom
	}
	return ""
}

func (m *StreamTradesRequest) GetUserAddress() string {
	if m != nil {
		return m.UserAddress
	}
	return ""
}

func (m *StreamTradesRequest) GetCampType() string {
	if m != nil {
		return m.CampType
	}
	return ""
}

type StreamTradesResponse struct {
	Deleted uint64 `protobuf:"varint,1,opt,name=deleted,proto3" json:"deleted,omitempty"`
	Height  uint64 `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
	Trade   *Trade `protobuf:"bytes,3,opt,name=trade,proto3" json:"trade,omitempty"`
}

func (m *StreamTradesResponse) Reset()         { *m = StreamTradesResponse{} }
func (m *StreamTradesResponse) String() string { return proto.CompactTextString(m) }
func (*StreamTradesResponse) ProtoMessage()    {}
func (*StreamTradesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e5a303a04a3aae5, []int{11}
}
func (m *StreamTradesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StreamTradesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StreamTradesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StreamTradesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamTradesResponse.Merge(m, src)
}
func (m *StreamTradesResponse) XXX_Size() int {
	return m.Size()
}
func (m *StreamTradesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamTradesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_StreamTradesResponse proto.InternalMessageInfo

func (m *StreamTradesResponse) GetDeleted() uint64 {
	if m != nil {
		return m.Deleted
	}
	return 0
}

func (m *StreamTradesResponse) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *StreamTradesResponse) GetTrade() *Trade {
	if m != nil {
		return m.Trade
	}
	return nil
}

type Comment struct {
	CampDenom string `protobuf:"bytes,1,opt,name=camp_denom,json=campDenom,proto3" json:"camp_denom,omitempty" bson:"camp_denom"`
	Account   string `protobuf:"bytes,2,opt,name=account,proto3" json:"account,omitempty" bson:"account"`
	Content   string `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty" bson:"content"`
	Time      uint64 `protobuf:"varint,4,opt,name=time,proto3" json:"time,omitempty" bson:"time"`
}

func (m *Comment) Reset()         { *m = Comment{} }
func (m *Comment) String() string { return proto.CompactTextString(m) }
func (*Comment) ProtoMessage()    {}
func (*Comment) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e5a303a04a3aae5, []int{12}
}
func (m *Comment) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Comment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Comment.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Comment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Comment.Merge(m, src)
}
func (m *Comment) XXX_Size() int {
	return m.Size()
}
func (m *Comment) XXX_DiscardUnknown() {
	xxx_messageInfo_Comment.DiscardUnknown(m)
}

var xxx_messageInfo_Comment proto.InternalMessageInfo

func (m *Comment) GetCampDenom() string {
	if m != nil {
		return m.CampDenom
	}
	return ""
}

func (m *Comment) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *Comment) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *Comment) GetTime() uint64 {
	if m != nil {
		return m.Time
	}
	return 0
}

type PostCommentRequest struct {
	Comment *Comment `protobuf:"bytes,2,opt,name=comment,proto3" json:"comment,omitempty"`
}

func (m *PostCommentRequest) Reset()         { *m = PostCommentRequest{} }
func (m *PostCommentRequest) String() string { return proto.CompactTextString(m) }
func (*PostCommentRequest) ProtoMessage()    {}
func (*PostCommentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e5a303a04a3aae5, []int{13}
}
func (m *PostCommentRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PostCommentRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PostCommentRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PostCommentRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PostCommentRequest.Merge(m, src)
}
func (m *PostCommentRequest) XXX_Size() int {
	return m.Size()
}
func (m *PostCommentRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PostCommentRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PostCommentRequest proto.InternalMessageInfo

func (m *PostCommentRequest) GetComment() *Comment {
	if m != nil {
		return m.Comment
	}
	return nil
}

type PostCommentResponse struct {
}

func (m *PostCommentResponse) Reset()         { *m = PostCommentResponse{} }
func (m *PostCommentResponse) String() string { return proto.CompactTextString(m) }
func (*PostCommentResponse) ProtoMessage()    {}
func (*PostCommentResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e5a303a04a3aae5, []int{14}
}
func (m *PostCommentResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PostCommentResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PostCommentResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PostCommentResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PostCommentResponse.Merge(m, src)
}
func (m *PostCommentResponse) XXX_Size() int {
	return m.Size()
}
func (m *PostCommentResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PostCommentResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PostCommentResponse proto.InternalMessageInfo

type ListCommentsRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
	CampDenom  string             `protobuf:"bytes,2,opt,name=camp_denom,json=campDenom,proto3" json:"camp_denom,omitempty"`
}

func (m *ListCommentsRequest) Reset()         { *m = ListCommentsRequest{} }
func (m *ListCommentsRequest) String() string { return proto.CompactTextString(m) }
func (*ListCommentsRequest) ProtoMessage()    {}
func (*ListCommentsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e5a303a04a3aae5, []int{15}
}
func (m *ListCommentsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListCommentsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListCommentsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListCommentsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListCommentsRequest.Merge(m, src)
}
func (m *ListCommentsRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListCommentsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListCommentsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListCommentsRequest proto.InternalMessageInfo

func (m *ListCommentsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func (m *ListCommentsRequest) GetCampDenom() string {
	if m != nil {
		return m.CampDenom
	}
	return ""
}

type ListCommentsResponse struct {
	Pagination *query.PageResponse `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
	Comments   []*Comment          `protobuf:"bytes,2,rep,name=comments,proto3" json:"comments,omitempty"`
}

func (m *ListCommentsResponse) Reset()         { *m = ListCommentsResponse{} }
func (m *ListCommentsResponse) String() string { return proto.CompactTextString(m) }
func (*ListCommentsResponse) ProtoMessage()    {}
func (*ListCommentsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e5a303a04a3aae5, []int{16}
}
func (m *ListCommentsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListCommentsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListCommentsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListCommentsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListCommentsResponse.Merge(m, src)
}
func (m *ListCommentsResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListCommentsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListCommentsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListCommentsResponse proto.InternalMessageInfo

func (m *ListCommentsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func (m *ListCommentsResponse) GetComments() []*Comment {
	if m != nil {
		return m.Comments
	}
	return nil
}

type StreamCommentsRequest struct {
	CampDenom string `protobuf:"bytes,1,opt,name=camp_denom,json=campDenom,proto3" json:"camp_denom,omitempty"`
}

func (m *StreamCommentsRequest) Reset()         { *m = StreamCommentsRequest{} }
func (m *StreamCommentsRequest) String() string { return proto.CompactTextString(m) }
func (*StreamCommentsRequest) ProtoMessage()    {}
func (*StreamCommentsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e5a303a04a3aae5, []int{17}
}
func (m *StreamCommentsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StreamCommentsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StreamCommentsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StreamCommentsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamCommentsRequest.Merge(m, src)
}
func (m *StreamCommentsRequest) XXX_Size() int {
	return m.Size()
}
func (m *StreamCommentsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamCommentsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StreamCommentsRequest proto.InternalMessageInfo

func (m *StreamCommentsRequest) GetCampDenom() string {
	if m != nil {
		return m.CampDenom
	}
	return ""
}

type StreamCommentsResponse struct {
	Deleted uint64   `protobuf:"varint,1,opt,name=deleted,proto3" json:"deleted,omitempty"`
	Height  uint64   `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
	Comment *Comment `protobuf:"bytes,3,opt,name=comment,proto3" json:"comment,omitempty"`
}

func (m *StreamCommentsResponse) Reset()         { *m = StreamCommentsResponse{} }
func (m *StreamCommentsResponse) String() string { return proto.CompactTextString(m) }
func (*StreamCommentsResponse) ProtoMessage()    {}
func (*StreamCommentsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e5a303a04a3aae5, []int{18}
}
func (m *StreamCommentsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StreamCommentsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StreamCommentsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StreamCommentsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamCommentsResponse.Merge(m, src)
}
func (m *StreamCommentsResponse) XXX_Size() int {
	return m.Size()
}
func (m *StreamCommentsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamCommentsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_StreamCommentsResponse proto.InternalMessageInfo

func (m *StreamCommentsResponse) GetDeleted() uint64 {
	if m != nil {
		return m.Deleted
	}
	return 0
}

func (m *StreamCommentsResponse) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *StreamCommentsResponse) GetComment() *Comment {
	if m != nil {
		return m.Comment
	}
	return nil
}

type GetLeaderboardRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
	CampType   string             `protobuf:"bytes,2,opt,name=camp_type,json=campType,proto3" json:"camp_type,omitempty"`
	SortBy     string             `protobuf:"bytes,3,opt,name=sort_by,json=sortBy,proto3" json:"sort_by,omitempty"`
}

func (m *GetLeaderboardRequest) Reset()         { *m = GetLeaderboardRequest{} }
func (m *GetLeaderboardRequest) String() string { return proto.CompactTextString(m) }
func (*GetLeaderboardRequest) ProtoMessage()    {}
func (*GetLeaderboardRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e5a303a04a3aae5, []int{19}
}
func (m *GetLeaderboardRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetLeaderboardRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetLeaderboardRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetLeaderboardRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetLeaderboardRequest.Merge(m, src)
}
func (m *GetLeaderboardRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetLeaderboardRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetLeaderboardRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetLeaderboardRequest proto.InternalMessageInfo

func (m *GetLeaderboardRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func (m *GetLeaderboardRequest) GetCampType() string {
	if m != nil {
		return m.CampType
	}
	return ""
}

func (m *GetLeaderboardRequest) GetSortBy() string {
	if m != nil {
		return m.SortBy
	}
	return ""
}

type GetLeaderboardResponse struct {
	Pagination *query.PageResponse `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
	Projects   []*Project          `protobuf:"bytes,2,rep,name=projects,proto3" json:"projects,omitempty"`
}

func (m *GetLeaderboardResponse) Reset()         { *m = GetLeaderboardResponse{} }
func (m *GetLeaderboardResponse) String() string { return proto.CompactTextString(m) }
func (*GetLeaderboardResponse) ProtoMessage()    {}
func (*GetLeaderboardResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e5a303a04a3aae5, []int{20}
}
func (m *GetLeaderboardResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetLeaderboardResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetLeaderboardResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetLeaderboardResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetLeaderboardResponse.Merge(m, src)
}
func (m *GetLeaderboardResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetLeaderboardResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetLeaderboardResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetLeaderboardResponse proto.InternalMessageInfo

func (m *GetLeaderboardResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func (m *GetLeaderboardResponse) GetProjects() []*Project {
	if m != nil {
		return m.Projects
	}
	return nil
}

// Define the ListChallenge request and response
type ListChallengeRequest struct {
	Pagination      *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
	ChallengeId     uint64             `protobuf:"varint,2,opt,name=challenge_id,json=challengeId,proto3" json:"challenge_id,omitempty"`
	Status          string             `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	ChallengerDenom string             `protobuf:"bytes,4,opt,name=challenger_denom,json=challengerDenom,proto3" json:"challenger_denom,omitempty"`
	ChallengedDenom string             `protobuf:"bytes,5,opt,name=challenged_denom,json=challengedDenom,proto3" json:"challenged_denom,omitempty"`
}

func (m *ListChallengeRequest) Reset()         { *m = ListChallengeRequest{} }
func (m *ListChallengeRequest) String() string { return proto.CompactTextString(m) }
func (*ListChallengeRequest) ProtoMessage()    {}
func (*ListChallengeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e5a303a04a3aae5, []int{21}
}
func (m *ListChallengeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListChallengeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListChallengeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListChallengeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListChallengeRequest.Merge(m, src)
}
func (m *ListChallengeRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListChallengeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListChallengeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListChallengeRequest proto.InternalMessageInfo

func (m *ListChallengeRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func (m *ListChallengeRequest) GetChallengeId() uint64 {
	if m != nil {
		return m.ChallengeId
	}
	return 0
}

func (m *ListChallengeRequest) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *ListChallengeRequest) GetChallengerDenom() string {
	if m != nil {
		return m.ChallengerDenom
	}
	return ""
}

func (m *ListChallengeRequest) GetChallengedDenom() string {
	if m != nil {
		return m.ChallengedDenom
	}
	return ""
}

type ListChallengeResponse struct {
	Pagination *query.PageResponse `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
	Challenges []*Challenge        `protobuf:"bytes,2,rep,name=challenges,proto3" json:"challenges,omitempty" bson:"challenges"`
}

func (m *ListChallengeResponse) Reset()         { *m = ListChallengeResponse{} }
func (m *ListChallengeResponse) String() string { return proto.CompactTextString(m) }
func (*ListChallengeResponse) ProtoMessage()    {}
func (*ListChallengeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e5a303a04a3aae5, []int{22}
}
func (m *ListChallengeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListChallengeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListChallengeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListChallengeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListChallengeResponse.Merge(m, src)
}
func (m *ListChallengeResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListChallengeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListChallengeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListChallengeResponse proto.InternalMessageInfo

func (m *ListChallengeResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func (m *ListChallengeResponse) GetChallenges() []*Challenge {
	if m != nil {
		return m.Challenges
	}
	return nil
}

// Define the StreamChallenge request and response
type StreamChallengeRequest struct {
	ChallengeId uint64 `protobuf:"varint,1,opt,name=challenge_id,json=challengeId,proto3" json:"challenge_id,omitempty" bson:"challenge_id"`
}

func (m *StreamChallengeRequest) Reset()         { *m = StreamChallengeRequest{} }
func (m *StreamChallengeRequest) String() string { return proto.CompactTextString(m) }
func (*StreamChallengeRequest) ProtoMessage()    {}
func (*StreamChallengeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e5a303a04a3aae5, []int{23}
}
func (m *StreamChallengeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StreamChallengeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StreamChallengeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StreamChallengeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamChallengeRequest.Merge(m, src)
}
func (m *StreamChallengeRequest) XXX_Size() int {
	return m.Size()
}
func (m *StreamChallengeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamChallengeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StreamChallengeRequest proto.InternalMessageInfo

func (m *StreamChallengeRequest) GetChallengeId() uint64 {
	if m != nil {
		return m.ChallengeId
	}
	return 0
}

type StreamChallengeResponse struct {
	Deleted         uint64     `protobuf:"varint,1,opt,name=deleted,proto3" json:"deleted,omitempty"`
	Challenge       *Challenge `protobuf:"bytes,2,opt,name=challenge,proto3" json:"challenge,omitempty" bson:"challenge"`
	StreamOperation string     `protobuf:"bytes,3,opt,name=stream_operation,json=streamOperation,proto3" json:"stream_operation,omitempty"`
}

func (m *StreamChallengeResponse) Reset()         { *m = StreamChallengeResponse{} }
func (m *StreamChallengeResponse) String() string { return proto.CompactTextString(m) }
func (*StreamChallengeResponse) ProtoMessage()    {}
func (*StreamChallengeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e5a303a04a3aae5, []int{24}
}
func (m *StreamChallengeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StreamChallengeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StreamChallengeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StreamChallengeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamChallengeResponse.Merge(m, src)
}
func (m *StreamChallengeResponse) XXX_Size() int {
	return m.Size()
}
func (m *StreamChallengeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamChallengeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_StreamChallengeResponse proto.InternalMessageInfo

func (m *StreamChallengeResponse) GetDeleted() uint64 {
	if m != nil {
		return m.Deleted
	}
	return 0
}

func (m *StreamChallengeResponse) GetChallenge() *Challenge {
	if m != nil {
		return m.Challenge
	}
	return nil
}

func (m *StreamChallengeResponse) GetStreamOperation() string {
	if m != nil {
		return m.StreamOperation
	}
	return ""
}

type ListChallengeClaimableRequest struct {
	Pagination  *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
	ChallengeId uint64             `protobuf:"varint,2,opt,name=challenge_id,json=challengeId,proto3" json:"challenge_id,omitempty"`
	CampDenom   string             `protobuf:"bytes,3,opt,name=camp_denom,json=campDenom,proto3" json:"camp_denom,omitempty"`
	Address     string             `protobuf:"bytes,4,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *ListChallengeClaimableRequest) Reset()         { *m = ListChallengeClaimableRequest{} }
func (m *ListChallengeClaimableRequest) String() string { return proto.CompactTextString(m) }
func (*ListChallengeClaimableRequest) ProtoMessage()    {}
func (*ListChallengeClaimableRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e5a303a04a3aae5, []int{25}
}
func (m *ListChallengeClaimableRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListChallengeClaimableRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListChallengeClaimableRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListChallengeClaimableRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListChallengeClaimableRequest.Merge(m, src)
}
func (m *ListChallengeClaimableRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListChallengeClaimableRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListChallengeClaimableRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListChallengeClaimableRequest proto.InternalMessageInfo

func (m *ListChallengeClaimableRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func (m *ListChallengeClaimableRequest) GetChallengeId() uint64 {
	if m != nil {
		return m.ChallengeId
	}
	return 0
}

func (m *ListChallengeClaimableRequest) GetCampDenom() string {
	if m != nil {
		return m.CampDenom
	}
	return ""
}

func (m *ListChallengeClaimableRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type ListChallengeClaimableResponse struct {
	Pagination  *query.PageResponse `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
	ChallengeId uint64              `protobuf:"varint,2,opt,name=challenge_id,json=challengeId,proto3" json:"challenge_id,omitempty"`
	Entries     []*Claimable        `protobuf:"bytes,3,rep,name=entries,proto3" json:"entries,omitempty"`
}

func (m *ListChallengeClaimableResponse) Reset()         { *m = ListChallengeClaimableResponse{} }
func (m *ListChallengeClaimableResponse) String() string { return proto.CompactTextString(m) }
func (*ListChallengeClaimableResponse) ProtoMessage()    {}
func (*ListChallengeClaimableResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e5a303a04a3aae5, []int{26}
}
func (m *ListChallengeClaimableResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListChallengeClaimableResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListChallengeClaimableResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListChallengeClaimableResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListChallengeClaimableResponse.Merge(m, src)
}
func (m *ListChallengeClaimableResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListChallengeClaimableResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListChallengeClaimableResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListChallengeClaimableResponse proto.InternalMessageInfo

func (m *ListChallengeClaimableResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func (m *ListChallengeClaimableResponse) GetChallengeId() uint64 {
	if m != nil {
		return m.ChallengeId
	}
	return 0
}

func (m *ListChallengeClaimableResponse) GetEntries() []*Claimable {
	if m != nil {
		return m.Entries
	}
	return nil
}

// Define the StreamChallengeClaimable request and response
type StreamChallengeClaimableRequest struct {
	ChallengeId uint64 `protobuf:"varint,1,opt,name=challenge_id,json=challengeId,proto3" json:"challenge_id,omitempty" bson:"challenge_id"`
	CampDenom   string `protobuf:"bytes,2,opt,name=camp_denom,json=campDenom,proto3" json:"camp_denom,omitempty"`
	Addresss    string `protobuf:"bytes,3,opt,name=addresss,proto3" json:"addresss,omitempty"`
}

func (m *StreamChallengeClaimableRequest) Reset()         { *m = StreamChallengeClaimableRequest{} }
func (m *StreamChallengeClaimableRequest) String() string { return proto.CompactTextString(m) }
func (*StreamChallengeClaimableRequest) ProtoMessage()    {}
func (*StreamChallengeClaimableRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e5a303a04a3aae5, []int{27}
}
func (m *StreamChallengeClaimableRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StreamChallengeClaimableRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StreamChallengeClaimableRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StreamChallengeClaimableRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamChallengeClaimableRequest.Merge(m, src)
}
func (m *StreamChallengeClaimableRequest) XXX_Size() int {
	return m.Size()
}
func (m *StreamChallengeClaimableRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamChallengeClaimableRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StreamChallengeClaimableRequest proto.InternalMessageInfo

func (m *StreamChallengeClaimableRequest) GetChallengeId() uint64 {
	if m != nil {
		return m.ChallengeId
	}
	return 0
}

func (m *StreamChallengeClaimableRequest) GetCampDenom() string {
	if m != nil {
		return m.CampDenom
	}
	return ""
}

func (m *StreamChallengeClaimableRequest) GetAddresss() string {
	if m != nil {
		return m.Addresss
	}
	return ""
}

type StreamChallengeClaimableResponse struct {
	Deleted bool       `protobuf:"varint,1,opt,name=deleted,proto3" json:"deleted,omitempty" bson:"deleted"`
	Entry   *Claimable `protobuf:"bytes,2,opt,name=entry,proto3" json:"entry,omitempty" bson:"entry"`
}

func (m *StreamChallengeClaimableResponse) Reset()         { *m = StreamChallengeClaimableResponse{} }
func (m *StreamChallengeClaimableResponse) String() string { return proto.CompactTextString(m) }
func (*StreamChallengeClaimableResponse) ProtoMessage()    {}
func (*StreamChallengeClaimableResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e5a303a04a3aae5, []int{28}
}
func (m *StreamChallengeClaimableResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StreamChallengeClaimableResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StreamChallengeClaimableResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StreamChallengeClaimableResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamChallengeClaimableResponse.Merge(m, src)
}
func (m *StreamChallengeClaimableResponse) XXX_Size() int {
	return m.Size()
}
func (m *StreamChallengeClaimableResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamChallengeClaimableResponse.DiscardUnknown(m)
}

var xxx_messageInfo_StreamChallengeClaimableResponse proto.InternalMessageInfo

func (m *StreamChallengeClaimableResponse) GetDeleted() bool {
	if m != nil {
		return m.Deleted
	}
	return false
}

func (m *StreamChallengeClaimableResponse) GetEntry() *Claimable {
	if m != nil {
		return m.Entry
	}
	return nil
}

type StreamChallengeVoteRequest struct {
	ChallengeId uint64 `protobuf:"varint,1,opt,name=challenge_id,json=challengeId,proto3" json:"challenge_id,omitempty"`
}

func (m *StreamChallengeVoteRequest) Reset()         { *m = StreamChallengeVoteRequest{} }
func (m *StreamChallengeVoteRequest) String() string { return proto.CompactTextString(m) }
func (*StreamChallengeVoteRequest) ProtoMessage()    {}
func (*StreamChallengeVoteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e5a303a04a3aae5, []int{29}
}
func (m *StreamChallengeVoteRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StreamChallengeVoteRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StreamChallengeVoteRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StreamChallengeVoteRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamChallengeVoteRequest.Merge(m, src)
}
func (m *StreamChallengeVoteRequest) XXX_Size() int {
	return m.Size()
}
func (m *StreamChallengeVoteRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamChallengeVoteRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StreamChallengeVoteRequest proto.InternalMessageInfo

func (m *StreamChallengeVoteRequest) GetChallengeId() uint64 {
	if m != nil {
		return m.ChallengeId
	}
	return 0
}

type StreamChallengeVoteResponse struct {
	Deleted bool           `protobuf:"varint,1,opt,name=deleted,proto3" json:"deleted,omitempty" bson:"deleted"`
	Vote    *ChallengeVote `protobuf:"bytes,2,opt,name=vote,proto3" json:"vote,omitempty" bson:"vote"`
}

func (m *StreamChallengeVoteResponse) Reset()         { *m = StreamChallengeVoteResponse{} }
func (m *StreamChallengeVoteResponse) String() string { return proto.CompactTextString(m) }
func (*StreamChallengeVoteResponse) ProtoMessage()    {}
func (*StreamChallengeVoteResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e5a303a04a3aae5, []int{30}
}
func (m *StreamChallengeVoteResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StreamChallengeVoteResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StreamChallengeVoteResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StreamChallengeVoteResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamChallengeVoteResponse.Merge(m, src)
}
func (m *StreamChallengeVoteResponse) XXX_Size() int {
	return m.Size()
}
func (m *StreamChallengeVoteResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamChallengeVoteResponse.DiscardUnknown(m)
}

var xxx_messageInfo_StreamChallengeVoteResponse proto.InternalMessageInfo

func (m *StreamChallengeVoteResponse) GetDeleted() bool {
	if m != nil {
		return m.Deleted
	}
	return false
}

func (m *StreamChallengeVoteResponse) GetVote() *ChallengeVote {
	if m != nil {
		return m.Vote
	}
	return nil
}

type GetUserChallengesRequest struct {
	Pagination         *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
	Address            string             `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	UnclaimedChallenge bool               `protobuf:"varint,3,opt,name=unclaimed_challenge,json=unclaimedChallenge,proto3" json:"unclaimed_challenge,omitempty"`
}

func (m *GetUserChallengesRequest) Reset()         { *m = GetUserChallengesRequest{} }
func (m *GetUserChallengesRequest) String() string { return proto.CompactTextString(m) }
func (*GetUserChallengesRequest) ProtoMessage()    {}
func (*GetUserChallengesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e5a303a04a3aae5, []int{31}
}
func (m *GetUserChallengesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetUserChallengesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetUserChallengesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetUserChallengesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetUserChallengesRequest.Merge(m, src)
}
func (m *GetUserChallengesRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetUserChallengesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetUserChallengesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetUserChallengesRequest proto.InternalMessageInfo

func (m *GetUserChallengesRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func (m *GetUserChallengesRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *GetUserChallengesRequest) GetUnclaimedChallenge() bool {
	if m != nil {
		return m.UnclaimedChallenge
	}
	return false
}

type GetUserChallengesResponse struct {
	Pagination *query.PageResponse `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
	Challenges []*Challenge        `protobuf:"bytes,2,rep,name=challenges,proto3" json:"challenges,omitempty"`
}

func (m *GetUserChallengesResponse) Reset()         { *m = GetUserChallengesResponse{} }
func (m *GetUserChallengesResponse) String() string { return proto.CompactTextString(m) }
func (*GetUserChallengesResponse) ProtoMessage()    {}
func (*GetUserChallengesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e5a303a04a3aae5, []int{32}
}
func (m *GetUserChallengesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetUserChallengesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetUserChallengesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetUserChallengesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetUserChallengesResponse.Merge(m, src)
}
func (m *GetUserChallengesResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetUserChallengesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetUserChallengesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetUserChallengesResponse proto.InternalMessageInfo

func (m *GetUserChallengesResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func (m *GetUserChallengesResponse) GetChallenges() []*Challenge {
	if m != nil {
		return m.Challenges
	}
	return nil
}

type GetLogoPresignedURLRequest struct {
	LogoSize int64 `protobuf:"varint,1,opt,name=logo_size,json=logoSize,proto3" json:"logo_size,omitempty"`
}

func (m *GetLogoPresignedURLRequest) Reset()         { *m = GetLogoPresignedURLRequest{} }
func (m *GetLogoPresignedURLRequest) String() string { return proto.CompactTextString(m) }
func (*GetLogoPresignedURLRequest) ProtoMessage()    {}
func (*GetLogoPresignedURLRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e5a303a04a3aae5, []int{33}
}
func (m *GetLogoPresignedURLRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetLogoPresignedURLRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetLogoPresignedURLRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetLogoPresignedURLRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetLogoPresignedURLRequest.Merge(m, src)
}
func (m *GetLogoPresignedURLRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetLogoPresignedURLRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetLogoPresignedURLRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetLogoPresignedURLRequest proto.InternalMessageInfo

func (m *GetLogoPresignedURLRequest) GetLogoSize() int64 {
	if m != nil {
		return m.LogoSize
	}
	return 0
}

type GetLogoPresignedURLResponse struct {
	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
}

func (m *GetLogoPresignedURLResponse) Reset()         { *m = GetLogoPresignedURLResponse{} }
func (m *GetLogoPresignedURLResponse) String() string { return proto.CompactTextString(m) }
func (*GetLogoPresignedURLResponse) ProtoMessage()    {}
func (*GetLogoPresignedURLResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e5a303a04a3aae5, []int{34}
}
func (m *GetLogoPresignedURLResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetLogoPresignedURLResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetLogoPresignedURLResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetLogoPresignedURLResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetLogoPresignedURLResponse.Merge(m, src)
}
func (m *GetLogoPresignedURLResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetLogoPresignedURLResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetLogoPresignedURLResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetLogoPresignedURLResponse proto.InternalMessageInfo

func (m *GetLogoPresignedURLResponse) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

type GetCampLatestHeightRequest struct {
}

func (m *GetCampLatestHeightRequest) Reset()         { *m = GetCampLatestHeightRequest{} }
func (m *GetCampLatestHeightRequest) String() string { return proto.CompactTextString(m) }
func (*GetCampLatestHeightRequest) ProtoMessage()    {}
func (*GetCampLatestHeightRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e5a303a04a3aae5, []int{35}
}
func (m *GetCampLatestHeightRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetCampLatestHeightRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetCampLatestHeightRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetCampLatestHeightRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCampLatestHeightRequest.Merge(m, src)
}
func (m *GetCampLatestHeightRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetCampLatestHeightRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCampLatestHeightRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetCampLatestHeightRequest proto.InternalMessageInfo

type GetCampLatestHeightResponse struct {
	Height int64 `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
}

func (m *GetCampLatestHeightResponse) Reset()         { *m = GetCampLatestHeightResponse{} }
func (m *GetCampLatestHeightResponse) String() string { return proto.CompactTextString(m) }
func (*GetCampLatestHeightResponse) ProtoMessage()    {}
func (*GetCampLatestHeightResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e5a303a04a3aae5, []int{36}
}
func (m *GetCampLatestHeightResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetCampLatestHeightResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetCampLatestHeightResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetCampLatestHeightResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCampLatestHeightResponse.Merge(m, src)
}
func (m *GetCampLatestHeightResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetCampLatestHeightResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCampLatestHeightResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetCampLatestHeightResponse proto.InternalMessageInfo

func (m *GetCampLatestHeightResponse) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

// PushUserActivity API: Stream user activity to the server
type PushUserActivityRequest struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Url     string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	Action  Action `protobuf:"varint,3,opt,name=action,proto3,enum=flux.indexer.campclash.Action" json:"action,omitempty"`
}

func (m *PushUserActivityRequest) Reset()         { *m = PushUserActivityRequest{} }
func (m *PushUserActivityRequest) String() string { return proto.CompactTextString(m) }
func (*PushUserActivityRequest) ProtoMessage()    {}
func (*PushUserActivityRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e5a303a04a3aae5, []int{37}
}
func (m *PushUserActivityRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PushUserActivityRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PushUserActivityRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PushUserActivityRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PushUserActivityRequest.Merge(m, src)
}
func (m *PushUserActivityRequest) XXX_Size() int {
	return m.Size()
}
func (m *PushUserActivityRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PushUserActivityRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PushUserActivityRequest proto.InternalMessageInfo

func (m *PushUserActivityRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *PushUserActivityRequest) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *PushUserActivityRequest) GetAction() Action {
	if m != nil {
		return m.Action
	}
	return Action_OPEN_PAGE
}

type PushUserActivityResponse struct {
}

func (m *PushUserActivityResponse) Reset()         { *m = PushUserActivityResponse{} }
func (m *PushUserActivityResponse) String() string { return proto.CompactTextString(m) }
func (*PushUserActivityResponse) ProtoMessage()    {}
func (*PushUserActivityResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e5a303a04a3aae5, []int{38}
}
func (m *PushUserActivityResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PushUserActivityResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PushUserActivityResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PushUserActivityResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PushUserActivityResponse.Merge(m, src)
}
func (m *PushUserActivityResponse) XXX_Size() int {
	return m.Size()
}
func (m *PushUserActivityResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PushUserActivityResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PushUserActivityResponse proto.InternalMessageInfo

type SubscribeUserActivityRequest struct {
}

func (m *SubscribeUserActivityRequest) Reset()         { *m = SubscribeUserActivityRequest{} }
func (m *SubscribeUserActivityRequest) String() string { return proto.CompactTextString(m) }
func (*SubscribeUserActivityRequest) ProtoMessage()    {}
func (*SubscribeUserActivityRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e5a303a04a3aae5, []int{39}
}
func (m *SubscribeUserActivityRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SubscribeUserActivityRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SubscribeUserActivityRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SubscribeUserActivityRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscribeUserActivityRequest.Merge(m, src)
}
func (m *SubscribeUserActivityRequest) XXX_Size() int {
	return m.Size()
}
func (m *SubscribeUserActivityRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscribeUserActivityRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SubscribeUserActivityRequest proto.InternalMessageInfo

type SubscribeUserActivityResponse struct {
	Ip      string `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	Address string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	Url     string `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"`
	Action  Action `protobuf:"varint,4,opt,name=action,proto3,enum=flux.indexer.campclash.Action" json:"action,omitempty"`
}

func (m *SubscribeUserActivityResponse) Reset()         { *m = SubscribeUserActivityResponse{} }
func (m *SubscribeUserActivityResponse) String() string { return proto.CompactTextString(m) }
func (*SubscribeUserActivityResponse) ProtoMessage()    {}
func (*SubscribeUserActivityResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e5a303a04a3aae5, []int{40}
}
func (m *SubscribeUserActivityResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SubscribeUserActivityResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SubscribeUserActivityResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SubscribeUserActivityResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscribeUserActivityResponse.Merge(m, src)
}
func (m *SubscribeUserActivityResponse) XXX_Size() int {
	return m.Size()
}
func (m *SubscribeUserActivityResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscribeUserActivityResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SubscribeUserActivityResponse proto.InternalMessageInfo

func (m *SubscribeUserActivityResponse) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *SubscribeUserActivityResponse) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *SubscribeUserActivityResponse) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *SubscribeUserActivityResponse) GetAction() Action {
	if m != nil {
		return m.Action
	}
	return Action_OPEN_PAGE
}

func init() {
	proto.RegisterEnum("flux.indexer.campclash.Action", Action_name, Action_value)
	proto.RegisterType((*ListProjectsRequest)(nil), "flux.indexer.campclash.ListProjectsRequest")
	proto.RegisterType((*ListProjectsResponse)(nil), "flux.indexer.campclash.ListProjectsResponse")
	proto.RegisterType((*StreamProjectRequest)(nil), "flux.indexer.campclash.StreamProjectRequest")
	proto.RegisterType((*StreamProjectResponse)(nil), "flux.indexer.campclash.StreamProjectResponse")
	proto.RegisterType((*ListBalancesRequest)(nil), "flux.indexer.campclash.ListBalancesRequest")
	proto.RegisterType((*ListBalancesResponse)(nil), "flux.indexer.campclash.ListBalancesResponse")
	proto.RegisterType((*StreamBalancesRequest)(nil), "flux.indexer.campclash.StreamBalancesRequest")
	proto.RegisterType((*StreamBalancesResponse)(nil), "flux.indexer.campclash.StreamBalancesResponse")
	proto.RegisterType((*ListTradesRequest)(nil), "flux.indexer.campclash.ListTradesRequest")
	proto.RegisterType((*ListTradesResponse)(nil), "flux.indexer.campclash.ListTradesResponse")
	proto.RegisterType((*StreamTradesRequest)(nil), "flux.indexer.campclash.StreamTradesRequest")
	proto.RegisterType((*StreamTradesResponse)(nil), "flux.indexer.campclash.StreamTradesResponse")
	proto.RegisterType((*Comment)(nil), "flux.indexer.campclash.Comment")
	proto.RegisterType((*PostCommentRequest)(nil), "flux.indexer.campclash.PostCommentRequest")
	proto.RegisterType((*PostCommentResponse)(nil), "flux.indexer.campclash.PostCommentResponse")
	proto.RegisterType((*ListCommentsRequest)(nil), "flux.indexer.campclash.ListCommentsRequest")
	proto.RegisterType((*ListCommentsResponse)(nil), "flux.indexer.campclash.ListCommentsResponse")
	proto.RegisterType((*StreamCommentsRequest)(nil), "flux.indexer.campclash.StreamCommentsRequest")
	proto.RegisterType((*StreamCommentsResponse)(nil), "flux.indexer.campclash.StreamCommentsResponse")
	proto.RegisterType((*GetLeaderboardRequest)(nil), "flux.indexer.campclash.GetLeaderboardRequest")
	proto.RegisterType((*GetLeaderboardResponse)(nil), "flux.indexer.campclash.GetLeaderboardResponse")
	proto.RegisterType((*ListChallengeRequest)(nil), "flux.indexer.campclash.ListChallengeRequest")
	proto.RegisterType((*ListChallengeResponse)(nil), "flux.indexer.campclash.ListChallengeResponse")
	proto.RegisterType((*StreamChallengeRequest)(nil), "flux.indexer.campclash.StreamChallengeRequest")
	proto.RegisterType((*StreamChallengeResponse)(nil), "flux.indexer.campclash.StreamChallengeResponse")
	proto.RegisterType((*ListChallengeClaimableRequest)(nil), "flux.indexer.campclash.ListChallengeClaimableRequest")
	proto.RegisterType((*ListChallengeClaimableResponse)(nil), "flux.indexer.campclash.ListChallengeClaimableResponse")
	proto.RegisterType((*StreamChallengeClaimableRequest)(nil), "flux.indexer.campclash.StreamChallengeClaimableRequest")
	proto.RegisterType((*StreamChallengeClaimableResponse)(nil), "flux.indexer.campclash.StreamChallengeClaimableResponse")
	proto.RegisterType((*StreamChallengeVoteRequest)(nil), "flux.indexer.campclash.StreamChallengeVoteRequest")
	proto.RegisterType((*StreamChallengeVoteResponse)(nil), "flux.indexer.campclash.StreamChallengeVoteResponse")
	proto.RegisterType((*GetUserChallengesRequest)(nil), "flux.indexer.campclash.GetUserChallengesRequest")
	proto.RegisterType((*GetUserChallengesResponse)(nil), "flux.indexer.campclash.GetUserChallengesResponse")
	proto.RegisterType((*GetLogoPresignedURLRequest)(nil), "flux.indexer.campclash.GetLogoPresignedURLRequest")
	proto.RegisterType((*GetLogoPresignedURLResponse)(nil), "flux.indexer.campclash.GetLogoPresignedURLResponse")
	proto.RegisterType((*GetCampLatestHeightRequest)(nil), "flux.indexer.campclash.GetCampLatestHeightRequest")
	proto.RegisterType((*GetCampLatestHeightResponse)(nil), "flux.indexer.campclash.GetCampLatestHeightResponse")
	proto.RegisterType((*PushUserActivityRequest)(nil), "flux.indexer.campclash.PushUserActivityRequest")
	proto.RegisterType((*PushUserActivityResponse)(nil), "flux.indexer.campclash.PushUserActivityResponse")
	proto.RegisterType((*SubscribeUserActivityRequest)(nil), "flux.indexer.campclash.SubscribeUserActivityRequest")
	proto.RegisterType((*SubscribeUserActivityResponse)(nil), "flux.indexer.campclash.SubscribeUserActivityResponse")
}

func init() {
	proto.RegisterFile("flux/indexer/campclash/camp_query.proto", fileDescriptor_8e5a303a04a3aae5)
}

var fileDescriptor_8e5a303a04a3aae5 = []byte{
	// 2175 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x5a, 0x4d, 0x6c, 0x1c, 0x49,
	0x15, 0x4e, 0xcd, 0x4c, 0xec, 0xf1, 0xb3, 0xe3, 0xd8, 0xe5, 0xbf, 0x49, 0xdb, 0x9e, 0xb1, 0x2b,
	0xd9, 0x8d, 0x37, 0x6b, 0x4f, 0x4f, 0x9c, 0x9f, 0x25, 0xbb, 0x07, 0x64, 0x9b, 0x38, 0x2c, 0xb2,
	0x12, 0xd3, 0x49, 0x10, 0xe2, 0x32, 0xea, 0xe9, 0xae, 0x8c, 0x1b, 0x66, 0xba, 0x67, 0xbb, 0x7b,
	0xa2, 0x78, 0xd9, 0x1c, 0x40, 0xec, 0x01, 0x21, 0xa4, 0x95, 0x02, 0x62, 0x05, 0xcb, 0x5e, 0x40,
	0x42, 0x1c, 0x16, 0x4e, 0x5c, 0x90, 0x90, 0x90, 0xb8, 0x00, 0xa7, 0x95, 0xb8, 0x70, 0xb2, 0x50,
	0xc2, 0x1d, 0xc9, 0x07, 0xce, 0xa8, 0xab, 0xab, 0x7a, 0xba, 0x7b, 0xba, 0x7b, 0xc6, 0xc1, 0x2c,
	0x7b, 0x9b, 0xae, 0x7a, 0xf5, 0xea, 0x7b, 0xdf, 0x7b, 0xf5, 0xea, 0xbd, 0xd2, 0xc0, 0xe5, 0x47,
	0xad, 0xee, 0x13, 0xd9, 0x30, 0x75, 0xfa, 0x84, 0xda, 0xb2, 0xa6, 0xb6, 0x3b, 0x5a, 0x4b, 0x75,
	0x0e, 0xd8, 0xaf, 0xfa, 0x3b, 0x5d, 0x6a, 0x1f, 0x56, 0x3b, 0xb6, 0xe5, 0x5a, 0x78, 0xde, 0x13,
	0xac, 0x72, 0xc1, 0x6a, 0x20, 0x28, 0x5d, 0xd1, 0x2c, 0xa7, 0x6d, 0x39, 0x72, 0x43, 0x75, 0xa8,
	0xcc, 0x16, 0xc8, 0x8f, 0xaf, 0x36, 0xa8, 0xab, 0x5e, 0x95, 0x3b, 0x6a, 0xd3, 0x30, 0x55, 0xd7,
	0xb0, 0x4c, 0x5f, 0x87, 0xb4, 0xd4, 0xb4, 0xac, 0x66, 0x8b, 0xca, 0x6a, 0xc7, 0x90, 0x55, 0xd3,
	0xb4, 0x5c, 0x36, 0xe9, 0xf0, 0xd9, 0xd9, 0xa6, 0xd5, 0xb4, 0xd8, 0x4f, 0xd9, 0xfb, 0xc5, 0x47,
	0x57, 0x33, 0x00, 0x72, 0x91, 0x72, 0x18, 0x82, 0xd8, 0x5c, 0xb3, 0x0c, 0xbe, 0x2d, 0xf9, 0x69,
	0x0e, 0x66, 0xf6, 0x0c, 0xc7, 0xdd, 0xb7, 0xad, 0x6f, 0x52, 0xcd, 0x75, 0x14, 0xfa, 0x4e, 0x97,
	0x3a, 0x2e, 0xde, 0x05, 0xe8, 0x41, 0x2c, 0xa1, 0x15, 0xb4, 0x36, 0xbe, 0xf9, 0x6a, 0xd5, 0x57,
	0x56, 0xf5, 0x94, 0x55, 0x7d, 0x02, 0xb8, 0xca, 0xea, 0xbe, 0xda, 0xa4, 0x7c, 0xad, 0x12, 0x5a,
	0x89, 0x97, 0x01, 0x18, 0x5d, 0x3a, 0x35, 0xad, 0x76, 0x29, 0xb7, 0x82, 0xd6, 0xc6, 0x94, 0x31,
	0x6f, 0xe4, 0x4b, 0xde, 0x00, 0x9e, 0x87, 0x11, 0x87, 0xaa, 0xb6, 0x76, 0x50, 0xca, 0xb3, 0x29,
	0xfe, 0x85, 0x2f, 0xc1, 0xa4, 0x63, 0xd9, 0x6e, 0xbd, 0x71, 0x58, 0x7f, 0x64, 0xd0, 0x96, 0xee,
	0x94, 0x0a, 0x2b, 0xf9, 0xb5, 0x31, 0x65, 0xc2, 0x1b, 0xdd, 0x3e, 0xdc, 0x65, 0x63, 0x78, 0x11,
	0x98, 0xaa, 0xba, 0x7b, 0xd8, 0xa1, 0xa5, 0xb3, 0x4c, 0x41, 0xd1, 0x1b, 0x78, 0x70, 0xd8, 0xa1,
	0x18, 0x43, 0xc1, 0x55, 0x9b, 0x4e, 0x69, 0x84, 0x2d, 0x64, 0xbf, 0xf1, 0x06, 0x60, 0xcb, 0x6c,
	0x1d, 0xd6, 0xb5, 0x03, 0xb5, 0xd5, 0xa2, 0x66, 0x93, 0xaa, 0x8d, 0x16, 0x2d, 0x8d, 0xae, 0xa0,
	0xb5, 0xa2, 0x32, 0xed, 0xcd, 0xec, 0x84, 0x27, 0xc8, 0x47, 0x08, 0x66, 0xa3, 0xe4, 0x38, 0x1d,
	0xcb, 0x74, 0x28, 0xbe, 0x93, 0xc0, 0xce, 0xe5, 0x81, 0xec, 0xf8, 0x8b, 0x23, 0xf4, 0xbc, 0x05,
	0xc5, 0x0e, 0x57, 0x5e, 0xca, 0xad, 0xe4, 0xd7, 0xc6, 0x37, 0x2b, 0xd5, 0xe4, 0x60, 0xaa, 0x72,
	0x10, 0x4a, 0xb0, 0x80, 0x3c, 0x82, 0xd9, 0xfb, 0xae, 0x4d, 0xd5, 0xb6, 0x98, 0xe2, 0xbe, 0x8b,
	0x72, 0x8e, 0xe2, 0x9c, 0x47, 0x58, 0xcb, 0xa5, 0xb0, 0x96, 0xef, 0xb1, 0x46, 0x7e, 0x8b, 0x60,
	0x2e, 0xb6, 0x11, 0xe7, 0xa1, 0x04, 0xa3, 0x3a, 0x6d, 0x51, 0x97, 0xea, 0x6c, 0x9b, 0x82, 0x22,
	0x3e, 0x3d, 0xc7, 0x1e, 0x50, 0xa3, 0x79, 0xe0, 0xb2, 0x1d, 0x0a, 0x0a, 0xff, 0xc2, 0xb7, 0x60,
	0x94, 0xe3, 0x67, 0x1e, 0x1f, 0xc2, 0x5e, 0x21, 0x8f, 0x5f, 0x83, 0x29, 0x87, 0xa1, 0xa8, 0x5b,
	0x1d, 0x6a, 0xfb, 0xd4, 0x17, 0x18, 0xfc, 0xf3, 0xfe, 0xf8, 0x3d, 0x31, 0x4c, 0xfe, 0x8d, 0xfc,
	0xa8, 0xde, 0x56, 0x5b, 0xaa, 0xa9, 0xd1, 0xcf, 0x3a, 0xaa, 0x57, 0x61, 0xa2, 0xeb, 0x50, 0xbb,
	0xae, 0xea, 0xba, 0x4d, 0x1d, 0x87, 0xc7, 0xf6, 0xb8, 0x37, 0xb6, 0xe5, 0x0f, 0xe1, 0x05, 0x18,
	0xe5, 0x01, 0xce, 0x6d, 0x18, 0xf1, 0x23, 0x1b, 0x5f, 0x80, 0x22, 0x9b, 0x50, 0x1d, 0x8d, 0x85,
	0x74, 0x51, 0x61, 0x82, 0x5b, 0x8e, 0xe6, 0xa9, 0x0d, 0x02, 0xb7, 0x6e, 0xe8, 0xa5, 0x11, 0xc6,
	0xec, 0x78, 0x30, 0xf6, 0xb6, 0x4e, 0xfe, 0xca, 0x23, 0xb6, 0x67, 0xf8, 0x69, 0x47, 0xec, 0x2e,
	0xb7, 0xad, 0xe1, 0xef, 0xc0, 0xa3, 0xf6, 0x62, 0x9a, 0x17, 0x1f, 0x3a, 0xd4, 0xe6, 0x60, 0x7c,
	0x02, 0xf8, 0x47, 0x9f, 0x31, 0xf9, 0x7e, 0x63, 0xf6, 0x45, 0xd8, 0xc5, 0xdd, 0x38, 0x20, 0xc0,
	0x4b, 0x30, 0x2a, 0x98, 0xf7, 0x5d, 0x23, 0x3e, 0xc9, 0xb7, 0x60, 0x3e, 0xae, 0x71, 0x60, 0x24,
	0xbf, 0x01, 0x05, 0x0f, 0x37, 0x53, 0x35, 0xa4, 0xa1, 0x6c, 0x01, 0xf9, 0x39, 0x82, 0x69, 0xcf,
	0x17, 0x0f, 0x6c, 0x55, 0xff, 0x1c, 0x86, 0x20, 0xf9, 0x11, 0x02, 0x1c, 0xc6, 0x77, 0xda, 0x91,
	0x72, 0x03, 0x46, 0x5c, 0xa6, 0x9a, 0xc7, 0xc8, 0x72, 0x1a, 0x75, 0x0c, 0x80, 0xc2, 0x85, 0x89,
	0x0b, 0x33, 0xbe, 0x8f, 0xa2, 0xbc, 0x0d, 0xf0, 0x79, 0xdc, 0xde, 0x5c, 0xff, 0x91, 0x8b, 0xe4,
	0xbd, 0x7c, 0x34, 0xef, 0x91, 0xa7, 0x22, 0x97, 0xc6, 0xd8, 0x38, 0x79, 0x86, 0xbb, 0x06, 0x67,
	0x99, 0x25, 0x3c, 0xbf, 0x0d, 0xb0, 0xda, 0x97, 0x25, 0x7f, 0x44, 0x30, 0xba, 0x63, 0xb5, 0xdb,
	0xd4, 0x74, 0xf1, 0xf5, 0x7e, 0x4b, 0xb7, 0xe7, 0x8e, 0x8f, 0x2a, 0xd3, 0x0d, 0xc7, 0x32, 0xdf,
	0x24, 0xbd, 0x39, 0x12, 0x26, 0x60, 0x1d, 0x46, 0x55, 0x4d, 0xb3, 0xba, 0xa6, 0x8f, 0x67, 0x6c,
	0x1b, 0x1f, 0x1f, 0x55, 0x26, 0xfd, 0x25, 0x7c, 0x82, 0x28, 0x42, 0xc4, 0x93, 0xd6, 0x2c, 0xd3,
	0xa5, 0xa6, 0x9f, 0x86, 0x23, 0xd2, 0x7c, 0x82, 0x28, 0x42, 0x04, 0x5f, 0x84, 0x82, 0x6b, 0xb4,
	0x29, 0xcb, 0x54, 0x85, 0xed, 0xf3, 0xc7, 0x47, 0x95, 0x71, 0x5f, 0xd4, 0x1b, 0x25, 0x0a, 0x9b,
	0x24, 0xf7, 0x00, 0xef, 0x5b, 0x8e, 0xcb, 0xad, 0x10, 0x6e, 0xbb, 0xe5, 0x6d, 0xc4, 0x46, 0xf8,
	0x01, 0x4a, 0xcd, 0xf7, 0x62, 0xa1, 0x90, 0x27, 0x73, 0x30, 0x13, 0x51, 0xe8, 0x7b, 0x84, 0xbc,
	0xe7, 0xa7, 0x76, 0x3e, 0xfc, 0x19, 0x9f, 0xab, 0xa0, 0x24, 0xe8, 0x6d, 0xff, 0x3f, 0x28, 0x09,
	0x38, 0x03, 0x03, 0x4b, 0x02, 0x41, 0x4d, 0xb0, 0x80, 0xdc, 0x14, 0x29, 0x33, 0x4e, 0x4f, 0xf6,
	0xf1, 0x21, 0xef, 0x23, 0x91, 0x19, 0xfb, 0x0c, 0x7b, 0xa9, 0x3b, 0x5e, 0xf8, 0x3c, 0x7f, 0x42,
	0x9f, 0xff, 0x18, 0xc1, 0xdc, 0x1d, 0xea, 0xee, 0x51, 0x55, 0xa7, 0x76, 0xc3, 0x52, 0x6d, 0xfd,
	0xb4, 0xfd, 0x9b, 0x59, 0xfd, 0x84, 0x6e, 0xe5, 0x7c, 0xf8, 0x56, 0x26, 0x1f, 0x23, 0x98, 0x8f,
	0xe3, 0xfa, 0x5c, 0xd5, 0x82, 0xff, 0x12, 0x71, 0x29, 0xee, 0xcf, 0xd3, 0xe6, 0x2d, 0x7e, 0x5f,
	0xe7, 0xfa, 0xee, 0x6b, 0x56, 0xcc, 0xbb, 0xaa, 0xdb, 0x75, 0x02, 0xf2, 0xd8, 0x97, 0x57, 0xb8,
	0x05, 0x62, 0x36, 0x8f, 0x40, 0x5e, 0xb8, 0xf5, 0xc6, 0xfd, 0x2c, 0x16, 0x16, 0xd5, 0xb9, 0xe8,
	0xd9, 0x98, 0xa8, 0xee, 0x87, 0xec, 0xef, 0x11, 0xcc, 0xc5, 0x2c, 0x3e, 0x6d, 0x8f, 0x7c, 0x1d,
	0x20, 0xd8, 0x55, 0xf8, 0x64, 0x35, 0x35, 0x96, 0x85, 0x64, 0x24, 0x59, 0x07, 0xcb, 0x89, 0x12,
	0xd2, 0x45, 0x1e, 0x04, 0xc7, 0x2d, 0xee, 0xaf, 0x37, 0x63, 0x3c, 0xb3, 0x33, 0xb7, 0xbd, 0x70,
	0x7c, 0x54, 0x99, 0x89, 0xa9, 0xac, 0x1b, 0x3a, 0x89, 0x16, 0x4c, 0xbf, 0x43, 0xb0, 0xd0, 0xa7,
	0x76, 0xe0, 0x31, 0x7e, 0x08, 0x63, 0x81, 0x12, 0x9e, 0xa4, 0x87, 0x30, 0x72, 0xf6, 0xf8, 0xa8,
	0x32, 0x15, 0x43, 0xe4, 0x5d, 0x48, 0xe2, 0x77, 0x62, 0xb9, 0x9e, 0x4f, 0x2e, 0xd7, 0xff, 0x84,
	0x60, 0x39, 0xe2, 0xca, 0x9d, 0x96, 0x6a, 0xb4, 0xbd, 0x16, 0xec, 0xff, 0x10, 0xc5, 0xd1, 0x4c,
	0x99, 0xcf, 0x28, 0x2e, 0x0b, 0xd1, 0xe2, 0xf2, 0x2f, 0x08, 0xca, 0x69, 0x56, 0x9c, 0x76, 0x64,
	0x0e, 0x61, 0xc7, 0x5b, 0x30, 0x4a, 0x4d, 0xd7, 0x36, 0xa8, 0xdf, 0xcc, 0x65, 0x39, 0x35, 0xc0,
	0x29, 0x56, 0x90, 0x0f, 0x11, 0x54, 0x62, 0x91, 0xd4, 0xe7, 0x93, 0xff, 0x22, 0x52, 0x07, 0x55,
	0xaf, 0x12, 0x14, 0x39, 0xab, 0x22, 0x97, 0x04, 0xdf, 0xe4, 0x67, 0x08, 0x56, 0xd2, 0xa1, 0x71,
	0xa2, 0xd7, 0xa3, 0xd1, 0x5e, 0x0c, 0xd7, 0x37, 0x7c, 0x82, 0xf4, 0x4e, 0xc0, 0xdb, 0x70, 0xd6,
	0x33, 0xfc, 0x70, 0x60, 0xf4, 0x8b, 0x7d, 0xb6, 0xa7, 0x8e, 0x8f, 0x2a, 0x13, 0xbe, 0x3a, 0xb6,
	0x92, 0x28, 0xbe, 0x06, 0xf2, 0x45, 0x90, 0x62, 0xe0, 0xbe, 0x66, 0xb9, 0x01, 0x65, 0xab, 0x49,
	0x94, 0x45, 0xcf, 0xf0, 0x4f, 0x10, 0x2c, 0x26, 0x6a, 0x78, 0x29, 0xcb, 0xbe, 0x02, 0x85, 0xc7,
	0x96, 0x2b, 0x8e, 0xf5, 0x2b, 0x03, 0x8f, 0xb5, 0xb7, 0x55, 0xb8, 0xc0, 0xf3, 0x16, 0x13, 0x85,
	0xe9, 0x20, 0x9f, 0x20, 0x28, 0xdd, 0xa1, 0xae, 0xd7, 0xe8, 0x04, 0xf2, 0xa7, 0x5e, 0x7e, 0xa5,
	0xf6, 0x6e, 0x58, 0x86, 0x99, 0xae, 0xa9, 0x79, 0x1e, 0xa0, 0x7a, 0xef, 0x01, 0x87, 0x85, 0x47,
	0x51, 0xc1, 0xc1, 0x54, 0x00, 0x8d, 0xfc, 0x0a, 0xc1, 0x85, 0x04, 0xbc, 0xa7, 0x7d, 0x14, 0xb7,
	0x5e, 0xea, 0x92, 0x88, 0xdc, 0x06, 0xb7, 0x40, 0xf2, 0x8a, 0x0b, 0xab, 0x69, 0xed, 0xdb, 0xd4,
	0x31, 0x9a, 0x26, 0xd5, 0x1f, 0x2a, 0x7b, 0x82, 0xda, 0x45, 0x18, 0x6b, 0x59, 0x4d, 0xab, 0xee,
	0x18, 0xef, 0x52, 0x06, 0x34, 0xaf, 0x14, 0xbd, 0x81, 0xfb, 0xc6, 0xbb, 0x94, 0xc8, 0xb0, 0x98,
	0xb8, 0x94, 0x5b, 0x39, 0x05, 0xf9, 0xae, 0xdd, 0xe2, 0xf5, 0x9e, 0xf7, 0x93, 0x2c, 0xb1, 0xbd,
	0x76, 0xd4, 0x76, 0x67, 0x4f, 0x75, 0xa9, 0xe3, 0x7e, 0x99, 0xd5, 0x6c, 0x7c, 0x2f, 0x72, 0x83,
	0xa9, 0xeb, 0x9f, 0xe5, 0xea, 0x7a, 0x15, 0x9f, 0x8f, 0x83, 0x7f, 0x91, 0xa7, 0xb0, 0xb0, 0xdf,
	0x75, 0x0e, 0x3c, 0xaa, 0xb7, 0x34, 0xd7, 0x78, 0x6c, 0xb8, 0x87, 0x02, 0x7d, 0xc8, 0xa1, 0x28,
	0xea, 0x50, 0x8e, 0x2d, 0x17, 0x60, 0xc3, 0x37, 0x61, 0x44, 0xd5, 0x82, 0x8b, 0x62, 0x72, 0xb3,
	0x9c, 0x46, 0xe3, 0x16, 0x93, 0x52, 0xb8, 0x34, 0x91, 0xa0, 0xd4, 0xbf, 0x3d, 0x6f, 0x17, 0xca,
	0xb0, 0x74, 0xbf, 0xdb, 0x70, 0x34, 0xdb, 0x68, 0xd0, 0x04, 0x7c, 0xe4, 0x19, 0x82, 0xe5, 0x14,
	0x01, 0x6e, 0xf4, 0x24, 0xe4, 0x8c, 0x0e, 0x07, 0x9f, 0x33, 0x3a, 0x19, 0x21, 0xca, 0x2d, 0xca,
	0x27, 0x59, 0x54, 0x38, 0x89, 0x45, 0x57, 0x2e, 0xc3, 0x88, 0x3f, 0x82, 0xcf, 0xc1, 0xd8, 0xbd,
	0xfd, 0xdb, 0x77, 0xeb, 0xfb, 0x5b, 0x77, 0x6e, 0x4f, 0x9d, 0xc1, 0x93, 0x00, 0x3b, 0x7b, 0xf7,
	0xee, 0xdf, 0xf6, 0xbf, 0xd1, 0xe6, 0xfb, 0x25, 0x98, 0xdc, 0x11, 0x5a, 0xbe, 0xea, 0x45, 0x2c,
	0xfe, 0x1e, 0x82, 0x89, 0xf0, 0xab, 0x25, 0x7e, 0x3d, 0x6d, 0xd3, 0x84, 0x87, 0x5f, 0x69, 0x7d,
	0x38, 0x61, 0xce, 0xee, 0x85, 0xef, 0xfe, 0xed, 0x9f, 0xcf, 0x72, 0x33, 0x78, 0x9a, 0xbd, 0x39,
	0xcb, 0x8f, 0xaf, 0xca, 0xa2, 0x22, 0xc5, 0x1f, 0x20, 0x38, 0x17, 0x79, 0x35, 0xc4, 0xa9, 0xaa,
	0x93, 0x5e, 0x31, 0xa5, 0x8d, 0x21, 0xa5, 0x39, 0x92, 0x15, 0x86, 0x44, 0xc2, 0xa5, 0x00, 0x89,
	0x5f, 0x65, 0x04, 0x80, 0x6a, 0x28, 0x60, 0x46, 0xbc, 0xfe, 0x64, 0x33, 0x13, 0x7b, 0x75, 0xca,
	0x66, 0x26, 0xfe, 0xa0, 0x94, 0xc0, 0x4c, 0x43, 0xec, 0xfa, 0x0c, 0xc1, 0x64, 0xf4, 0x19, 0x0a,
	0x0f, 0x30, 0x36, 0x0e, 0xa5, 0x3a, 0xac, 0xf8, 0x20, 0x72, 0x04, 0xa6, 0x1a, 0xc2, 0xef, 0x01,
	0xf4, 0x5e, 0x83, 0xf0, 0x6b, 0x59, 0xc6, 0x46, 0x5e, 0x66, 0xa4, 0x2b, 0xc3, 0x88, 0x72, 0x20,
	0x0b, 0x0c, 0xc8, 0x34, 0x3e, 0x1f, 0x00, 0xf1, 0x5f, 0x7d, 0xf0, 0x0f, 0x10, 0x4c, 0x84, 0x1f,
	0x60, 0xd2, 0x5d, 0x93, 0xf0, 0x38, 0x24, 0xad, 0x0f, 0x27, 0x2c, 0x52, 0x02, 0x03, 0x51, 0xc2,
	0xf3, 0x71, 0x36, 0x7c, 0x2c, 0x35, 0x84, 0xbf, 0x83, 0x60, 0x3c, 0xf4, 0xf6, 0x80, 0x53, 0x4d,
	0xec, 0x7f, 0xf1, 0x90, 0x5e, 0x1f, 0x4a, 0x36, 0x1a, 0x25, 0xa4, 0x17, 0x25, 0xa2, 0x95, 0x0f,
	0x82, 0x55, 0x34, 0xe4, 0xd9, 0xc1, 0x1a, 0xeb, 0xf7, 0xb3, 0x83, 0x35, 0xde, 0xe3, 0x27, 0x04,
	0x6b, 0x00, 0xa3, 0x17, 0xac, 0x01, 0x90, 0x01, 0xc1, 0x1a, 0x87, 0x52, 0x1d, 0x56, 0x7c, 0x50,
	0xb0, 0x0a, 0x4c, 0x35, 0x84, 0x7f, 0x88, 0x60, 0x32, 0xda, 0x8f, 0xa7, 0xa3, 0x4a, 0x7c, 0x4f,
	0x48, 0x47, 0x95, 0xdc, 0xe6, 0x93, 0x25, 0x86, 0x6a, 0x1e, 0xcf, 0x06, 0xa8, 0x5a, 0xa1, 0xcd,
	0xbf, 0x8f, 0xe0, 0x5c, 0xa4, 0xf6, 0xc7, 0xd9, 0x0e, 0x88, 0x75, 0x7d, 0xe9, 0xc9, 0x2e, 0xb1,
	0xc3, 0x25, 0x8b, 0x0c, 0xcc, 0x1c, 0x9e, 0xe9, 0xf9, 0x2b, 0xa8, 0x26, 0xf0, 0x87, 0x08, 0xce,
	0xc7, 0x2a, 0x48, 0x3c, 0xc8, 0x07, 0x71, 0x3c, 0xf2, 0xd0, 0xf2, 0x1c, 0x11, 0x61, 0x88, 0x96,
	0xb0, 0xd4, 0xe7, 0xb4, 0x00, 0x58, 0x0d, 0xe1, 0xdf, 0x20, 0x98, 0x4f, 0x6e, 0x91, 0xf0, 0x8d,
	0xa1, 0x18, 0x88, 0x37, 0x21, 0xd2, 0xcd, 0x93, 0x2e, 0xe3, 0x78, 0x5f, 0x61, 0x78, 0x2b, 0x78,
	0x39, 0x81, 0x41, 0x59, 0x0b, 0x50, 0xfd, 0x01, 0x41, 0x29, 0xad, 0xd9, 0xc0, 0x6f, 0x0c, 0x49,
	0x52, 0x1f, 0xe8, 0x2f, 0x9c, 0x7c, 0x21, 0x87, 0xbd, 0xce, 0x60, 0xbf, 0x8a, 0x2f, 0xa5, 0xd3,
	0xdc, 0x43, 0x5f, 0x43, 0xf8, 0xd7, 0x48, 0xbc, 0xa6, 0x47, 0x4a, 0x7c, 0xbc, 0x39, 0x24, 0x82,
	0x50, 0xf3, 0x22, 0x5d, 0x3b, 0xd1, 0x1a, 0x0e, 0xf8, 0x32, 0x03, 0xbc, 0x8a, 0x2b, 0x19, 0x80,
	0xbd, 0xee, 0xa2, 0x86, 0xf0, 0x2f, 0x11, 0x4c, 0xf7, 0xd5, 0xeb, 0xb8, 0x96, 0x71, 0x4e, 0x13,
	0x5b, 0x11, 0xe9, 0xea, 0x09, 0x56, 0x70, 0x94, 0x57, 0x18, 0xca, 0x4b, 0x98, 0x04, 0x28, 0xbb,
	0x0e, 0xb5, 0xe5, 0x6f, 0xf3, 0xc2, 0xee, 0x69, 0xf8, 0x78, 0xfd, 0x02, 0xc1, 0x4c, 0x42, 0xc9,
	0x9d, 0x4e, 0x69, 0x7a, 0x69, 0x9f, 0x4e, 0x69, 0x46, 0x4d, 0x4f, 0x2e, 0x32, 0xb0, 0xcb, 0x78,
	0xb1, 0x97, 0x89, 0xac, 0xa6, 0xb5, 0xd1, 0x11, 0xb2, 0x1b, 0x5e, 0xe1, 0xf9, 0xb1, 0x8f, 0x32,
	0x5e, 0xc9, 0x67, 0xa2, 0x4c, 0x69, 0x0a, 0x32, 0x51, 0xa6, 0xb5, 0x0a, 0x09, 0x97, 0x6c, 0x8b,
	0x89, 0x6d, 0xf0, 0x47, 0xe2, 0x8f, 0x10, 0x4c, 0xc5, 0x8b, 0x76, 0x9c, 0x9a, 0x76, 0x52, 0xba,
	0x0b, 0xa9, 0x36, 0xfc, 0x82, 0x28, 0x7b, 0xa4, 0xc7, 0x5e, 0xa7, 0xeb, 0x1c, 0x6c, 0x78, 0xfe,
	0xde, 0x50, 0xb9, 0x70, 0x0d, 0xe1, 0x4f, 0x10, 0xcc, 0x25, 0xb6, 0x05, 0xf8, 0x7a, 0xea, 0x31,
	0xc8, 0x68, 0x33, 0xa4, 0x1b, 0x27, 0x5c, 0x95, 0x9a, 0xa6, 0xfc, 0xe3, 0x13, 0xc7, 0xbb, 0x7d,
	0xf7, 0xcf, 0xcf, 0xcb, 0xe8, 0xd3, 0xe7, 0x65, 0xf4, 0x8f, 0xe7, 0x65, 0xf4, 0xc1, 0x8b, 0xf2,
	0x99, 0x4f, 0x5f, 0x94, 0xcf, 0xfc, 0xfd, 0x45, 0xf9, 0xcc, 0x37, 0xae, 0x37, 0x0d, 0xf7, 0xa0,
	0xdb, 0xa8, 0x6a, 0x56, 0x5b, 0xde, 0x6d, 0x75, 0x9f, 0xdc, 0xdd, 0x7d, 0xb0, 0xa7, 0x36, 0x1c,
	0xd9, 0xc3, 0xa3, 0x7b, 0x81, 0x6d, 0x98, 0xfd, 0x7f, 0x21, 0x69, 0x8c, 0xb0, 0xbf, 0x87, 0x5c,
	0xfb, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x2e, 0x04, 0xa4, 0x51, 0x04, 0x23, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CampclashQueryClient is the client API for CampclashQuery service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CampclashQueryClient interface {
	ListProjects(ctx context.Context, in *ListProjectsRequest, opts ...grpc.CallOption) (*ListProjectsResponse, error)
	StreamProject(ctx context.Context, in *StreamProjectRequest, opts ...grpc.CallOption) (CampclashQuery_StreamProjectClient, error)
	ListBalances(ctx context.Context, in *ListBalancesRequest, opts ...grpc.CallOption) (*ListBalancesResponse, error)
	StreamBalances(ctx context.Context, in *StreamBalancesRequest, opts ...grpc.CallOption) (CampclashQuery_StreamBalancesClient, error)
	ListTrades(ctx context.Context, in *ListTradesRequest, opts ...grpc.CallOption) (*ListTradesResponse, error)
	StreamTrades(ctx context.Context, in *StreamTradesRequest, opts ...grpc.CallOption) (CampclashQuery_StreamTradesClient, error)
	PostComment(ctx context.Context, in *PostCommentRequest, opts ...grpc.CallOption) (*PostCommentResponse, error)
	ListComments(ctx context.Context, in *ListCommentsRequest, opts ...grpc.CallOption) (*ListCommentsResponse, error)
	StreamComments(ctx context.Context, in *StreamCommentsRequest, opts ...grpc.CallOption) (CampclashQuery_StreamCommentsClient, error)
	GetLeaderboard(ctx context.Context, in *GetLeaderboardRequest, opts ...grpc.CallOption) (*GetLeaderboardResponse, error)
	ListChallenge(ctx context.Context, in *ListChallengeRequest, opts ...grpc.CallOption) (*ListChallengeResponse, error)
	StreamChallenge(ctx context.Context, in *StreamChallengeRequest, opts ...grpc.CallOption) (CampclashQuery_StreamChallengeClient, error)
	ListChallengeClaimable(ctx context.Context, in *ListChallengeClaimableRequest, opts ...grpc.CallOption) (*ListChallengeClaimableResponse, error)
	StreamChallengeClaimable(ctx context.Context, in *StreamChallengeClaimableRequest, opts ...grpc.CallOption) (CampclashQuery_StreamChallengeClaimableClient, error)
	StreamChallengeVote(ctx context.Context, in *StreamChallengeVoteRequest, opts ...grpc.CallOption) (CampclashQuery_StreamChallengeVoteClient, error)
	GetUserChallenges(ctx context.Context, in *GetUserChallengesRequest, opts ...grpc.CallOption) (*GetUserChallengesResponse, error)
	GetLogoPresignedURL(ctx context.Context, in *GetLogoPresignedURLRequest, opts ...grpc.CallOption) (*GetLogoPresignedURLResponse, error)
	GetCampLatestHeight(ctx context.Context, in *GetCampLatestHeightRequest, opts ...grpc.CallOption) (*GetCampLatestHeightResponse, error)
	// stream API as we need to know when user close the browser tab as well
	PushUserActivity(ctx context.Context, in *PushUserActivityRequest, opts ...grpc.CallOption) (CampclashQuery_PushUserActivityClient, error)
	SubscribeUserActivity(ctx context.Context, in *SubscribeUserActivityRequest, opts ...grpc.CallOption) (CampclashQuery_SubscribeUserActivityClient, error)
}

type campclashQueryClient struct {
	cc grpc1.ClientConn
}

func NewCampclashQueryClient(cc grpc1.ClientConn) CampclashQueryClient {
	return &campclashQueryClient{cc}
}

func (c *campclashQueryClient) ListProjects(ctx context.Context, in *ListProjectsRequest, opts ...grpc.CallOption) (*ListProjectsResponse, error) {
	out := new(ListProjectsResponse)
	err := c.cc.Invoke(ctx, "/flux.indexer.campclash.CampclashQuery/ListProjects", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *campclashQueryClient) StreamProject(ctx context.Context, in *StreamProjectRequest, opts ...grpc.CallOption) (CampclashQuery_StreamProjectClient, error) {
	stream, err := c.cc.NewStream(ctx, &_CampclashQuery_serviceDesc.Streams[0], "/flux.indexer.campclash.CampclashQuery/StreamProject", opts...)
	if err != nil {
		return nil, err
	}
	x := &campclashQueryStreamProjectClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CampclashQuery_StreamProjectClient interface {
	Recv() (*StreamProjectResponse, error)
	grpc.ClientStream
}

type campclashQueryStreamProjectClient struct {
	grpc.ClientStream
}

func (x *campclashQueryStreamProjectClient) Recv() (*StreamProjectResponse, error) {
	m := new(StreamProjectResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *campclashQueryClient) ListBalances(ctx context.Context, in *ListBalancesRequest, opts ...grpc.CallOption) (*ListBalancesResponse, error) {
	out := new(ListBalancesResponse)
	err := c.cc.Invoke(ctx, "/flux.indexer.campclash.CampclashQuery/ListBalances", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *campclashQueryClient) StreamBalances(ctx context.Context, in *StreamBalancesRequest, opts ...grpc.CallOption) (CampclashQuery_StreamBalancesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_CampclashQuery_serviceDesc.Streams[1], "/flux.indexer.campclash.CampclashQuery/StreamBalances", opts...)
	if err != nil {
		return nil, err
	}
	x := &campclashQueryStreamBalancesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CampclashQuery_StreamBalancesClient interface {
	Recv() (*StreamBalancesResponse, error)
	grpc.ClientStream
}

type campclashQueryStreamBalancesClient struct {
	grpc.ClientStream
}

func (x *campclashQueryStreamBalancesClient) Recv() (*StreamBalancesResponse, error) {
	m := new(StreamBalancesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *campclashQueryClient) ListTrades(ctx context.Context, in *ListTradesRequest, opts ...grpc.CallOption) (*ListTradesResponse, error) {
	out := new(ListTradesResponse)
	err := c.cc.Invoke(ctx, "/flux.indexer.campclash.CampclashQuery/ListTrades", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *campclashQueryClient) StreamTrades(ctx context.Context, in *StreamTradesRequest, opts ...grpc.CallOption) (CampclashQuery_StreamTradesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_CampclashQuery_serviceDesc.Streams[2], "/flux.indexer.campclash.CampclashQuery/StreamTrades", opts...)
	if err != nil {
		return nil, err
	}
	x := &campclashQueryStreamTradesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CampclashQuery_StreamTradesClient interface {
	Recv() (*StreamTradesResponse, error)
	grpc.ClientStream
}

type campclashQueryStreamTradesClient struct {
	grpc.ClientStream
}

func (x *campclashQueryStreamTradesClient) Recv() (*StreamTradesResponse, error) {
	m := new(StreamTradesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *campclashQueryClient) PostComment(ctx context.Context, in *PostCommentRequest, opts ...grpc.CallOption) (*PostCommentResponse, error) {
	out := new(PostCommentResponse)
	err := c.cc.Invoke(ctx, "/flux.indexer.campclash.CampclashQuery/PostComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *campclashQueryClient) ListComments(ctx context.Context, in *ListCommentsRequest, opts ...grpc.CallOption) (*ListCommentsResponse, error) {
	out := new(ListCommentsResponse)
	err := c.cc.Invoke(ctx, "/flux.indexer.campclash.CampclashQuery/ListComments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *campclashQueryClient) StreamComments(ctx context.Context, in *StreamCommentsRequest, opts ...grpc.CallOption) (CampclashQuery_StreamCommentsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_CampclashQuery_serviceDesc.Streams[3], "/flux.indexer.campclash.CampclashQuery/StreamComments", opts...)
	if err != nil {
		return nil, err
	}
	x := &campclashQueryStreamCommentsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CampclashQuery_StreamCommentsClient interface {
	Recv() (*StreamCommentsResponse, error)
	grpc.ClientStream
}

type campclashQueryStreamCommentsClient struct {
	grpc.ClientStream
}

func (x *campclashQueryStreamCommentsClient) Recv() (*StreamCommentsResponse, error) {
	m := new(StreamCommentsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *campclashQueryClient) GetLeaderboard(ctx context.Context, in *GetLeaderboardRequest, opts ...grpc.CallOption) (*GetLeaderboardResponse, error) {
	out := new(GetLeaderboardResponse)
	err := c.cc.Invoke(ctx, "/flux.indexer.campclash.CampclashQuery/GetLeaderboard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *campclashQueryClient) ListChallenge(ctx context.Context, in *ListChallengeRequest, opts ...grpc.CallOption) (*ListChallengeResponse, error) {
	out := new(ListChallengeResponse)
	err := c.cc.Invoke(ctx, "/flux.indexer.campclash.CampclashQuery/ListChallenge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *campclashQueryClient) StreamChallenge(ctx context.Context, in *StreamChallengeRequest, opts ...grpc.CallOption) (CampclashQuery_StreamChallengeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_CampclashQuery_serviceDesc.Streams[4], "/flux.indexer.campclash.CampclashQuery/StreamChallenge", opts...)
	if err != nil {
		return nil, err
	}
	x := &campclashQueryStreamChallengeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CampclashQuery_StreamChallengeClient interface {
	Recv() (*StreamChallengeResponse, error)
	grpc.ClientStream
}

type campclashQueryStreamChallengeClient struct {
	grpc.ClientStream
}

func (x *campclashQueryStreamChallengeClient) Recv() (*StreamChallengeResponse, error) {
	m := new(StreamChallengeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *campclashQueryClient) ListChallengeClaimable(ctx context.Context, in *ListChallengeClaimableRequest, opts ...grpc.CallOption) (*ListChallengeClaimableResponse, error) {
	out := new(ListChallengeClaimableResponse)
	err := c.cc.Invoke(ctx, "/flux.indexer.campclash.CampclashQuery/ListChallengeClaimable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *campclashQueryClient) StreamChallengeClaimable(ctx context.Context, in *StreamChallengeClaimableRequest, opts ...grpc.CallOption) (CampclashQuery_StreamChallengeClaimableClient, error) {
	stream, err := c.cc.NewStream(ctx, &_CampclashQuery_serviceDesc.Streams[5], "/flux.indexer.campclash.CampclashQuery/StreamChallengeClaimable", opts...)
	if err != nil {
		return nil, err
	}
	x := &campclashQueryStreamChallengeClaimableClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CampclashQuery_StreamChallengeClaimableClient interface {
	Recv() (*StreamChallengeClaimableResponse, error)
	grpc.ClientStream
}

type campclashQueryStreamChallengeClaimableClient struct {
	grpc.ClientStream
}

func (x *campclashQueryStreamChallengeClaimableClient) Recv() (*StreamChallengeClaimableResponse, error) {
	m := new(StreamChallengeClaimableResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *campclashQueryClient) StreamChallengeVote(ctx context.Context, in *StreamChallengeVoteRequest, opts ...grpc.CallOption) (CampclashQuery_StreamChallengeVoteClient, error) {
	stream, err := c.cc.NewStream(ctx, &_CampclashQuery_serviceDesc.Streams[6], "/flux.indexer.campclash.CampclashQuery/StreamChallengeVote", opts...)
	if err != nil {
		return nil, err
	}
	x := &campclashQueryStreamChallengeVoteClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CampclashQuery_StreamChallengeVoteClient interface {
	Recv() (*StreamChallengeVoteResponse, error)
	grpc.ClientStream
}

type campclashQueryStreamChallengeVoteClient struct {
	grpc.ClientStream
}

func (x *campclashQueryStreamChallengeVoteClient) Recv() (*StreamChallengeVoteResponse, error) {
	m := new(StreamChallengeVoteResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *campclashQueryClient) GetUserChallenges(ctx context.Context, in *GetUserChallengesRequest, opts ...grpc.CallOption) (*GetUserChallengesResponse, error) {
	out := new(GetUserChallengesResponse)
	err := c.cc.Invoke(ctx, "/flux.indexer.campclash.CampclashQuery/GetUserChallenges", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *campclashQueryClient) GetLogoPresignedURL(ctx context.Context, in *GetLogoPresignedURLRequest, opts ...grpc.CallOption) (*GetLogoPresignedURLResponse, error) {
	out := new(GetLogoPresignedURLResponse)
	err := c.cc.Invoke(ctx, "/flux.indexer.campclash.CampclashQuery/GetLogoPresignedURL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *campclashQueryClient) GetCampLatestHeight(ctx context.Context, in *GetCampLatestHeightRequest, opts ...grpc.CallOption) (*GetCampLatestHeightResponse, error) {
	out := new(GetCampLatestHeightResponse)
	err := c.cc.Invoke(ctx, "/flux.indexer.campclash.CampclashQuery/GetCampLatestHeight", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *campclashQueryClient) PushUserActivity(ctx context.Context, in *PushUserActivityRequest, opts ...grpc.CallOption) (CampclashQuery_PushUserActivityClient, error) {
	stream, err := c.cc.NewStream(ctx, &_CampclashQuery_serviceDesc.Streams[7], "/flux.indexer.campclash.CampclashQuery/PushUserActivity", opts...)
	if err != nil {
		return nil, err
	}
	x := &campclashQueryPushUserActivityClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CampclashQuery_PushUserActivityClient interface {
	Recv() (*PushUserActivityResponse, error)
	grpc.ClientStream
}

type campclashQueryPushUserActivityClient struct {
	grpc.ClientStream
}

func (x *campclashQueryPushUserActivityClient) Recv() (*PushUserActivityResponse, error) {
	m := new(PushUserActivityResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *campclashQueryClient) SubscribeUserActivity(ctx context.Context, in *SubscribeUserActivityRequest, opts ...grpc.CallOption) (CampclashQuery_SubscribeUserActivityClient, error) {
	stream, err := c.cc.NewStream(ctx, &_CampclashQuery_serviceDesc.Streams[8], "/flux.indexer.campclash.CampclashQuery/SubscribeUserActivity", opts...)
	if err != nil {
		return nil, err
	}
	x := &campclashQuerySubscribeUserActivityClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CampclashQuery_SubscribeUserActivityClient interface {
	Recv() (*SubscribeUserActivityResponse, error)
	grpc.ClientStream
}

type campclashQuerySubscribeUserActivityClient struct {
	grpc.ClientStream
}

func (x *campclashQuerySubscribeUserActivityClient) Recv() (*SubscribeUserActivityResponse, error) {
	m := new(SubscribeUserActivityResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CampclashQueryServer is the server API for CampclashQuery service.
type CampclashQueryServer interface {
	ListProjects(context.Context, *ListProjectsRequest) (*ListProjectsResponse, error)
	StreamProject(*StreamProjectRequest, CampclashQuery_StreamProjectServer) error
	ListBalances(context.Context, *ListBalancesRequest) (*ListBalancesResponse, error)
	StreamBalances(*StreamBalancesRequest, CampclashQuery_StreamBalancesServer) error
	ListTrades(context.Context, *ListTradesRequest) (*ListTradesResponse, error)
	StreamTrades(*StreamTradesRequest, CampclashQuery_StreamTradesServer) error
	PostComment(context.Context, *PostCommentRequest) (*PostCommentResponse, error)
	ListComments(context.Context, *ListCommentsRequest) (*ListCommentsResponse, error)
	StreamComments(*StreamCommentsRequest, CampclashQuery_StreamCommentsServer) error
	GetLeaderboard(context.Context, *GetLeaderboardRequest) (*GetLeaderboardResponse, error)
	ListChallenge(context.Context, *ListChallengeRequest) (*ListChallengeResponse, error)
	StreamChallenge(*StreamChallengeRequest, CampclashQuery_StreamChallengeServer) error
	ListChallengeClaimable(context.Context, *ListChallengeClaimableRequest) (*ListChallengeClaimableResponse, error)
	StreamChallengeClaimable(*StreamChallengeClaimableRequest, CampclashQuery_StreamChallengeClaimableServer) error
	StreamChallengeVote(*StreamChallengeVoteRequest, CampclashQuery_StreamChallengeVoteServer) error
	GetUserChallenges(context.Context, *GetUserChallengesRequest) (*GetUserChallengesResponse, error)
	GetLogoPresignedURL(context.Context, *GetLogoPresignedURLRequest) (*GetLogoPresignedURLResponse, error)
	GetCampLatestHeight(context.Context, *GetCampLatestHeightRequest) (*GetCampLatestHeightResponse, error)
	// stream API as we need to know when user close the browser tab as well
	PushUserActivity(*PushUserActivityRequest, CampclashQuery_PushUserActivityServer) error
	SubscribeUserActivity(*SubscribeUserActivityRequest, CampclashQuery_SubscribeUserActivityServer) error
}

// UnimplementedCampclashQueryServer can be embedded to have forward compatible implementations.
type UnimplementedCampclashQueryServer struct {
}

func (*UnimplementedCampclashQueryServer) ListProjects(ctx context.Context, req *ListProjectsRequest) (*ListProjectsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProjects not implemented")
}
func (*UnimplementedCampclashQueryServer) StreamProject(req *StreamProjectRequest, srv CampclashQuery_StreamProjectServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamProject not implemented")
}
func (*UnimplementedCampclashQueryServer) ListBalances(ctx context.Context, req *ListBalancesRequest) (*ListBalancesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBalances not implemented")
}
func (*UnimplementedCampclashQueryServer) StreamBalances(req *StreamBalancesRequest, srv CampclashQuery_StreamBalancesServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamBalances not implemented")
}
func (*UnimplementedCampclashQueryServer) ListTrades(ctx context.Context, req *ListTradesRequest) (*ListTradesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTrades not implemented")
}
func (*UnimplementedCampclashQueryServer) StreamTrades(req *StreamTradesRequest, srv CampclashQuery_StreamTradesServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamTrades not implemented")
}
func (*UnimplementedCampclashQueryServer) PostComment(ctx context.Context, req *PostCommentRequest) (*PostCommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostComment not implemented")
}
func (*UnimplementedCampclashQueryServer) ListComments(ctx context.Context, req *ListCommentsRequest) (*ListCommentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListComments not implemented")
}
func (*UnimplementedCampclashQueryServer) StreamComments(req *StreamCommentsRequest, srv CampclashQuery_StreamCommentsServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamComments not implemented")
}
func (*UnimplementedCampclashQueryServer) GetLeaderboard(ctx context.Context, req *GetLeaderboardRequest) (*GetLeaderboardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLeaderboard not implemented")
}
func (*UnimplementedCampclashQueryServer) ListChallenge(ctx context.Context, req *ListChallengeRequest) (*ListChallengeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListChallenge not implemented")
}
func (*UnimplementedCampclashQueryServer) StreamChallenge(req *StreamChallengeRequest, srv CampclashQuery_StreamChallengeServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamChallenge not implemented")
}
func (*UnimplementedCampclashQueryServer) ListChallengeClaimable(ctx context.Context, req *ListChallengeClaimableRequest) (*ListChallengeClaimableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListChallengeClaimable not implemented")
}
func (*UnimplementedCampclashQueryServer) StreamChallengeClaimable(req *StreamChallengeClaimableRequest, srv CampclashQuery_StreamChallengeClaimableServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamChallengeClaimable not implemented")
}
func (*UnimplementedCampclashQueryServer) StreamChallengeVote(req *StreamChallengeVoteRequest, srv CampclashQuery_StreamChallengeVoteServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamChallengeVote not implemented")
}
func (*UnimplementedCampclashQueryServer) GetUserChallenges(ctx context.Context, req *GetUserChallengesRequest) (*GetUserChallengesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserChallenges not implemented")
}
func (*UnimplementedCampclashQueryServer) GetLogoPresignedURL(ctx context.Context, req *GetLogoPresignedURLRequest) (*GetLogoPresignedURLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLogoPresignedURL not implemented")
}
func (*UnimplementedCampclashQueryServer) GetCampLatestHeight(ctx context.Context, req *GetCampLatestHeightRequest) (*GetCampLatestHeightResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCampLatestHeight not implemented")
}
func (*UnimplementedCampclashQueryServer) PushUserActivity(req *PushUserActivityRequest, srv CampclashQuery_PushUserActivityServer) error {
	return status.Errorf(codes.Unimplemented, "method PushUserActivity not implemented")
}
func (*UnimplementedCampclashQueryServer) SubscribeUserActivity(req *SubscribeUserActivityRequest, srv CampclashQuery_SubscribeUserActivityServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeUserActivity not implemented")
}

func RegisterCampclashQueryServer(s grpc1.Server, srv CampclashQueryServer) {
	s.RegisterService(&_CampclashQuery_serviceDesc, srv)
}

func _CampclashQuery_ListProjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProjectsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CampclashQueryServer).ListProjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flux.indexer.campclash.CampclashQuery/ListProjects",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CampclashQueryServer).ListProjects(ctx, req.(*ListProjectsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CampclashQuery_StreamProject_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamProjectRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CampclashQueryServer).StreamProject(m, &campclashQueryStreamProjectServer{stream})
}

type CampclashQuery_StreamProjectServer interface {
	Send(*StreamProjectResponse) error
	grpc.ServerStream
}

type campclashQueryStreamProjectServer struct {
	grpc.ServerStream
}

func (x *campclashQueryStreamProjectServer) Send(m *StreamProjectResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _CampclashQuery_ListBalances_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBalancesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CampclashQueryServer).ListBalances(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flux.indexer.campclash.CampclashQuery/ListBalances",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CampclashQueryServer).ListBalances(ctx, req.(*ListBalancesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CampclashQuery_StreamBalances_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamBalancesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CampclashQueryServer).StreamBalances(m, &campclashQueryStreamBalancesServer{stream})
}

type CampclashQuery_StreamBalancesServer interface {
	Send(*StreamBalancesResponse) error
	grpc.ServerStream
}

type campclashQueryStreamBalancesServer struct {
	grpc.ServerStream
}

func (x *campclashQueryStreamBalancesServer) Send(m *StreamBalancesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _CampclashQuery_ListTrades_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTradesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CampclashQueryServer).ListTrades(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flux.indexer.campclash.CampclashQuery/ListTrades",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CampclashQueryServer).ListTrades(ctx, req.(*ListTradesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CampclashQuery_StreamTrades_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamTradesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CampclashQueryServer).StreamTrades(m, &campclashQueryStreamTradesServer{stream})
}

type CampclashQuery_StreamTradesServer interface {
	Send(*StreamTradesResponse) error
	grpc.ServerStream
}

type campclashQueryStreamTradesServer struct {
	grpc.ServerStream
}

func (x *campclashQueryStreamTradesServer) Send(m *StreamTradesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _CampclashQuery_PostComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CampclashQueryServer).PostComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flux.indexer.campclash.CampclashQuery/PostComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CampclashQueryServer).PostComment(ctx, req.(*PostCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CampclashQuery_ListComments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCommentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CampclashQueryServer).ListComments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flux.indexer.campclash.CampclashQuery/ListComments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CampclashQueryServer).ListComments(ctx, req.(*ListCommentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CampclashQuery_StreamComments_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamCommentsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CampclashQueryServer).StreamComments(m, &campclashQueryStreamCommentsServer{stream})
}

type CampclashQuery_StreamCommentsServer interface {
	Send(*StreamCommentsResponse) error
	grpc.ServerStream
}

type campclashQueryStreamCommentsServer struct {
	grpc.ServerStream
}

func (x *campclashQueryStreamCommentsServer) Send(m *StreamCommentsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _CampclashQuery_GetLeaderboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLeaderboardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CampclashQueryServer).GetLeaderboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flux.indexer.campclash.CampclashQuery/GetLeaderboard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CampclashQueryServer).GetLeaderboard(ctx, req.(*GetLeaderboardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CampclashQuery_ListChallenge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListChallengeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CampclashQueryServer).ListChallenge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flux.indexer.campclash.CampclashQuery/ListChallenge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CampclashQueryServer).ListChallenge(ctx, req.(*ListChallengeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CampclashQuery_StreamChallenge_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamChallengeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CampclashQueryServer).StreamChallenge(m, &campclashQueryStreamChallengeServer{stream})
}

type CampclashQuery_StreamChallengeServer interface {
	Send(*StreamChallengeResponse) error
	grpc.ServerStream
}

type campclashQueryStreamChallengeServer struct {
	grpc.ServerStream
}

func (x *campclashQueryStreamChallengeServer) Send(m *StreamChallengeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _CampclashQuery_ListChallengeClaimable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListChallengeClaimableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CampclashQueryServer).ListChallengeClaimable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flux.indexer.campclash.CampclashQuery/ListChallengeClaimable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CampclashQueryServer).ListChallengeClaimable(ctx, req.(*ListChallengeClaimableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CampclashQuery_StreamChallengeClaimable_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamChallengeClaimableRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CampclashQueryServer).StreamChallengeClaimable(m, &campclashQueryStreamChallengeClaimableServer{stream})
}

type CampclashQuery_StreamChallengeClaimableServer interface {
	Send(*StreamChallengeClaimableResponse) error
	grpc.ServerStream
}

type campclashQueryStreamChallengeClaimableServer struct {
	grpc.ServerStream
}

func (x *campclashQueryStreamChallengeClaimableServer) Send(m *StreamChallengeClaimableResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _CampclashQuery_StreamChallengeVote_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamChallengeVoteRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CampclashQueryServer).StreamChallengeVote(m, &campclashQueryStreamChallengeVoteServer{stream})
}

type CampclashQuery_StreamChallengeVoteServer interface {
	Send(*StreamChallengeVoteResponse) error
	grpc.ServerStream
}

type campclashQueryStreamChallengeVoteServer struct {
	grpc.ServerStream
}

func (x *campclashQueryStreamChallengeVoteServer) Send(m *StreamChallengeVoteResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _CampclashQuery_GetUserChallenges_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserChallengesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CampclashQueryServer).GetUserChallenges(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flux.indexer.campclash.CampclashQuery/GetUserChallenges",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CampclashQueryServer).GetUserChallenges(ctx, req.(*GetUserChallengesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CampclashQuery_GetLogoPresignedURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLogoPresignedURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CampclashQueryServer).GetLogoPresignedURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flux.indexer.campclash.CampclashQuery/GetLogoPresignedURL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CampclashQueryServer).GetLogoPresignedURL(ctx, req.(*GetLogoPresignedURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CampclashQuery_GetCampLatestHeight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCampLatestHeightRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CampclashQueryServer).GetCampLatestHeight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flux.indexer.campclash.CampclashQuery/GetCampLatestHeight",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CampclashQueryServer).GetCampLatestHeight(ctx, req.(*GetCampLatestHeightRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CampclashQuery_PushUserActivity_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PushUserActivityRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CampclashQueryServer).PushUserActivity(m, &campclashQueryPushUserActivityServer{stream})
}

type CampclashQuery_PushUserActivityServer interface {
	Send(*PushUserActivityResponse) error
	grpc.ServerStream
}

type campclashQueryPushUserActivityServer struct {
	grpc.ServerStream
}

func (x *campclashQueryPushUserActivityServer) Send(m *PushUserActivityResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _CampclashQuery_SubscribeUserActivity_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeUserActivityRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CampclashQueryServer).SubscribeUserActivity(m, &campclashQuerySubscribeUserActivityServer{stream})
}

type CampclashQuery_SubscribeUserActivityServer interface {
	Send(*SubscribeUserActivityResponse) error
	grpc.ServerStream
}

type campclashQuerySubscribeUserActivityServer struct {
	grpc.ServerStream
}

func (x *campclashQuerySubscribeUserActivityServer) Send(m *SubscribeUserActivityResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _CampclashQuery_serviceDesc = grpc.ServiceDesc{
	ServiceName: "flux.indexer.campclash.CampclashQuery",
	HandlerType: (*CampclashQueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListProjects",
			Handler:    _CampclashQuery_ListProjects_Handler,
		},
		{
			MethodName: "ListBalances",
			Handler:    _CampclashQuery_ListBalances_Handler,
		},
		{
			MethodName: "ListTrades",
			Handler:    _CampclashQuery_ListTrades_Handler,
		},
		{
			MethodName: "PostComment",
			Handler:    _CampclashQuery_PostComment_Handler,
		},
		{
			MethodName: "ListComments",
			Handler:    _CampclashQuery_ListComments_Handler,
		},
		{
			MethodName: "GetLeaderboard",
			Handler:    _CampclashQuery_GetLeaderboard_Handler,
		},
		{
			MethodName: "ListChallenge",
			Handler:    _CampclashQuery_ListChallenge_Handler,
		},
		{
			MethodName: "ListChallengeClaimable",
			Handler:    _CampclashQuery_ListChallengeClaimable_Handler,
		},
		{
			MethodName: "GetUserChallenges",
			Handler:    _CampclashQuery_GetUserChallenges_Handler,
		},
		{
			MethodName: "GetLogoPresignedURL",
			Handler:    _CampclashQuery_GetLogoPresignedURL_Handler,
		},
		{
			MethodName: "GetCampLatestHeight",
			Handler:    _CampclashQuery_GetCampLatestHeight_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamProject",
			Handler:       _CampclashQuery_StreamProject_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamBalances",
			Handler:       _CampclashQuery_StreamBalances_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamTrades",
			Handler:       _CampclashQuery_StreamTrades_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamComments",
			Handler:       _CampclashQuery_StreamComments_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamChallenge",
			Handler:       _CampclashQuery_StreamChallenge_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamChallengeClaimable",
			Handler:       _CampclashQuery_StreamChallengeClaimable_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamChallengeVote",
			Handler:       _CampclashQuery_StreamChallengeVote_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "PushUserActivity",
			Handler:       _CampclashQuery_PushUserActivity_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeUserActivity",
			Handler:       _CampclashQuery_SubscribeUserActivity_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "flux/indexer/campclash/camp_query.proto",
}

func (m *ListProjectsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListProjectsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListProjectsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OnlyChallengeable {
		i--
		if m.OnlyChallengeable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if len(m.Tags) > 0 {
		for iNdEx := len(m.Tags) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Tags[iNdEx])
			copy(dAtA[i:], m.Tags[iNdEx])
			i = encodeVarintCampQuery(dAtA, i, uint64(len(m.Tags[iNdEx])))
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.CampType) > 0 {
		i -= len(m.CampType)
		copy(dAtA[i:], m.CampType)
		i = encodeVarintCampQuery(dAtA, i, uint64(len(m.CampType)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.SortByFields) > 0 {
		for iNdEx := len(m.SortByFields) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.SortByFields[iNdEx])
			copy(dAtA[i:], m.SortByFields[iNdEx])
			i = encodeVarintCampQuery(dAtA, i, uint64(len(m.SortByFields[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Search) > 0 {
		i -= len(m.Search)
		copy(dAtA[i:], m.Search)
		i = encodeVarintCampQuery(dAtA, i, uint64(len(m.Search)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.CampDenom) > 0 {
		i -= len(m.CampDenom)
		copy(dAtA[i:], m.CampDenom)
		i = encodeVarintCampQuery(dAtA, i, uint64(len(m.CampDenom)))
		i--
		dAtA[i] = 0x12
	}
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCampQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListProjectsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListProjectsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListProjectsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Projects) > 0 {
		for iNdEx := len(m.Projects) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Projects[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCampQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCampQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StreamProjectRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StreamProjectRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StreamProjectRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Tags) > 0 {
		for iNdEx := len(m.Tags) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Tags[iNdEx])
			copy(dAtA[i:], m.Tags[iNdEx])
			i = encodeVarintCampQuery(dAtA, i, uint64(len(m.Tags[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.CampType) > 0 {
		i -= len(m.CampType)
		copy(dAtA[i:], m.CampType)
		i = encodeVarintCampQuery(dAtA, i, uint64(len(m.CampType)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.CampDenom) > 0 {
		i -= len(m.CampDenom)
		copy(dAtA[i:], m.CampDenom)
		i = encodeVarintCampQuery(dAtA, i, uint64(len(m.CampDenom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StreamProjectResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StreamProjectResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StreamProjectResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.StreamOperation) > 0 {
		i -= len(m.StreamOperation)
		copy(dAtA[i:], m.StreamOperation)
		i = encodeVarintCampQuery(dAtA, i, uint64(len(m.StreamOperation)))
		i--
		dAtA[i] = 0x22
	}
	if m.Project != nil {
		{
			size, err := m.Project.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCampQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Height != 0 {
		i = encodeVarintCampQuery(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x10
	}
	if m.Deleted != 0 {
		i = encodeVarintCampQuery(dAtA, i, uint64(m.Deleted))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ListBalancesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListBalancesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListBalancesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ChallengeId != 0 {
		i = encodeVarintCampQuery(dAtA, i, uint64(m.ChallengeId))
		i--
		dAtA[i] = 0x30
	}
	if m.SortAsc {
		i--
		if m.SortAsc {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if len(m.SortBy) > 0 {
		i -= len(m.SortBy)
		copy(dAtA[i:], m.SortBy)
		i = encodeVarintCampQuery(dAtA, i, uint64(len(m.SortBy)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.UserAddress) > 0 {
		i -= len(m.UserAddress)
		copy(dAtA[i:], m.UserAddress)
		i = encodeVarintCampQuery(dAtA, i, uint64(len(m.UserAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.CampDenom) > 0 {
		i -= len(m.CampDenom)
		copy(dAtA[i:], m.CampDenom)
		i = encodeVarintCampQuery(dAtA, i, uint64(len(m.CampDenom)))
		i--
		dAtA[i] = 0x12
	}
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCampQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListBalancesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListBalancesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListBalancesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ChallengeId != 0 {
		i = encodeVarintCampQuery(dAtA, i, uint64(m.ChallengeId))
		i--
		dAtA[i] = 0x18
	}
	if len(m.UserBalance) > 0 {
		for iNdEx := len(m.UserBalance) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.UserBalance[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCampQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCampQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StreamBalancesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StreamBalancesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StreamBalancesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintCampQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.CampDenom) > 0 {
		i -= len(m.CampDenom)
		copy(dAtA[i:], m.CampDenom)
		i = encodeVarintCampQuery(dAtA, i, uint64(len(m.CampDenom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StreamBalancesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StreamBalancesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StreamBalancesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.User != nil {
		{
			size, err := m.User.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCampQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Deleted != 0 {
		i = encodeVarintCampQuery(dAtA, i, uint64(m.Deleted))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ListTradesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListTradesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListTradesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UserAddress) > 0 {
		i -= len(m.UserAddress)
		copy(dAtA[i:], m.UserAddress)
		i = encodeVarintCampQuery(dAtA, i, uint64(len(m.UserAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.CampDenom) > 0 {
		i -= len(m.CampDenom)
		copy(dAtA[i:], m.CampDenom)
		i = encodeVarintCampQuery(dAtA, i, uint64(len(m.CampDenom)))
		i--
		dAtA[i] = 0x12
	}
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCampQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListTradesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListTradesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListTradesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Trades) > 0 {
		for iNdEx := len(m.Trades) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Trades[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCampQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCampQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StreamTradesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StreamTradesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StreamTradesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CampType) > 0 {
		i -= len(m.CampType)
		copy(dAtA[i:], m.CampType)
		i = encodeVarintCampQuery(dAtA, i, uint64(len(m.CampType)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.UserAddress) > 0 {
		i -= len(m.UserAddress)
		copy(dAtA[i:], m.UserAddress)
		i = encodeVarintCampQuery(dAtA, i, uint64(len(m.UserAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.CampDenom) > 0 {
		i -= len(m.CampDenom)
		copy(dAtA[i:], m.CampDenom)
		i = encodeVarintCampQuery(dAtA, i, uint64(len(m.CampDenom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StreamTradesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StreamTradesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StreamTradesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Trade != nil {
		{
			size, err := m.Trade.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCampQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Height != 0 {
		i = encodeVarintCampQuery(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x10
	}
	if m.Deleted != 0 {
		i = encodeVarintCampQuery(dAtA, i, uint64(m.Deleted))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Comment) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Comment) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Comment) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Time != 0 {
		i = encodeVarintCampQuery(dAtA, i, uint64(m.Time))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Content) > 0 {
		i -= len(m.Content)
		copy(dAtA[i:], m.Content)
		i = encodeVarintCampQuery(dAtA, i, uint64(len(m.Content)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Account) > 0 {
		i -= len(m.Account)
		copy(dAtA[i:], m.Account)
		i = encodeVarintCampQuery(dAtA, i, uint64(len(m.Account)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.CampDenom) > 0 {
		i -= len(m.CampDenom)
		copy(dAtA[i:], m.CampDenom)
		i = encodeVarintCampQuery(dAtA, i, uint64(len(m.CampDenom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PostCommentRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PostCommentRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PostCommentRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Comment != nil {
		{
			size, err := m.Comment.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCampQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *PostCommentResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PostCommentResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PostCommentResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ListCommentsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListCommentsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListCommentsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CampDenom) > 0 {
		i -= len(m.CampDenom)
		copy(dAtA[i:], m.CampDenom)
		i = encodeVarintCampQuery(dAtA, i, uint64(len(m.CampDenom)))
		i--
		dAtA[i] = 0x12
	}
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCampQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListCommentsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListCommentsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListCommentsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Comments) > 0 {
		for iNdEx := len(m.Comments) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Comments[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCampQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCampQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StreamCommentsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StreamCommentsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StreamCommentsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CampDenom) > 0 {
		i -= len(m.CampDenom)
		copy(dAtA[i:], m.CampDenom)
		i = encodeVarintCampQuery(dAtA, i, uint64(len(m.CampDenom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StreamCommentsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StreamCommentsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StreamCommentsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Comment != nil {
		{
			size, err := m.Comment.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCampQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Height != 0 {
		i = encodeVarintCampQuery(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x10
	}
	if m.Deleted != 0 {
		i = encodeVarintCampQuery(dAtA, i, uint64(m.Deleted))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetLeaderboardRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetLeaderboardRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetLeaderboardRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SortBy) > 0 {
		i -= len(m.SortBy)
		copy(dAtA[i:], m.SortBy)
		i = encodeVarintCampQuery(dAtA, i, uint64(len(m.SortBy)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.CampType) > 0 {
		i -= len(m.CampType)
		copy(dAtA[i:], m.CampType)
		i = encodeVarintCampQuery(dAtA, i, uint64(len(m.CampType)))
		i--
		dAtA[i] = 0x12
	}
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCampQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetLeaderboardResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetLeaderboardResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetLeaderboardResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Projects) > 0 {
		for iNdEx := len(m.Projects) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Projects[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCampQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCampQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListChallengeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListChallengeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListChallengeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChallengedDenom) > 0 {
		i -= len(m.ChallengedDenom)
		copy(dAtA[i:], m.ChallengedDenom)
		i = encodeVarintCampQuery(dAtA, i, uint64(len(m.ChallengedDenom)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ChallengerDenom) > 0 {
		i -= len(m.ChallengerDenom)
		copy(dAtA[i:], m.ChallengerDenom)
		i = encodeVarintCampQuery(dAtA, i, uint64(len(m.ChallengerDenom)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintCampQuery(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ChallengeId != 0 {
		i = encodeVarintCampQuery(dAtA, i, uint64(m.ChallengeId))
		i--
		dAtA[i] = 0x10
	}
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCampQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListChallengeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListChallengeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListChallengeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Challenges) > 0 {
		for iNdEx := len(m.Challenges) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Challenges[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCampQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCampQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StreamChallengeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StreamChallengeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StreamChallengeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ChallengeId != 0 {
		i = encodeVarintCampQuery(dAtA, i, uint64(m.ChallengeId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *StreamChallengeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StreamChallengeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StreamChallengeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.StreamOperation) > 0 {
		i -= len(m.StreamOperation)
		copy(dAtA[i:], m.StreamOperation)
		i = encodeVarintCampQuery(dAtA, i, uint64(len(m.StreamOperation)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Challenge != nil {
		{
			size, err := m.Challenge.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCampQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Deleted != 0 {
		i = encodeVarintCampQuery(dAtA, i, uint64(m.Deleted))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ListChallengeClaimableRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListChallengeClaimableRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListChallengeClaimableRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintCampQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.CampDenom) > 0 {
		i -= len(m.CampDenom)
		copy(dAtA[i:], m.CampDenom)
		i = encodeVarintCampQuery(dAtA, i, uint64(len(m.CampDenom)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ChallengeId != 0 {
		i = encodeVarintCampQuery(dAtA, i, uint64(m.ChallengeId))
		i--
		dAtA[i] = 0x10
	}
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCampQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListChallengeClaimableResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListChallengeClaimableResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListChallengeClaimableResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Entries) > 0 {
		for iNdEx := len(m.Entries) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Entries[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCampQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.ChallengeId != 0 {
		i = encodeVarintCampQuery(dAtA, i, uint64(m.ChallengeId))
		i--
		dAtA[i] = 0x10
	}
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCampQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StreamChallengeClaimableRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StreamChallengeClaimableRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StreamChallengeClaimableRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Addresss) > 0 {
		i -= len(m.Addresss)
		copy(dAtA[i:], m.Addresss)
		i = encodeVarintCampQuery(dAtA, i, uint64(len(m.Addresss)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.CampDenom) > 0 {
		i -= len(m.CampDenom)
		copy(dAtA[i:], m.CampDenom)
		i = encodeVarintCampQuery(dAtA, i, uint64(len(m.CampDenom)))
		i--
		dAtA[i] = 0x12
	}
	if m.ChallengeId != 0 {
		i = encodeVarintCampQuery(dAtA, i, uint64(m.ChallengeId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *StreamChallengeClaimableResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StreamChallengeClaimableResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StreamChallengeClaimableResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Entry != nil {
		{
			size, err := m.Entry.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCampQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Deleted {
		i--
		if m.Deleted {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *StreamChallengeVoteRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StreamChallengeVoteRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StreamChallengeVoteRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ChallengeId != 0 {
		i = encodeVarintCampQuery(dAtA, i, uint64(m.ChallengeId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *StreamChallengeVoteResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StreamChallengeVoteResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StreamChallengeVoteResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Vote != nil {
		{
			size, err := m.Vote.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCampQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Deleted {
		i--
		if m.Deleted {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetUserChallengesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetUserChallengesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetUserChallengesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UnclaimedChallenge {
		i--
		if m.UnclaimedChallenge {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintCampQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCampQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetUserChallengesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetUserChallengesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetUserChallengesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Challenges) > 0 {
		for iNdEx := len(m.Challenges) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Challenges[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCampQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCampQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetLogoPresignedURLRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetLogoPresignedURLRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetLogoPresignedURLRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LogoSize != 0 {
		i = encodeVarintCampQuery(dAtA, i, uint64(m.LogoSize))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetLogoPresignedURLResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetLogoPresignedURLResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetLogoPresignedURLResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Url) > 0 {
		i -= len(m.Url)
		copy(dAtA[i:], m.Url)
		i = encodeVarintCampQuery(dAtA, i, uint64(len(m.Url)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetCampLatestHeightRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetCampLatestHeightRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetCampLatestHeightRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GetCampLatestHeightResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetCampLatestHeightResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetCampLatestHeightResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Height != 0 {
		i = encodeVarintCampQuery(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PushUserActivityRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PushUserActivityRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PushUserActivityRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Action != 0 {
		i = encodeVarintCampQuery(dAtA, i, uint64(m.Action))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Url) > 0 {
		i -= len(m.Url)
		copy(dAtA[i:], m.Url)
		i = encodeVarintCampQuery(dAtA, i, uint64(len(m.Url)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintCampQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PushUserActivityResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PushUserActivityResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PushUserActivityResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *SubscribeUserActivityRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SubscribeUserActivityRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SubscribeUserActivityRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *SubscribeUserActivityResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SubscribeUserActivityResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SubscribeUserActivityResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Action != 0 {
		i = encodeVarintCampQuery(dAtA, i, uint64(m.Action))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Url) > 0 {
		i -= len(m.Url)
		copy(dAtA[i:], m.Url)
		i = encodeVarintCampQuery(dAtA, i, uint64(len(m.Url)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintCampQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Ip) > 0 {
		i -= len(m.Ip)
		copy(dAtA[i:], m.Ip)
		i = encodeVarintCampQuery(dAtA, i, uint64(len(m.Ip)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintCampQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovCampQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ListProjectsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovCampQuery(uint64(l))
	}
	l = len(m.CampDenom)
	if l > 0 {
		n += 1 + l + sovCampQuery(uint64(l))
	}
	l = len(m.Search)
	if l > 0 {
		n += 1 + l + sovCampQuery(uint64(l))
	}
	if len(m.SortByFields) > 0 {
		for _, s := range m.SortByFields {
			l = len(s)
			n += 1 + l + sovCampQuery(uint64(l))
		}
	}
	l = len(m.CampType)
	if l > 0 {
		n += 1 + l + sovCampQuery(uint64(l))
	}
	if len(m.Tags) > 0 {
		for _, s := range m.Tags {
			l = len(s)
			n += 1 + l + sovCampQuery(uint64(l))
		}
	}
	if m.OnlyChallengeable {
		n += 2
	}
	return n
}

func (m *ListProjectsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovCampQuery(uint64(l))
	}
	if len(m.Projects) > 0 {
		for _, e := range m.Projects {
			l = e.Size()
			n += 1 + l + sovCampQuery(uint64(l))
		}
	}
	return n
}

func (m *StreamProjectRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CampDenom)
	if l > 0 {
		n += 1 + l + sovCampQuery(uint64(l))
	}
	l = len(m.CampType)
	if l > 0 {
		n += 1 + l + sovCampQuery(uint64(l))
	}
	if len(m.Tags) > 0 {
		for _, s := range m.Tags {
			l = len(s)
			n += 1 + l + sovCampQuery(uint64(l))
		}
	}
	return n
}

func (m *StreamProjectResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Deleted != 0 {
		n += 1 + sovCampQuery(uint64(m.Deleted))
	}
	if m.Height != 0 {
		n += 1 + sovCampQuery(uint64(m.Height))
	}
	if m.Project != nil {
		l = m.Project.Size()
		n += 1 + l + sovCampQuery(uint64(l))
	}
	l = len(m.StreamOperation)
	if l > 0 {
		n += 1 + l + sovCampQuery(uint64(l))
	}
	return n
}

func (m *ListBalancesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovCampQuery(uint64(l))
	}
	l = len(m.CampDenom)
	if l > 0 {
		n += 1 + l + sovCampQuery(uint64(l))
	}
	l = len(m.UserAddress)
	if l > 0 {
		n += 1 + l + sovCampQuery(uint64(l))
	}
	l = len(m.SortBy)
	if l > 0 {
		n += 1 + l + sovCampQuery(uint64(l))
	}
	if m.SortAsc {
		n += 2
	}
	if m.ChallengeId != 0 {
		n += 1 + sovCampQuery(uint64(m.ChallengeId))
	}
	return n
}

func (m *ListBalancesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovCampQuery(uint64(l))
	}
	if len(m.UserBalance) > 0 {
		for _, e := range m.UserBalance {
			l = e.Size()
			n += 1 + l + sovCampQuery(uint64(l))
		}
	}
	if m.ChallengeId != 0 {
		n += 1 + sovCampQuery(uint64(m.ChallengeId))
	}
	return n
}

func (m *StreamBalancesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CampDenom)
	if l > 0 {
		n += 1 + l + sovCampQuery(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovCampQuery(uint64(l))
	}
	return n
}

func (m *StreamBalancesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Deleted != 0 {
		n += 1 + sovCampQuery(uint64(m.Deleted))
	}
	if m.User != nil {
		l = m.User.Size()
		n += 1 + l + sovCampQuery(uint64(l))
	}
	return n
}

func (m *ListTradesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovCampQuery(uint64(l))
	}
	l = len(m.CampDenom)
	if l > 0 {
		n += 1 + l + sovCampQuery(uint64(l))
	}
	l = len(m.UserAddress)
	if l > 0 {
		n += 1 + l + sovCampQuery(uint64(l))
	}
	return n
}

func (m *ListTradesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovCampQuery(uint64(l))
	}
	if len(m.Trades) > 0 {
		for _, e := range m.Trades {
			l = e.Size()
			n += 1 + l + sovCampQuery(uint64(l))
		}
	}
	return n
}

func (m *StreamTradesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CampDenom)
	if l > 0 {
		n += 1 + l + sovCampQuery(uint64(l))
	}
	l = len(m.UserAddress)
	if l > 0 {
		n += 1 + l + sovCampQuery(uint64(l))
	}
	l = len(m.CampType)
	if l > 0 {
		n += 1 + l + sovCampQuery(uint64(l))
	}
	return n
}

func (m *StreamTradesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Deleted != 0 {
		n += 1 + sovCampQuery(uint64(m.Deleted))
	}
	if m.Height != 0 {
		n += 1 + sovCampQuery(uint64(m.Height))
	}
	if m.Trade != nil {
		l = m.Trade.Size()
		n += 1 + l + sovCampQuery(uint64(l))
	}
	return n
}

func (m *Comment) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CampDenom)
	if l > 0 {
		n += 1 + l + sovCampQuery(uint64(l))
	}
	l = len(m.Account)
	if l > 0 {
		n += 1 + l + sovCampQuery(uint64(l))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovCampQuery(uint64(l))
	}
	if m.Time != 0 {
		n += 1 + sovCampQuery(uint64(m.Time))
	}
	return n
}

func (m *PostCommentRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Comment != nil {
		l = m.Comment.Size()
		n += 1 + l + sovCampQuery(uint64(l))
	}
	return n
}

func (m *PostCommentResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ListCommentsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovCampQuery(uint64(l))
	}
	l = len(m.CampDenom)
	if l > 0 {
		n += 1 + l + sovCampQuery(uint64(l))
	}
	return n
}

func (m *ListCommentsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovCampQuery(uint64(l))
	}
	if len(m.Comments) > 0 {
		for _, e := range m.Comments {
			l = e.Size()
			n += 1 + l + sovCampQuery(uint64(l))
		}
	}
	return n
}

func (m *StreamCommentsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CampDenom)
	if l > 0 {
		n += 1 + l + sovCampQuery(uint64(l))
	}
	return n
}

func (m *StreamCommentsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Deleted != 0 {
		n += 1 + sovCampQuery(uint64(m.Deleted))
	}
	if m.Height != 0 {
		n += 1 + sovCampQuery(uint64(m.Height))
	}
	if m.Comment != nil {
		l = m.Comment.Size()
		n += 1 + l + sovCampQuery(uint64(l))
	}
	return n
}

func (m *GetLeaderboardRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovCampQuery(uint64(l))
	}
	l = len(m.CampType)
	if l > 0 {
		n += 1 + l + sovCampQuery(uint64(l))
	}
	l = len(m.SortBy)
	if l > 0 {
		n += 1 + l + sovCampQuery(uint64(l))
	}
	return n
}

func (m *GetLeaderboardResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovCampQuery(uint64(l))
	}
	if len(m.Projects) > 0 {
		for _, e := range m.Projects {
			l = e.Size()
			n += 1 + l + sovCampQuery(uint64(l))
		}
	}
	return n
}

func (m *ListChallengeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovCampQuery(uint64(l))
	}
	if m.ChallengeId != 0 {
		n += 1 + sovCampQuery(uint64(m.ChallengeId))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovCampQuery(uint64(l))
	}
	l = len(m.ChallengerDenom)
	if l > 0 {
		n += 1 + l + sovCampQuery(uint64(l))
	}
	l = len(m.ChallengedDenom)
	if l > 0 {
		n += 1 + l + sovCampQuery(uint64(l))
	}
	return n
}

func (m *ListChallengeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovCampQuery(uint64(l))
	}
	if len(m.Challenges) > 0 {
		for _, e := range m.Challenges {
			l = e.Size()
			n += 1 + l + sovCampQuery(uint64(l))
		}
	}
	return n
}

func (m *StreamChallengeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChallengeId != 0 {
		n += 1 + sovCampQuery(uint64(m.ChallengeId))
	}
	return n
}

func (m *StreamChallengeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Deleted != 0 {
		n += 1 + sovCampQuery(uint64(m.Deleted))
	}
	if m.Challenge != nil {
		l = m.Challenge.Size()
		n += 1 + l + sovCampQuery(uint64(l))
	}
	l = len(m.StreamOperation)
	if l > 0 {
		n += 1 + l + sovCampQuery(uint64(l))
	}
	return n
}

func (m *ListChallengeClaimableRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovCampQuery(uint64(l))
	}
	if m.ChallengeId != 0 {
		n += 1 + sovCampQuery(uint64(m.ChallengeId))
	}
	l = len(m.CampDenom)
	if l > 0 {
		n += 1 + l + sovCampQuery(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovCampQuery(uint64(l))
	}
	return n
}

func (m *ListChallengeClaimableResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovCampQuery(uint64(l))
	}
	if m.ChallengeId != 0 {
		n += 1 + sovCampQuery(uint64(m.ChallengeId))
	}
	if len(m.Entries) > 0 {
		for _, e := range m.Entries {
			l = e.Size()
			n += 1 + l + sovCampQuery(uint64(l))
		}
	}
	return n
}

func (m *StreamChallengeClaimableRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChallengeId != 0 {
		n += 1 + sovCampQuery(uint64(m.ChallengeId))
	}
	l = len(m.CampDenom)
	if l > 0 {
		n += 1 + l + sovCampQuery(uint64(l))
	}
	l = len(m.Addresss)
	if l > 0 {
		n += 1 + l + sovCampQuery(uint64(l))
	}
	return n
}

func (m *StreamChallengeClaimableResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Deleted {
		n += 2
	}
	if m.Entry != nil {
		l = m.Entry.Size()
		n += 1 + l + sovCampQuery(uint64(l))
	}
	return n
}

func (m *StreamChallengeVoteRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChallengeId != 0 {
		n += 1 + sovCampQuery(uint64(m.ChallengeId))
	}
	return n
}

func (m *StreamChallengeVoteResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Deleted {
		n += 2
	}
	if m.Vote != nil {
		l = m.Vote.Size()
		n += 1 + l + sovCampQuery(uint64(l))
	}
	return n
}

func (m *GetUserChallengesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovCampQuery(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovCampQuery(uint64(l))
	}
	if m.UnclaimedChallenge {
		n += 2
	}
	return n
}

func (m *GetUserChallengesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovCampQuery(uint64(l))
	}
	if len(m.Challenges) > 0 {
		for _, e := range m.Challenges {
			l = e.Size()
			n += 1 + l + sovCampQuery(uint64(l))
		}
	}
	return n
}

func (m *GetLogoPresignedURLRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LogoSize != 0 {
		n += 1 + sovCampQuery(uint64(m.LogoSize))
	}
	return n
}

func (m *GetLogoPresignedURLResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovCampQuery(uint64(l))
	}
	return n
}

func (m *GetCampLatestHeightRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetCampLatestHeightResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Height != 0 {
		n += 1 + sovCampQuery(uint64(m.Height))
	}
	return n
}

func (m *PushUserActivityRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovCampQuery(uint64(l))
	}
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovCampQuery(uint64(l))
	}
	if m.Action != 0 {
		n += 1 + sovCampQuery(uint64(m.Action))
	}
	return n
}

func (m *PushUserActivityResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *SubscribeUserActivityRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *SubscribeUserActivityResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Ip)
	if l > 0 {
		n += 1 + l + sovCampQuery(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovCampQuery(uint64(l))
	}
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovCampQuery(uint64(l))
	}
	if m.Action != 0 {
		n += 1 + sovCampQuery(uint64(m.Action))
	}
	return n
}

func sovCampQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCampQuery(x uint64) (n int) {
	return sovCampQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ListProjectsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCampQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListProjectsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListProjectsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCampQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCampQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CampDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCampQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCampQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CampDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Search", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCampQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCampQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Search = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SortByFields", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCampQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCampQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SortByFields = append(m.SortByFields, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CampType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCampQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCampQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CampType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCampQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCampQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tags = append(m.Tags, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OnlyChallengeable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OnlyChallengeable = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCampQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCampQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListProjectsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCampQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListProjectsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListProjectsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCampQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCampQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Projects", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCampQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCampQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Projects = append(m.Projects, &Project{})
			if err := m.Projects[len(m.Projects)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCampQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCampQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StreamProjectRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCampQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StreamProjectRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StreamProjectRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CampDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCampQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCampQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CampDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CampType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCampQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCampQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CampType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCampQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCampQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tags = append(m.Tags, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCampQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCampQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StreamProjectResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCampQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StreamProjectResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StreamProjectResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deleted", wireType)
			}
			m.Deleted = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Deleted |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Project", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCampQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCampQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Project == nil {
				m.Project = &Project{}
			}
			if err := m.Project.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreamOperation", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCampQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCampQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StreamOperation = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCampQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCampQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListBalancesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCampQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListBalancesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListBalancesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCampQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCampQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CampDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCampQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCampQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CampDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCampQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCampQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SortBy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCampQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCampQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SortBy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SortAsc", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SortAsc = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChallengeId", wireType)
			}
			m.ChallengeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChallengeId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCampQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCampQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListBalancesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCampQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListBalancesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListBalancesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCampQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCampQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserBalance", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCampQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCampQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserBalance = append(m.UserBalance, &UserBalance{})
			if err := m.UserBalance[len(m.UserBalance)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChallengeId", wireType)
			}
			m.ChallengeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChallengeId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCampQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCampQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StreamBalancesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCampQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StreamBalancesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StreamBalancesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CampDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCampQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCampQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CampDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCampQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCampQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCampQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCampQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StreamBalancesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCampQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StreamBalancesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StreamBalancesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deleted", wireType)
			}
			m.Deleted = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Deleted |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCampQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCampQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.User == nil {
				m.User = &UserBalance{}
			}
			if err := m.User.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCampQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCampQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListTradesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCampQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListTradesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListTradesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCampQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCampQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CampDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCampQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCampQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CampDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCampQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCampQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCampQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCampQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListTradesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCampQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListTradesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListTradesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCampQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCampQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Trades", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCampQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCampQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Trades = append(m.Trades, &Trade{})
			if err := m.Trades[len(m.Trades)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCampQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCampQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StreamTradesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCampQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StreamTradesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StreamTradesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CampDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCampQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCampQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CampDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCampQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCampQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CampType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCampQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCampQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CampType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCampQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCampQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StreamTradesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCampQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StreamTradesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StreamTradesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deleted", wireType)
			}
			m.Deleted = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Deleted |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Trade", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCampQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCampQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Trade == nil {
				m.Trade = &Trade{}
			}
			if err := m.Trade.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCampQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCampQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Comment) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCampQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Comment: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Comment: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CampDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCampQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCampQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CampDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCampQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCampQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Account = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCampQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCampQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCampQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCampQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PostCommentRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCampQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PostCommentRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PostCommentRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Comment", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCampQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCampQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Comment == nil {
				m.Comment = &Comment{}
			}
			if err := m.Comment.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCampQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCampQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PostCommentResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCampQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PostCommentResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PostCommentResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCampQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCampQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListCommentsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCampQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListCommentsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListCommentsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCampQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCampQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CampDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCampQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCampQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CampDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCampQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCampQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListCommentsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCampQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListCommentsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListCommentsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCampQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCampQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Comments", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCampQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCampQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Comments = append(m.Comments, &Comment{})
			if err := m.Comments[len(m.Comments)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCampQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCampQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StreamCommentsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCampQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StreamCommentsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StreamCommentsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CampDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCampQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCampQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CampDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCampQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCampQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StreamCommentsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCampQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StreamCommentsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StreamCommentsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deleted", wireType)
			}
			m.Deleted = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Deleted |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Comment", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCampQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCampQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Comment == nil {
				m.Comment = &Comment{}
			}
			if err := m.Comment.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCampQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCampQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetLeaderboardRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCampQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetLeaderboardRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetLeaderboardRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCampQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCampQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CampType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCampQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCampQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CampType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SortBy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCampQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCampQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SortBy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCampQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCampQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetLeaderboardResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCampQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetLeaderboardResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetLeaderboardResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCampQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCampQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Projects", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCampQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCampQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Projects = append(m.Projects, &Project{})
			if err := m.Projects[len(m.Projects)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCampQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCampQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListChallengeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCampQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListChallengeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListChallengeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCampQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCampQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChallengeId", wireType)
			}
			m.ChallengeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChallengeId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCampQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCampQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChallengerDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCampQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCampQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChallengerDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChallengedDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCampQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCampQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChallengedDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCampQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCampQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListChallengeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCampQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListChallengeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListChallengeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCampQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCampQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Challenges", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCampQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCampQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Challenges = append(m.Challenges, &Challenge{})
			if err := m.Challenges[len(m.Challenges)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCampQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCampQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StreamChallengeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCampQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StreamChallengeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StreamChallengeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChallengeId", wireType)
			}
			m.ChallengeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChallengeId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCampQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCampQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StreamChallengeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCampQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StreamChallengeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StreamChallengeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deleted", wireType)
			}
			m.Deleted = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Deleted |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Challenge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCampQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCampQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Challenge == nil {
				m.Challenge = &Challenge{}
			}
			if err := m.Challenge.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreamOperation", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCampQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCampQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StreamOperation = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCampQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCampQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListChallengeClaimableRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCampQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListChallengeClaimableRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListChallengeClaimableRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCampQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCampQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChallengeId", wireType)
			}
			m.ChallengeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChallengeId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CampDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCampQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCampQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CampDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCampQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCampQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCampQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCampQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListChallengeClaimableResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCampQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListChallengeClaimableResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListChallengeClaimableResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCampQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCampQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChallengeId", wireType)
			}
			m.ChallengeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChallengeId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entries", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCampQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCampQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Entries = append(m.Entries, &Claimable{})
			if err := m.Entries[len(m.Entries)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCampQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCampQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StreamChallengeClaimableRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCampQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StreamChallengeClaimableRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StreamChallengeClaimableRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChallengeId", wireType)
			}
			m.ChallengeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChallengeId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CampDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCampQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCampQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CampDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addresss", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCampQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCampQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addresss = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCampQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCampQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StreamChallengeClaimableResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCampQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StreamChallengeClaimableResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StreamChallengeClaimableResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deleted", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Deleted = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entry", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCampQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCampQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Entry == nil {
				m.Entry = &Claimable{}
			}
			if err := m.Entry.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCampQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCampQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StreamChallengeVoteRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCampQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StreamChallengeVoteRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StreamChallengeVoteRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChallengeId", wireType)
			}
			m.ChallengeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChallengeId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCampQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCampQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StreamChallengeVoteResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCampQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StreamChallengeVoteResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StreamChallengeVoteResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deleted", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Deleted = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vote", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCampQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCampQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Vote == nil {
				m.Vote = &ChallengeVote{}
			}
			if err := m.Vote.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCampQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCampQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetUserChallengesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCampQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUserChallengesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUserChallengesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCampQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCampQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCampQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCampQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnclaimedChallenge", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UnclaimedChallenge = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCampQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCampQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetUserChallengesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCampQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUserChallengesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUserChallengesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCampQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCampQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Challenges", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCampQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCampQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Challenges = append(m.Challenges, &Challenge{})
			if err := m.Challenges[len(m.Challenges)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCampQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCampQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetLogoPresignedURLRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCampQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetLogoPresignedURLRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetLogoPresignedURLRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogoSize", wireType)
			}
			m.LogoSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LogoSize |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCampQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCampQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetLogoPresignedURLResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCampQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetLogoPresignedURLResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetLogoPresignedURLResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCampQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCampQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCampQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCampQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetCampLatestHeightRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCampQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetCampLatestHeightRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetCampLatestHeightRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCampQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCampQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetCampLatestHeightResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCampQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetCampLatestHeightResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetCampLatestHeightResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCampQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCampQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PushUserActivityRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCampQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PushUserActivityRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PushUserActivityRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCampQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCampQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCampQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCampQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			m.Action = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Action |= Action(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCampQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCampQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PushUserActivityResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCampQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PushUserActivityResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PushUserActivityResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCampQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCampQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SubscribeUserActivityRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCampQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubscribeUserActivityRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubscribeUserActivityRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCampQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCampQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SubscribeUserActivityResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCampQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubscribeUserActivityResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubscribeUserActivityResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCampQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCampQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ip = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCampQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCampQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCampQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCampQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			m.Action = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Action |= Action(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCampQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCampQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCampQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCampQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCampQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCampQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCampQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCampQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCampQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCampQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCampQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCampQuery = fmt.Errorf("proto: unexpected end of group")
)
