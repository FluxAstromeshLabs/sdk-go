// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: flux/indexer/campclash/events.proto

package campclash

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Enum for operations
type CampEventOps int32

const (
	CampEventOps_OpCreateCamp      CampEventOps = 0
	CampEventOps_OpGraduateCamp    CampEventOps = 1
	CampEventOps_OpUpdateCamp      CampEventOps = 2
	CampEventOps_OpUpdateChallenge CampEventOps = 3
)

var CampEventOps_name = map[int32]string{
	0: "OpCreateCamp",
	1: "OpGraduateCamp",
	2: "OpUpdateCamp",
	3: "OpUpdateChallenge",
}

var CampEventOps_value = map[string]int32{
	"OpCreateCamp":      0,
	"OpGraduateCamp":    1,
	"OpUpdateCamp":      2,
	"OpUpdateChallenge": 3,
}

func (x CampEventOps) String() string {
	return proto.EnumName(CampEventOps_name, int32(x))
}

func (CampEventOps) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a3b163df959b8ba9, []int{0}
}

// Define the ChallengeEventOp enum in camelCase
type ChallengeEventOp int32

const (
	ChallengeEventOp_OpCreate         ChallengeEventOp = 0
	ChallengeEventOp_OpUpdateStatus   ChallengeEventOp = 1
	ChallengeEventOp_OpUpdateProgress ChallengeEventOp = 2
	ChallengeEventOp_OpFinalize       ChallengeEventOp = 3
)

var ChallengeEventOp_name = map[int32]string{
	0: "OpCreate",
	1: "OpUpdateStatus",
	2: "OpUpdateProgress",
	3: "OpFinalize",
}

var ChallengeEventOp_value = map[string]int32{
	"OpCreate":         0,
	"OpUpdateStatus":   1,
	"OpUpdateProgress": 2,
	"OpFinalize":       3,
}

func (x ChallengeEventOp) String() string {
	return proto.EnumName(ChallengeEventOp_name, int32(x))
}

func (ChallengeEventOp) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a3b163df959b8ba9, []int{1}
}

// Event for camp-related operations
type CampEvent struct {
	ContractAddress string       `protobuf:"bytes,1,opt,name=contract_address,json=contractAddress,proto3" json:"_contract_address,omitempty" bson:"contract_address"`
	Op              CampEventOps `protobuf:"varint,2,opt,name=op,proto3,enum=flux.indexer.campclash.CampEventOps" json:"op,omitempty" bson:"op"`
	Project         *Project     `protobuf:"bytes,3,opt,name=project,proto3" json:"project,omitempty" bson:"project"`
}

func (m *CampEvent) Reset()         { *m = CampEvent{} }
func (m *CampEvent) String() string { return proto.CompactTextString(m) }
func (*CampEvent) ProtoMessage()    {}
func (*CampEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_a3b163df959b8ba9, []int{0}
}
func (m *CampEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CampEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CampEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CampEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CampEvent.Merge(m, src)
}
func (m *CampEvent) XXX_Size() int {
	return m.Size()
}
func (m *CampEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_CampEvent.DiscardUnknown(m)
}

var xxx_messageInfo_CampEvent proto.InternalMessageInfo

func (m *CampEvent) GetContractAddress() string {
	if m != nil {
		return m.ContractAddress
	}
	return ""
}

func (m *CampEvent) GetOp() CampEventOps {
	if m != nil {
		return m.Op
	}
	return CampEventOps_OpCreateCamp
}

func (m *CampEvent) GetProject() *Project {
	if m != nil {
		return m.Project
	}
	return nil
}

// Event for swap operations
type SwapEvent struct {
	ContractAddress  string                `protobuf:"bytes,1,opt,name=contract_address,json=contractAddress,proto3" json:"_contract_address,omitempty" bson:"contract_address"`
	CampDenom        string                `protobuf:"bytes,2,opt,name=camp_denom,json=campDenom,proto3" json:"camp_denom,omitempty" bson:"camp_denom"`
	Action           string                `protobuf:"bytes,3,opt,name=action,proto3" json:"action,omitempty" bson:"action"`
	InputCoin        *types.Coin           `protobuf:"bytes,4,opt,name=input_coin,json=inputCoin,proto3" json:"input_coin,omitempty" bson:"input_coin"`
	OutputCoin       *types.Coin           `protobuf:"bytes,5,opt,name=output_coin,json=outputCoin,proto3" json:"output_coin,omitempty" bson:"output_coin"`
	Price            cosmossdk_io_math.Int `protobuf:"bytes,6,opt,name=price,proto3,customtype=cosmossdk.io/math.Int" json:"price" bson:"price"`
	CurveQuoteAmount cosmossdk_io_math.Int `protobuf:"bytes,7,opt,name=curve_quote_amount,json=curveQuoteAmount,proto3,customtype=cosmossdk.io/math.Int" json:"curve_quote_amount" bson:"curve_quote_amount"`
	CurveCampAmount  cosmossdk_io_math.Int `protobuf:"bytes,8,opt,name=curve_camp_amount,json=curveCampAmount,proto3,customtype=cosmossdk.io/math.Int" json:"curve_camp_amount" bson:"curve_camp_amount"`
	Trader           string                `protobuf:"bytes,9,opt,name=trader,proto3" json:"trader,omitempty" bson:"trader"`
	OutputLocked     bool                  `protobuf:"varint,10,opt,name=output_locked,json=outputLocked,proto3" json:"output_locked,omitempty" bson:"output_locked"`
	ChallengeId      uint64                `protobuf:"varint,11,opt,name=challenge_id,json=challengeId,proto3" json:"challenge_id,omitempty" bson:"output_locked"`
}

func (m *SwapEvent) Reset()         { *m = SwapEvent{} }
func (m *SwapEvent) String() string { return proto.CompactTextString(m) }
func (*SwapEvent) ProtoMessage()    {}
func (*SwapEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_a3b163df959b8ba9, []int{1}
}
func (m *SwapEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SwapEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SwapEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SwapEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SwapEvent.Merge(m, src)
}
func (m *SwapEvent) XXX_Size() int {
	return m.Size()
}
func (m *SwapEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_SwapEvent.DiscardUnknown(m)
}

var xxx_messageInfo_SwapEvent proto.InternalMessageInfo

func (m *SwapEvent) GetContractAddress() string {
	if m != nil {
		return m.ContractAddress
	}
	return ""
}

func (m *SwapEvent) GetCampDenom() string {
	if m != nil {
		return m.CampDenom
	}
	return ""
}

func (m *SwapEvent) GetAction() string {
	if m != nil {
		return m.Action
	}
	return ""
}

func (m *SwapEvent) GetInputCoin() *types.Coin {
	if m != nil {
		return m.InputCoin
	}
	return nil
}

func (m *SwapEvent) GetOutputCoin() *types.Coin {
	if m != nil {
		return m.OutputCoin
	}
	return nil
}

func (m *SwapEvent) GetTrader() string {
	if m != nil {
		return m.Trader
	}
	return ""
}

func (m *SwapEvent) GetOutputLocked() bool {
	if m != nil {
		return m.OutputLocked
	}
	return false
}

func (m *SwapEvent) GetChallengeId() uint64 {
	if m != nil {
		return m.ChallengeId
	}
	return 0
}

// Define the ChallengeEvent message
type ChallengeEvent struct {
	ContractAddress string           `protobuf:"bytes,1,opt,name=contract_address,json=contractAddress,proto3" json:"_contract_address,omitempty" bson:"contract_address"`
	Op              ChallengeEventOp `protobuf:"varint,2,opt,name=op,proto3,enum=flux.indexer.campclash.ChallengeEventOp" json:"op,omitempty"`
	Challenge       *Challenge       `protobuf:"bytes,3,opt,name=challenge,proto3" json:"challenge,omitempty"`
}

func (m *ChallengeEvent) Reset()         { *m = ChallengeEvent{} }
func (m *ChallengeEvent) String() string { return proto.CompactTextString(m) }
func (*ChallengeEvent) ProtoMessage()    {}
func (*ChallengeEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_a3b163df959b8ba9, []int{2}
}
func (m *ChallengeEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChallengeEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChallengeEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChallengeEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChallengeEvent.Merge(m, src)
}
func (m *ChallengeEvent) XXX_Size() int {
	return m.Size()
}
func (m *ChallengeEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_ChallengeEvent.DiscardUnknown(m)
}

var xxx_messageInfo_ChallengeEvent proto.InternalMessageInfo

func (m *ChallengeEvent) GetContractAddress() string {
	if m != nil {
		return m.ContractAddress
	}
	return ""
}

func (m *ChallengeEvent) GetOp() ChallengeEventOp {
	if m != nil {
		return m.Op
	}
	return ChallengeEventOp_OpCreate
}

func (m *ChallengeEvent) GetChallenge() *Challenge {
	if m != nil {
		return m.Challenge
	}
	return nil
}

// Define the ChallengeClaimedEvent message
type ChallengeClaimedEvent struct {
	ContractAddress string        `protobuf:"bytes,1,opt,name=contract_address,json=contractAddress,proto3" json:"_contract_address,omitempty" bson:"contract_address"`
	ChallengeId     uint64        `protobuf:"varint,2,opt,name=challenge_id,json=challengeId,proto3" json:"challenge_id,omitempty" bson:"challenge_id"`
	Address         string        `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty" bson:"address"`
	Coins           []*types.Coin `protobuf:"bytes,4,rep,name=coins,proto3" json:"coins,omitempty" bson:"coins"`
	UnlockedCoins   []*types.Coin `protobuf:"bytes,5,rep,name=unlocked_coins,json=unlockedCoins,proto3" json:"unlocked_coins,omitempty" bson:"unlocked_coins"`
}

func (m *ChallengeClaimedEvent) Reset()         { *m = ChallengeClaimedEvent{} }
func (m *ChallengeClaimedEvent) String() string { return proto.CompactTextString(m) }
func (*ChallengeClaimedEvent) ProtoMessage()    {}
func (*ChallengeClaimedEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_a3b163df959b8ba9, []int{3}
}
func (m *ChallengeClaimedEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChallengeClaimedEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChallengeClaimedEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChallengeClaimedEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChallengeClaimedEvent.Merge(m, src)
}
func (m *ChallengeClaimedEvent) XXX_Size() int {
	return m.Size()
}
func (m *ChallengeClaimedEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_ChallengeClaimedEvent.DiscardUnknown(m)
}

var xxx_messageInfo_ChallengeClaimedEvent proto.InternalMessageInfo

func (m *ChallengeClaimedEvent) GetContractAddress() string {
	if m != nil {
		return m.ContractAddress
	}
	return ""
}

func (m *ChallengeClaimedEvent) GetChallengeId() uint64 {
	if m != nil {
		return m.ChallengeId
	}
	return 0
}

func (m *ChallengeClaimedEvent) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *ChallengeClaimedEvent) GetCoins() []*types.Coin {
	if m != nil {
		return m.Coins
	}
	return nil
}

func (m *ChallengeClaimedEvent) GetUnlockedCoins() []*types.Coin {
	if m != nil {
		return m.UnlockedCoins
	}
	return nil
}

type CampBalanceUpdate struct {
	Address     string                `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty" bson:"address"`
	Amount      cosmossdk_io_math.Int `protobuf:"bytes,2,opt,name=amount,proto3,customtype=cosmossdk.io/math.Int" json:"amount" bson:"amount"`
	Vote        cosmossdk_io_math.Int `protobuf:"bytes,3,opt,name=vote,proto3,customtype=cosmossdk.io/math.Int" json:"vote" bson:"vote"`
	ChallengeId uint64                `protobuf:"varint,4,opt,name=challenge_id,json=challengeId,proto3" json:"challenge_id,omitempty" bson:"challenge_id"`
}

func (m *CampBalanceUpdate) Reset()         { *m = CampBalanceUpdate{} }
func (m *CampBalanceUpdate) String() string { return proto.CompactTextString(m) }
func (*CampBalanceUpdate) ProtoMessage()    {}
func (*CampBalanceUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_a3b163df959b8ba9, []int{4}
}
func (m *CampBalanceUpdate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CampBalanceUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CampBalanceUpdate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CampBalanceUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CampBalanceUpdate.Merge(m, src)
}
func (m *CampBalanceUpdate) XXX_Size() int {
	return m.Size()
}
func (m *CampBalanceUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_CampBalanceUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_CampBalanceUpdate proto.InternalMessageInfo

func (m *CampBalanceUpdate) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *CampBalanceUpdate) GetChallengeId() uint64 {
	if m != nil {
		return m.ChallengeId
	}
	return 0
}

type CampBalanceEvent struct {
	ContractAddress string               `protobuf:"bytes,1,opt,name=contract_address,json=contractAddress,proto3" json:"_contract_address,omitempty" bson:"contract_address"`
	Denom           string               `protobuf:"bytes,2,opt,name=denom,proto3" json:"denom,omitempty" bson:"denom"`
	Updates         []*CampBalanceUpdate `protobuf:"bytes,3,rep,name=updates,proto3" json:"updates,omitempty" bson:"updates"`
}

func (m *CampBalanceEvent) Reset()         { *m = CampBalanceEvent{} }
func (m *CampBalanceEvent) String() string { return proto.CompactTextString(m) }
func (*CampBalanceEvent) ProtoMessage()    {}
func (*CampBalanceEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_a3b163df959b8ba9, []int{5}
}
func (m *CampBalanceEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CampBalanceEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CampBalanceEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CampBalanceEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CampBalanceEvent.Merge(m, src)
}
func (m *CampBalanceEvent) XXX_Size() int {
	return m.Size()
}
func (m *CampBalanceEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_CampBalanceEvent.DiscardUnknown(m)
}

var xxx_messageInfo_CampBalanceEvent proto.InternalMessageInfo

func (m *CampBalanceEvent) GetContractAddress() string {
	if m != nil {
		return m.ContractAddress
	}
	return ""
}

func (m *CampBalanceEvent) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *CampBalanceEvent) GetUpdates() []*CampBalanceUpdate {
	if m != nil {
		return m.Updates
	}
	return nil
}

func init() {
	proto.RegisterEnum("flux.indexer.campclash.CampEventOps", CampEventOps_name, CampEventOps_value)
	proto.RegisterEnum("flux.indexer.campclash.ChallengeEventOp", ChallengeEventOp_name, ChallengeEventOp_value)
	proto.RegisterType((*CampEvent)(nil), "flux.indexer.campclash.CampEvent")
	proto.RegisterType((*SwapEvent)(nil), "flux.indexer.campclash.SwapEvent")
	proto.RegisterType((*ChallengeEvent)(nil), "flux.indexer.campclash.ChallengeEvent")
	proto.RegisterType((*ChallengeClaimedEvent)(nil), "flux.indexer.campclash.ChallengeClaimedEvent")
	proto.RegisterType((*CampBalanceUpdate)(nil), "flux.indexer.campclash.CampBalanceUpdate")
	proto.RegisterType((*CampBalanceEvent)(nil), "flux.indexer.campclash.CampBalanceEvent")
}

func init() {
	proto.RegisterFile("flux/indexer/campclash/events.proto", fileDescriptor_a3b163df959b8ba9)
}

var fileDescriptor_a3b163df959b8ba9 = []byte{
	// 992 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x56, 0x4f, 0x6f, 0xe3, 0xc4,
	0x1b, 0xae, 0xd3, 0x36, 0x6d, 0xde, 0xa6, 0xf9, 0xb9, 0xf3, 0x6b, 0x77, 0xdd, 0x45, 0x8a, 0xb3,
	0x03, 0x42, 0xe9, 0xaa, 0xd8, 0xda, 0x65, 0x0f, 0x50, 0x84, 0xa0, 0x09, 0x14, 0xad, 0xb4, 0x6c,
	0x16, 0x2f, 0x08, 0x69, 0x11, 0x8a, 0x26, 0xf6, 0xd0, 0x98, 0x4d, 0x3c, 0xc6, 0x1e, 0x97, 0xc2,
	0x07, 0x00, 0x8e, 0x7c, 0x19, 0xbe, 0xc3, 0x1e, 0xf7, 0x88, 0x38, 0x58, 0xa8, 0xbd, 0x71, 0xf4,
	0x91, 0x13, 0x9a, 0x3f, 0x4e, 0xdd, 0x96, 0x36, 0x9c, 0x7a, 0xf3, 0xbc, 0xf3, 0x3c, 0xcf, 0x3b,
	0xf3, 0xfe, 0xf3, 0xc0, 0xeb, 0xdf, 0x4c, 0xb2, 0x63, 0x37, 0x8c, 0x02, 0x7a, 0x4c, 0x13, 0xd7,
	0x27, 0xd3, 0xd8, 0x9f, 0x90, 0x74, 0xec, 0xd2, 0x23, 0x1a, 0xf1, 0xd4, 0x89, 0x13, 0xc6, 0x19,
	0xba, 0x25, 0x40, 0x8e, 0x06, 0x39, 0x33, 0xd0, 0x9d, 0xcd, 0x43, 0x76, 0xc8, 0x24, 0xc4, 0x15,
	0x5f, 0x0a, 0x7d, 0xa7, 0xed, 0xb3, 0x74, 0xca, 0x52, 0x77, 0x44, 0x52, 0xea, 0x1e, 0xdd, 0x1f,
	0x51, 0x4e, 0xee, 0xbb, 0x3e, 0x0b, 0x23, 0xbd, 0x7f, 0xf7, 0x0a, 0x97, 0xe2, 0x4b, 0x41, 0xf0,
	0x4f, 0x35, 0x68, 0xf4, 0xc9, 0x34, 0xfe, 0x58, 0x9c, 0x02, 0x51, 0x30, 0x7d, 0x16, 0xf1, 0x84,
	0xf8, 0x7c, 0x48, 0x82, 0x20, 0xa1, 0x69, 0x6a, 0x19, 0x1d, 0xa3, 0xdb, 0xe8, 0xed, 0xfd, 0x95,
	0xdb, 0xaf, 0x0d, 0x2f, 0x6e, 0xee, 0xb2, 0x69, 0xc8, 0xe9, 0x34, 0xe6, 0x3f, 0x14, 0xb9, 0x7d,
	0x7b, 0x94, 0xb2, 0x68, 0x0f, 0x5f, 0xc4, 0x60, 0xef, 0x7f, 0xa5, 0x69, 0x5f, 0x59, 0x50, 0x1f,
	0x6a, 0x2c, 0xb6, 0x6a, 0x1d, 0xa3, 0xdb, 0x7a, 0xf0, 0x86, 0xf3, 0xef, 0x57, 0x76, 0x66, 0xa7,
	0x1a, 0xc4, 0x69, 0x6f, 0xbd, 0xc8, 0xed, 0x86, 0xd2, 0x67, 0x31, 0xf6, 0x6a, 0x2c, 0x46, 0x9f,
	0xc2, 0x4a, 0x9c, 0xb0, 0x6f, 0xa9, 0xcf, 0xad, 0xc5, 0x8e, 0xd1, 0x5d, 0x7b, 0x60, 0x5f, 0xa5,
	0xf4, 0x54, 0xc1, 0x7a, 0xa8, 0xc8, 0xed, 0x96, 0x12, 0xd1, 0x4c, 0xec, 0x95, 0x1a, 0xf8, 0xb7,
	0x3a, 0x34, 0x9e, 0x7d, 0x4f, 0x6e, 0x36, 0x10, 0x0f, 0x01, 0xc4, 0x31, 0x87, 0x01, 0x8d, 0xd8,
	0x54, 0x06, 0xa4, 0xd1, 0xdb, 0x2a, 0x72, 0x7b, 0x43, 0x2b, 0xcc, 0xf6, 0xb0, 0xd7, 0x10, 0x8b,
	0x8f, 0xc4, 0x37, 0xda, 0x81, 0x3a, 0xf1, 0x79, 0xc8, 0x22, 0x79, 0xf1, 0x46, 0x6f, 0xa3, 0xc8,
	0xed, 0x75, 0xc5, 0x50, 0x76, 0xec, 0x69, 0x00, 0x1a, 0x00, 0x84, 0x51, 0x9c, 0xf1, 0xa1, 0xa8,
	0x0a, 0x6b, 0x49, 0xc6, 0x69, 0xdb, 0x51, 0x65, 0xe3, 0x88, 0xb2, 0x71, 0x74, 0xd9, 0x38, 0x7d,
	0x16, 0x46, 0x55, 0xdf, 0x67, 0x34, 0xec, 0x35, 0xe4, 0x42, 0x20, 0x90, 0x07, 0x6b, 0x2c, 0xe3,
	0x33, 0xc5, 0xe5, 0x79, 0x8a, 0xb7, 0x8a, 0xdc, 0x46, 0x3a, 0x71, 0x67, 0x3c, 0xec, 0x81, 0x5a,
	0x49, 0xcd, 0x3e, 0x2c, 0xc7, 0x49, 0xe8, 0x53, 0xab, 0x2e, 0xaf, 0xf3, 0xd6, 0xcb, 0xdc, 0x5e,
	0xf8, 0x23, 0xb7, 0xb7, 0x94, 0x68, 0x1a, 0xbc, 0x70, 0x42, 0xe6, 0x4e, 0x09, 0x1f, 0x3b, 0x8f,
	0x22, 0x5e, 0xe4, 0x76, 0xb3, 0xcc, 0x61, 0xe8, 0x53, 0xec, 0x29, 0x2e, 0x1a, 0x03, 0xf2, 0xb3,
	0xe4, 0x88, 0x0e, 0xbf, 0xcb, 0x18, 0xa7, 0x43, 0x32, 0x65, 0x59, 0xc4, 0xad, 0x15, 0x95, 0xb3,
	0x79, 0x8a, 0xdb, 0x3a, 0xde, 0x97, 0x04, 0xb0, 0x67, 0x4a, 0xe3, 0x67, 0xc2, 0xb6, 0x2f, 0x4d,
	0x88, 0xc2, 0x86, 0x02, 0xca, 0xf4, 0x68, 0x47, 0xab, 0xd2, 0xd1, 0xbb, 0xf3, 0x1c, 0x59, 0x55,
	0x47, 0x15, 0xbe, 0xa8, 0x0d, 0x61, 0x13, 0x45, 0xaf, 0xdd, 0xec, 0x40, 0x9d, 0x27, 0x24, 0xa0,
	0x89, 0xd5, 0xb8, 0x98, 0x65, 0x65, 0xc7, 0x9e, 0x06, 0xa0, 0xf7, 0x61, 0x5d, 0x07, 0x77, 0xc2,
	0xfc, 0x17, 0x34, 0xb0, 0xa0, 0x63, 0x74, 0x57, 0x7b, 0x56, 0x91, 0xdb, 0x9b, 0xe7, 0x62, 0xaf,
	0xb6, 0xb1, 0xd7, 0x54, 0xeb, 0xc7, 0x72, 0x89, 0xde, 0x83, 0xa6, 0x3f, 0x26, 0x93, 0x09, 0x8d,
	0x0e, 0xe9, 0x30, 0x0c, 0xac, 0xb5, 0x8e, 0xd1, 0x5d, 0xba, 0x86, 0xbd, 0x36, 0x43, 0x3f, 0x0a,
	0x70, 0x61, 0x40, 0xab, 0x5f, 0xae, 0x6f, 0xb4, 0x79, 0xde, 0xa9, 0x4c, 0x91, 0xee, 0x95, 0x53,
	0xe4, 0xdc, 0xd1, 0x06, 0xb1, 0x1c, 0x1d, 0x1f, 0x40, 0x63, 0x76, 0x05, 0x3d, 0x3c, 0xee, 0xce,
	0x15, 0xf0, 0xce, 0x38, 0xf8, 0x97, 0x45, 0xd8, 0x9a, 0x6d, 0xf4, 0x27, 0x24, 0x9c, 0xd2, 0xe0,
	0x46, 0xef, 0xbe, 0x77, 0x21, 0x65, 0x35, 0x99, 0xb2, 0xdb, 0x45, 0x6e, 0xff, 0x5f, 0x6b, 0x54,
	0x76, 0xcf, 0x67, 0x0c, 0xed, 0xc2, 0x4a, 0x79, 0x32, 0x35, 0x3f, 0x2a, 0x73, 0x71, 0xe6, 0xb1,
	0x84, 0xa0, 0x7d, 0x58, 0x16, 0x1d, 0x9b, 0x5a, 0x4b, 0x9d, 0xc5, 0xeb, 0x5b, 0xdd, 0x3c, 0x6b,
	0x4d, 0xc9, 0xc0, 0x9e, 0x62, 0xa2, 0xaf, 0xa0, 0x95, 0x45, 0xaa, 0x78, 0x86, 0x4a, 0x6b, 0x79,
	0x9e, 0xd6, 0x76, 0x91, 0xdb, 0x5b, 0x4a, 0xeb, 0x3c, 0x15, 0x7b, 0xeb, 0xa5, 0xa1, 0x2f, 0xd7,
	0x3f, 0xd7, 0x60, 0x43, 0x74, 0x4d, 0x8f, 0x4c, 0x48, 0xe4, 0xd3, 0x2f, 0xe2, 0x80, 0x70, 0x5a,
	0xbd, 0xa3, 0x31, 0xff, 0x8e, 0x07, 0x50, 0xd7, 0x6d, 0xac, 0x46, 0xb0, 0x33, 0xaf, 0x8d, 0xcb,
	0x69, 0xab, 0x7b, 0x57, 0xb3, 0xd1, 0x87, 0xb0, 0x74, 0xc4, 0x38, 0xd5, 0x61, 0xdd, 0x9d, 0xa7,
	0xb2, 0xa6, 0x54, 0x04, 0x05, 0x7b, 0x92, 0x79, 0x29, 0xaf, 0x4b, 0xff, 0x3d, 0xaf, 0xf8, 0x6f,
	0x03, 0xcc, 0x4a, 0x24, 0x6e, 0xb4, 0x1e, 0xdf, 0x84, 0xe5, 0xea, 0x3f, 0xac, 0x52, 0x0a, 0xfa,
	0xf7, 0xa5, 0xb6, 0xd1, 0x97, 0xb0, 0x92, 0xc9, 0x0c, 0x89, 0xda, 0x13, 0x35, 0xb0, 0x73, 0xdd,
	0xef, 0xff, 0x5c, 0x4e, 0xab, 0x29, 0xd4, 0x1a, 0xd8, 0x2b, 0xd5, 0xee, 0x7d, 0x0d, 0xcd, 0xea,
	0x83, 0x01, 0x99, 0xd0, 0x1c, 0xc4, 0xfd, 0x84, 0x12, 0x2e, 0x67, 0xaa, 0xb9, 0x80, 0x10, 0xb4,
	0x06, 0xf1, 0x27, 0x09, 0x09, 0xb2, 0xd2, 0x66, 0x28, 0x94, 0x92, 0x97, 0x96, 0x1a, 0xda, 0x82,
	0x8d, 0x99, 0xa5, 0x8c, 0xad, 0xb9, 0x78, 0xef, 0x39, 0x98, 0x17, 0x27, 0x09, 0x6a, 0xc2, 0x6a,
	0xe9, 0xa2, 0x94, 0x57, 0xc4, 0x67, 0x9c, 0xf0, 0x2c, 0x35, 0x0d, 0xb4, 0x09, 0x66, 0x69, 0x7b,
	0x9a, 0xb0, 0x43, 0x11, 0x29, 0xb3, 0x86, 0x5a, 0x00, 0x83, 0xf8, 0x20, 0x8c, 0xc8, 0x24, 0xfc,
	0x91, 0x9a, 0x8b, 0xbd, 0x27, 0x2f, 0x4f, 0xda, 0xc6, 0xab, 0x93, 0xb6, 0xf1, 0xe7, 0x49, 0xdb,
	0xf8, 0xf5, 0xb4, 0xbd, 0xf0, 0xea, 0xb4, 0xbd, 0xf0, 0xfb, 0x69, 0x7b, 0xe1, 0xf9, 0xc3, 0xc3,
	0x90, 0x8f, 0xb3, 0x91, 0xe3, 0xb3, 0xa9, 0x7b, 0x30, 0xc9, 0x8e, 0x9f, 0x1c, 0x7c, 0xfe, 0x98,
	0x8c, 0x52, 0x57, 0x84, 0x2c, 0x70, 0xfd, 0x31, 0x09, 0xa3, 0xcb, 0xaf, 0xbb, 0x51, 0x5d, 0xbe,
	0xec, 0xde, 0xfe, 0x27, 0x00, 0x00, 0xff, 0xff, 0xa0, 0xf3, 0x64, 0x50, 0x71, 0x0a, 0x00, 0x00,
}

func (m *CampEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CampEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CampEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Project != nil {
		{
			size, err := m.Project.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvents(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Op != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.Op))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ContractAddress) > 0 {
		i -= len(m.ContractAddress)
		copy(dAtA[i:], m.ContractAddress)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.ContractAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SwapEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SwapEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SwapEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ChallengeId != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.ChallengeId))
		i--
		dAtA[i] = 0x58
	}
	if m.OutputLocked {
		i--
		if m.OutputLocked {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x50
	}
	if len(m.Trader) > 0 {
		i -= len(m.Trader)
		copy(dAtA[i:], m.Trader)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Trader)))
		i--
		dAtA[i] = 0x4a
	}
	{
		size := m.CurveCampAmount.Size()
		i -= size
		if _, err := m.CurveCampAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	{
		size := m.CurveQuoteAmount.Size()
		i -= size
		if _, err := m.CurveQuoteAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	{
		size := m.Price.Size()
		i -= size
		if _, err := m.Price.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	if m.OutputCoin != nil {
		{
			size, err := m.OutputCoin.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvents(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.InputCoin != nil {
		{
			size, err := m.InputCoin.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvents(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.Action) > 0 {
		i -= len(m.Action)
		copy(dAtA[i:], m.Action)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Action)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.CampDenom) > 0 {
		i -= len(m.CampDenom)
		copy(dAtA[i:], m.CampDenom)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.CampDenom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ContractAddress) > 0 {
		i -= len(m.ContractAddress)
		copy(dAtA[i:], m.ContractAddress)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.ContractAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ChallengeEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChallengeEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChallengeEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Challenge != nil {
		{
			size, err := m.Challenge.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvents(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Op != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.Op))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ContractAddress) > 0 {
		i -= len(m.ContractAddress)
		copy(dAtA[i:], m.ContractAddress)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.ContractAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ChallengeClaimedEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChallengeClaimedEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChallengeClaimedEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UnlockedCoins) > 0 {
		for iNdEx := len(m.UnlockedCoins) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.UnlockedCoins[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEvents(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Coins) > 0 {
		for iNdEx := len(m.Coins) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Coins[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEvents(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ChallengeId != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.ChallengeId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ContractAddress) > 0 {
		i -= len(m.ContractAddress)
		copy(dAtA[i:], m.ContractAddress)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.ContractAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CampBalanceUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CampBalanceUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CampBalanceUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ChallengeId != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.ChallengeId))
		i--
		dAtA[i] = 0x20
	}
	{
		size := m.Vote.Size()
		i -= size
		if _, err := m.Vote.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CampBalanceEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CampBalanceEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CampBalanceEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Updates) > 0 {
		for iNdEx := len(m.Updates) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Updates[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEvents(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ContractAddress) > 0 {
		i -= len(m.ContractAddress)
		copy(dAtA[i:], m.ContractAddress)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.ContractAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintEvents(dAtA []byte, offset int, v uint64) int {
	offset -= sovEvents(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CampEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ContractAddress)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.Op != 0 {
		n += 1 + sovEvents(uint64(m.Op))
	}
	if m.Project != nil {
		l = m.Project.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *SwapEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ContractAddress)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.CampDenom)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Action)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.InputCoin != nil {
		l = m.InputCoin.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.OutputCoin != nil {
		l = m.OutputCoin.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	l = m.Price.Size()
	n += 1 + l + sovEvents(uint64(l))
	l = m.CurveQuoteAmount.Size()
	n += 1 + l + sovEvents(uint64(l))
	l = m.CurveCampAmount.Size()
	n += 1 + l + sovEvents(uint64(l))
	l = len(m.Trader)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.OutputLocked {
		n += 2
	}
	if m.ChallengeId != 0 {
		n += 1 + sovEvents(uint64(m.ChallengeId))
	}
	return n
}

func (m *ChallengeEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ContractAddress)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.Op != 0 {
		n += 1 + sovEvents(uint64(m.Op))
	}
	if m.Challenge != nil {
		l = m.Challenge.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *ChallengeClaimedEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ContractAddress)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.ChallengeId != 0 {
		n += 1 + sovEvents(uint64(m.ChallengeId))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if len(m.Coins) > 0 {
		for _, e := range m.Coins {
			l = e.Size()
			n += 1 + l + sovEvents(uint64(l))
		}
	}
	if len(m.UnlockedCoins) > 0 {
		for _, e := range m.UnlockedCoins {
			l = e.Size()
			n += 1 + l + sovEvents(uint64(l))
		}
	}
	return n
}

func (m *CampBalanceUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovEvents(uint64(l))
	l = m.Vote.Size()
	n += 1 + l + sovEvents(uint64(l))
	if m.ChallengeId != 0 {
		n += 1 + sovEvents(uint64(m.ChallengeId))
	}
	return n
}

func (m *CampBalanceEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ContractAddress)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if len(m.Updates) > 0 {
		for _, e := range m.Updates {
			l = e.Size()
			n += 1 + l + sovEvents(uint64(l))
		}
	}
	return n
}

func sovEvents(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEvents(x uint64) (n int) {
	return sovEvents(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CampEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CampEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CampEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Op", wireType)
			}
			m.Op = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Op |= CampEventOps(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Project", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Project == nil {
				m.Project = &Project{}
			}
			if err := m.Project.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SwapEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SwapEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SwapEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CampDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CampDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Action = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InputCoin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.InputCoin == nil {
				m.InputCoin = &types.Coin{}
			}
			if err := m.InputCoin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutputCoin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OutputCoin == nil {
				m.OutputCoin = &types.Coin{}
			}
			if err := m.OutputCoin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Price.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurveQuoteAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CurveQuoteAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurveCampAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CurveCampAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Trader", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Trader = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutputLocked", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OutputLocked = bool(v != 0)
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChallengeId", wireType)
			}
			m.ChallengeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChallengeId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChallengeEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChallengeEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChallengeEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Op", wireType)
			}
			m.Op = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Op |= ChallengeEventOp(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Challenge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Challenge == nil {
				m.Challenge = &Challenge{}
			}
			if err := m.Challenge.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChallengeClaimedEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChallengeClaimedEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChallengeClaimedEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChallengeId", wireType)
			}
			m.ChallengeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChallengeId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coins", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Coins = append(m.Coins, &types.Coin{})
			if err := m.Coins[len(m.Coins)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnlockedCoins", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UnlockedCoins = append(m.UnlockedCoins, &types.Coin{})
			if err := m.UnlockedCoins[len(m.UnlockedCoins)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CampBalanceUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CampBalanceUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CampBalanceUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vote", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Vote.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChallengeId", wireType)
			}
			m.ChallengeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChallengeId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CampBalanceEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CampBalanceEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CampBalanceEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Updates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Updates = append(m.Updates, &CampBalanceUpdate{})
			if err := m.Updates[len(m.Updates)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEvents(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEvents
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEvents
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEvents
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEvents        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEvents          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEvents = fmt.Errorf("proto: unexpected end of group")
)
