// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: flux/indexer/provider/query.proto

package provider

import (
	context "context"
	fmt "fmt"
	types "github.com/FluxNFTLabs/sdk-go/chain/stream/types"
	_ "github.com/cosmos/cosmos-sdk/codec/types"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ProviderBlockRequest struct {
	Height uint64 `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
}

func (m *ProviderBlockRequest) Reset()         { *m = ProviderBlockRequest{} }
func (m *ProviderBlockRequest) String() string { return proto.CompactTextString(m) }
func (*ProviderBlockRequest) ProtoMessage()    {}
func (*ProviderBlockRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a1ce281b65734903, []int{0}
}
func (m *ProviderBlockRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProviderBlockRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProviderBlockRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProviderBlockRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProviderBlockRequest.Merge(m, src)
}
func (m *ProviderBlockRequest) XXX_Size() int {
	return m.Size()
}
func (m *ProviderBlockRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ProviderBlockRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ProviderBlockRequest proto.InternalMessageInfo

func (m *ProviderBlockRequest) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

type ProviderBlockResponse struct {
	Height       uint64 `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
	Time         uint64 `protobuf:"varint,2,opt,name=time,proto3" json:"time,omitempty"`
	Block        string `protobuf:"bytes,3,opt,name=block,proto3" json:"block,omitempty"`
	BlockResults string `protobuf:"bytes,4,opt,name=block_results,json=blockResults,proto3" json:"block_results,omitempty"`
	Validators   string `protobuf:"bytes,5,opt,name=validators,proto3" json:"validators,omitempty"`
}

func (m *ProviderBlockResponse) Reset()         { *m = ProviderBlockResponse{} }
func (m *ProviderBlockResponse) String() string { return proto.CompactTextString(m) }
func (*ProviderBlockResponse) ProtoMessage()    {}
func (*ProviderBlockResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a1ce281b65734903, []int{1}
}
func (m *ProviderBlockResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProviderBlockResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProviderBlockResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProviderBlockResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProviderBlockResponse.Merge(m, src)
}
func (m *ProviderBlockResponse) XXX_Size() int {
	return m.Size()
}
func (m *ProviderBlockResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ProviderBlockResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ProviderBlockResponse proto.InternalMessageInfo

func (m *ProviderBlockResponse) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *ProviderBlockResponse) GetTime() uint64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *ProviderBlockResponse) GetBlock() string {
	if m != nil {
		return m.Block
	}
	return ""
}

func (m *ProviderBlockResponse) GetBlockResults() string {
	if m != nil {
		return m.BlockResults
	}
	return ""
}

func (m *ProviderBlockResponse) GetValidators() string {
	if m != nil {
		return m.Validators
	}
	return ""
}

type ProviderEventsRequest struct {
	Height  uint64   `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
	Modules []string `protobuf:"bytes,3,rep,name=modules,proto3" json:"modules,omitempty"`
}

func (m *ProviderEventsRequest) Reset()         { *m = ProviderEventsRequest{} }
func (m *ProviderEventsRequest) String() string { return proto.CompactTextString(m) }
func (*ProviderEventsRequest) ProtoMessage()    {}
func (*ProviderEventsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a1ce281b65734903, []int{2}
}
func (m *ProviderEventsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProviderEventsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProviderEventsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProviderEventsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProviderEventsRequest.Merge(m, src)
}
func (m *ProviderEventsRequest) XXX_Size() int {
	return m.Size()
}
func (m *ProviderEventsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ProviderEventsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ProviderEventsRequest proto.InternalMessageInfo

func (m *ProviderEventsRequest) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *ProviderEventsRequest) GetModules() []string {
	if m != nil {
		return m.Modules
	}
	return nil
}

type ProviderEventsResponse struct {
	Height  uint64          `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
	Time    uint64          `protobuf:"varint,2,opt,name=time,proto3" json:"time,omitempty"`
	Modules []string        `protobuf:"bytes,3,rep,name=modules,proto3" json:"modules,omitempty"`
	Events  []*types.Events `protobuf:"bytes,4,rep,name=events,proto3" json:"events,omitempty"`
}

func (m *ProviderEventsResponse) Reset()         { *m = ProviderEventsResponse{} }
func (m *ProviderEventsResponse) String() string { return proto.CompactTextString(m) }
func (*ProviderEventsResponse) ProtoMessage()    {}
func (*ProviderEventsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a1ce281b65734903, []int{3}
}
func (m *ProviderEventsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProviderEventsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProviderEventsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProviderEventsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProviderEventsResponse.Merge(m, src)
}
func (m *ProviderEventsResponse) XXX_Size() int {
	return m.Size()
}
func (m *ProviderEventsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ProviderEventsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ProviderEventsResponse proto.InternalMessageInfo

func (m *ProviderEventsResponse) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *ProviderEventsResponse) GetTime() uint64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *ProviderEventsResponse) GetModules() []string {
	if m != nil {
		return m.Modules
	}
	return nil
}

func (m *ProviderEventsResponse) GetEvents() []*types.Events {
	if m != nil {
		return m.Events
	}
	return nil
}

func init() {
	proto.RegisterType((*ProviderBlockRequest)(nil), "flux.indexer.provider.ProviderBlockRequest")
	proto.RegisterType((*ProviderBlockResponse)(nil), "flux.indexer.provider.ProviderBlockResponse")
	proto.RegisterType((*ProviderEventsRequest)(nil), "flux.indexer.provider.ProviderEventsRequest")
	proto.RegisterType((*ProviderEventsResponse)(nil), "flux.indexer.provider.ProviderEventsResponse")
}

func init() { proto.RegisterFile("flux/indexer/provider/query.proto", fileDescriptor_a1ce281b65734903) }

var fileDescriptor_a1ce281b65734903 = []byte{
	// 530 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x94, 0x4f, 0x6b, 0x13, 0x41,
	0x18, 0xc6, 0x33, 0xcd, 0x1f, 0x9b, 0x69, 0xbd, 0xbc, 0xb4, 0x65, 0x8d, 0xb2, 0xc6, 0x15, 0x31,
	0x50, 0x33, 0x93, 0x26, 0x20, 0x3d, 0x79, 0x28, 0xd8, 0x22, 0xa8, 0x48, 0xf4, 0xe4, 0x45, 0x66,
	0xb3, 0xd3, 0x64, 0x70, 0xb3, 0x93, 0xee, 0xcc, 0x86, 0x48, 0xe9, 0xc5, 0x4f, 0x20, 0xd4, 0x83,
	0x27, 0x05, 0xef, 0x7e, 0x0f, 0x8f, 0x05, 0x2f, 0x1e, 0x25, 0xf1, 0x83, 0x48, 0x66, 0x27, 0xda,
	0xd6, 0xac, 0x0d, 0x82, 0xde, 0x76, 0x66, 0x9e, 0x99, 0xe7, 0xf7, 0xbe, 0xcf, 0xcb, 0xe2, 0x1b,
	0xfb, 0x61, 0x32, 0xa2, 0x22, 0x0a, 0xf8, 0x88, 0xc7, 0x74, 0x10, 0xcb, 0xa1, 0x08, 0x78, 0x4c,
	0x0f, 0x12, 0x1e, 0xbf, 0x22, 0x83, 0x58, 0x6a, 0x09, 0xeb, 0x53, 0x09, 0xb1, 0x12, 0x32, 0x93,
	0x54, 0xae, 0x74, 0xa5, 0xec, 0x86, 0x9c, 0x1a, 0x91, 0x9f, 0xec, 0x53, 0x16, 0xd9, 0x1b, 0x95,
	0x6b, 0xf6, 0x88, 0x0d, 0x04, 0x65, 0x51, 0x24, 0x35, 0xd3, 0x42, 0x46, 0xca, 0x9e, 0x5e, 0x37,
	0x96, 0x4a, 0xc7, 0x9c, 0xf5, 0xe9, 0x70, 0xcb, 0xe7, 0x9a, 0x6d, 0x9d, 0x36, 0xf4, 0x08, 0x5e,
	0x7b, 0x62, 0x5d, 0x76, 0x42, 0xd9, 0x79, 0xd9, 0xe6, 0x07, 0x09, 0x57, 0x1a, 0x36, 0x70, 0xa9,
	0xc7, 0x45, 0xb7, 0xa7, 0x1d, 0x54, 0x45, 0xb5, 0x42, 0xdb, 0xae, 0xbc, 0xf7, 0x08, 0xaf, 0x9f,
	0xbb, 0xa0, 0x06, 0x32, 0x52, 0x3c, 0xeb, 0x06, 0x00, 0x2e, 0x68, 0xd1, 0xe7, 0xce, 0x92, 0xd9,
	0x35, 0xdf, 0xb0, 0x86, 0x8b, 0xfe, 0xf4, 0xb2, 0x93, 0xaf, 0xa2, 0x5a, 0xb9, 0x9d, 0x2e, 0xe0,
	0x26, 0xbe, 0x6c, 0x3e, 0x5e, 0xc4, 0x5c, 0x25, 0xa1, 0x56, 0x4e, 0xc1, 0x9c, 0xae, 0xfa, 0xd6,
	0x67, 0xba, 0x07, 0x2e, 0xc6, 0x43, 0x16, 0x8a, 0x80, 0x69, 0x19, 0x2b, 0xa7, 0x68, 0x14, 0xa7,
	0x76, 0xbc, 0x07, 0xbf, 0xf8, 0xee, 0x0f, 0x79, 0xa4, 0xd5, 0x05, 0x15, 0x81, 0x83, 0x2f, 0xf5,
	0x65, 0x90, 0x84, 0x5c, 0x39, 0xf9, 0x6a, 0xbe, 0x56, 0x6e, 0xcf, 0x96, 0xde, 0x31, 0xc2, 0x1b,
	0xe7, 0xdf, 0xfa, 0x8b, 0x62, 0x33, 0x0d, 0xa0, 0x85, 0x4b, 0xdc, 0xbc, 0xeb, 0x14, 0xaa, 0xf9,
	0xda, 0x4a, 0xf3, 0x2a, 0x31, 0xf1, 0xa7, 0x71, 0x11, 0x1b, 0x17, 0xb1, 0xd6, 0x56, 0xda, 0x7c,
	0x57, 0xc4, 0xcb, 0x33, 0x2a, 0x78, 0x8b, 0xf0, 0xf2, 0x1e, 0xd7, 0x26, 0x09, 0xd8, 0x24, 0x73,
	0xa7, 0x87, 0xcc, 0x0b, 0xb8, 0x72, 0x67, 0x31, 0x71, 0x5a, 0xaf, 0x57, 0x7f, 0xfd, 0xe5, 0xfb,
	0xf1, 0xd2, 0x6d, 0xb8, 0x45, 0xe7, 0xcf, 0xb0, 0x89, 0x88, 0x1e, 0xa6, 0x5d, 0x38, 0x82, 0x0f,
	0x08, 0xaf, 0x3c, 0x35, 0x55, 0xfc, 0x73, 0xb2, 0x96, 0x21, 0xab, 0xc3, 0x66, 0x06, 0x59, 0xda,
	0xcc, 0xb3, 0x7c, 0x0d, 0x04, 0x1f, 0x11, 0x2e, 0xef, 0x71, 0x9d, 0xf6, 0x16, 0x2e, 0xb2, 0x3c,
	0x33, 0x49, 0x95, 0xfa, 0x82, 0x6a, 0x4b, 0xb8, 0x6d, 0x08, 0x9b, 0xd0, 0xc8, 0x20, 0x4c, 0x73,
	0xfd, 0x09, 0x47, 0x0f, 0xed, 0x78, 0x1c, 0xc1, 0x27, 0x84, 0x57, 0xd3, 0x36, 0xfe, 0x0f, 0xce,
	0x7b, 0x86, 0x73, 0x1b, 0xee, 0xfe, 0xb1, 0x93, 0x99, 0xb4, 0x0d, 0xb4, 0xf3, 0xe8, 0xf3, 0xd8,
	0x45, 0x27, 0x63, 0x17, 0x7d, 0x1b, 0xbb, 0xe8, 0xcd, 0xc4, 0xcd, 0x9d, 0x4c, 0xdc, 0xdc, 0xd7,
	0x89, 0x9b, 0x7b, 0xde, 0xea, 0x0a, 0xdd, 0x4b, 0x7c, 0xd2, 0x91, 0x7d, 0xba, 0x1b, 0x26, 0xa3,
	0xc7, 0xbb, 0xcf, 0x1e, 0x32, 0x5f, 0x19, 0xa7, 0x80, 0x76, 0x7a, 0x4c, 0x44, 0xbf, 0x19, 0xfa,
	0x25, 0xf3, 0x8b, 0x6a, 0xfd, 0x08, 0x00, 0x00, 0xff, 0xff, 0x0c, 0xdf, 0x29, 0xc0, 0x38, 0x05,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ProviderClient is the client API for Provider service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ProviderClient interface {
	GetBlock(ctx context.Context, in *ProviderBlockRequest, opts ...grpc.CallOption) (*ProviderBlockResponse, error)
	StreamBlock(ctx context.Context, in *ProviderBlockRequest, opts ...grpc.CallOption) (Provider_StreamBlockClient, error)
	GetEvents(ctx context.Context, in *ProviderEventsRequest, opts ...grpc.CallOption) (*ProviderEventsResponse, error)
	StreamEvents(ctx context.Context, in *ProviderEventsRequest, opts ...grpc.CallOption) (Provider_StreamEventsClient, error)
}

type providerClient struct {
	cc grpc1.ClientConn
}

func NewProviderClient(cc grpc1.ClientConn) ProviderClient {
	return &providerClient{cc}
}

func (c *providerClient) GetBlock(ctx context.Context, in *ProviderBlockRequest, opts ...grpc.CallOption) (*ProviderBlockResponse, error) {
	out := new(ProviderBlockResponse)
	err := c.cc.Invoke(ctx, "/flux.indexer.provider.Provider/GetBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerClient) StreamBlock(ctx context.Context, in *ProviderBlockRequest, opts ...grpc.CallOption) (Provider_StreamBlockClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Provider_serviceDesc.Streams[0], "/flux.indexer.provider.Provider/StreamBlock", opts...)
	if err != nil {
		return nil, err
	}
	x := &providerStreamBlockClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Provider_StreamBlockClient interface {
	Recv() (*ProviderBlockResponse, error)
	grpc.ClientStream
}

type providerStreamBlockClient struct {
	grpc.ClientStream
}

func (x *providerStreamBlockClient) Recv() (*ProviderBlockResponse, error) {
	m := new(ProviderBlockResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *providerClient) GetEvents(ctx context.Context, in *ProviderEventsRequest, opts ...grpc.CallOption) (*ProviderEventsResponse, error) {
	out := new(ProviderEventsResponse)
	err := c.cc.Invoke(ctx, "/flux.indexer.provider.Provider/GetEvents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerClient) StreamEvents(ctx context.Context, in *ProviderEventsRequest, opts ...grpc.CallOption) (Provider_StreamEventsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Provider_serviceDesc.Streams[1], "/flux.indexer.provider.Provider/StreamEvents", opts...)
	if err != nil {
		return nil, err
	}
	x := &providerStreamEventsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Provider_StreamEventsClient interface {
	Recv() (*ProviderEventsResponse, error)
	grpc.ClientStream
}

type providerStreamEventsClient struct {
	grpc.ClientStream
}

func (x *providerStreamEventsClient) Recv() (*ProviderEventsResponse, error) {
	m := new(ProviderEventsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ProviderServer is the server API for Provider service.
type ProviderServer interface {
	GetBlock(context.Context, *ProviderBlockRequest) (*ProviderBlockResponse, error)
	StreamBlock(*ProviderBlockRequest, Provider_StreamBlockServer) error
	GetEvents(context.Context, *ProviderEventsRequest) (*ProviderEventsResponse, error)
	StreamEvents(*ProviderEventsRequest, Provider_StreamEventsServer) error
}

// UnimplementedProviderServer can be embedded to have forward compatible implementations.
type UnimplementedProviderServer struct {
}

func (*UnimplementedProviderServer) GetBlock(ctx context.Context, req *ProviderBlockRequest) (*ProviderBlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlock not implemented")
}
func (*UnimplementedProviderServer) StreamBlock(req *ProviderBlockRequest, srv Provider_StreamBlockServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamBlock not implemented")
}
func (*UnimplementedProviderServer) GetEvents(ctx context.Context, req *ProviderEventsRequest) (*ProviderEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEvents not implemented")
}
func (*UnimplementedProviderServer) StreamEvents(req *ProviderEventsRequest, srv Provider_StreamEventsServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamEvents not implemented")
}

func RegisterProviderServer(s grpc1.Server, srv ProviderServer) {
	s.RegisterService(&_Provider_serviceDesc, srv)
}

func _Provider_GetBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProviderBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServer).GetBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flux.indexer.provider.Provider/GetBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServer).GetBlock(ctx, req.(*ProviderBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Provider_StreamBlock_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ProviderBlockRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ProviderServer).StreamBlock(m, &providerStreamBlockServer{stream})
}

type Provider_StreamBlockServer interface {
	Send(*ProviderBlockResponse) error
	grpc.ServerStream
}

type providerStreamBlockServer struct {
	grpc.ServerStream
}

func (x *providerStreamBlockServer) Send(m *ProviderBlockResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Provider_GetEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProviderEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServer).GetEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flux.indexer.provider.Provider/GetEvents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServer).GetEvents(ctx, req.(*ProviderEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Provider_StreamEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ProviderEventsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ProviderServer).StreamEvents(m, &providerStreamEventsServer{stream})
}

type Provider_StreamEventsServer interface {
	Send(*ProviderEventsResponse) error
	grpc.ServerStream
}

type providerStreamEventsServer struct {
	grpc.ServerStream
}

func (x *providerStreamEventsServer) Send(m *ProviderEventsResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _Provider_serviceDesc = grpc.ServiceDesc{
	ServiceName: "flux.indexer.provider.Provider",
	HandlerType: (*ProviderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBlock",
			Handler:    _Provider_GetBlock_Handler,
		},
		{
			MethodName: "GetEvents",
			Handler:    _Provider_GetEvents_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamBlock",
			Handler:       _Provider_StreamBlock_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamEvents",
			Handler:       _Provider_StreamEvents_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "flux/indexer/provider/query.proto",
}

func (m *ProviderBlockRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProviderBlockRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProviderBlockRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Height != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ProviderBlockResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProviderBlockResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProviderBlockResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Validators) > 0 {
		i -= len(m.Validators)
		copy(dAtA[i:], m.Validators)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Validators)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.BlockResults) > 0 {
		i -= len(m.BlockResults)
		copy(dAtA[i:], m.BlockResults)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.BlockResults)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Block) > 0 {
		i -= len(m.Block)
		copy(dAtA[i:], m.Block)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Block)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Time != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Time))
		i--
		dAtA[i] = 0x10
	}
	if m.Height != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ProviderEventsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProviderEventsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProviderEventsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Modules) > 0 {
		for iNdEx := len(m.Modules) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Modules[iNdEx])
			copy(dAtA[i:], m.Modules[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.Modules[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Height != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ProviderEventsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProviderEventsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProviderEventsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Events) > 0 {
		for iNdEx := len(m.Events) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Events[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Modules) > 0 {
		for iNdEx := len(m.Modules) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Modules[iNdEx])
			copy(dAtA[i:], m.Modules[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.Modules[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Time != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Time))
		i--
		dAtA[i] = 0x10
	}
	if m.Height != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ProviderBlockRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Height != 0 {
		n += 1 + sovQuery(uint64(m.Height))
	}
	return n
}

func (m *ProviderBlockResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Height != 0 {
		n += 1 + sovQuery(uint64(m.Height))
	}
	if m.Time != 0 {
		n += 1 + sovQuery(uint64(m.Time))
	}
	l = len(m.Block)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.BlockResults)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Validators)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *ProviderEventsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Height != 0 {
		n += 1 + sovQuery(uint64(m.Height))
	}
	if len(m.Modules) > 0 {
		for _, s := range m.Modules {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *ProviderEventsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Height != 0 {
		n += 1 + sovQuery(uint64(m.Height))
	}
	if m.Time != 0 {
		n += 1 + sovQuery(uint64(m.Time))
	}
	if len(m.Modules) > 0 {
		for _, s := range m.Modules {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if len(m.Events) > 0 {
		for _, e := range m.Events {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ProviderBlockRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProviderBlockRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProviderBlockRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProviderBlockResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProviderBlockResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProviderBlockResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Block", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Block = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockResults", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlockResults = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validators", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Validators = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProviderEventsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProviderEventsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProviderEventsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Modules", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Modules = append(m.Modules, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProviderEventsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProviderEventsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProviderEventsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Modules", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Modules = append(m.Modules, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Events", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Events = append(m.Events, &types.Events{})
			if err := m.Events[len(m.Events)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
