// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: flux/indexer/web3gw/query.proto

package web3gw

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type GetMetaDataRequest struct {
}

func (m *GetMetaDataRequest) Reset()         { *m = GetMetaDataRequest{} }
func (m *GetMetaDataRequest) String() string { return proto.CompactTextString(m) }
func (*GetMetaDataRequest) ProtoMessage()    {}
func (*GetMetaDataRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_eb8009f4ae0c1d99, []int{0}
}
func (m *GetMetaDataRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetMetaDataRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetMetaDataRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetMetaDataRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetMetaDataRequest.Merge(m, src)
}
func (m *GetMetaDataRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetMetaDataRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetMetaDataRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetMetaDataRequest proto.InternalMessageInfo

type GetMetaDataResponse struct {
	Address     string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Pubkey      []byte `protobuf:"bytes,2,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
	MaxGasLimit uint64 `protobuf:"varint,3,opt,name=max_gas_limit,json=maxGasLimit,proto3" json:"max_gas_limit,omitempty"`
	MaxGasPrice string `protobuf:"bytes,4,opt,name=max_gas_price,json=maxGasPrice,proto3" json:"max_gas_price,omitempty"`
}

func (m *GetMetaDataResponse) Reset()         { *m = GetMetaDataResponse{} }
func (m *GetMetaDataResponse) String() string { return proto.CompactTextString(m) }
func (*GetMetaDataResponse) ProtoMessage()    {}
func (*GetMetaDataResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_eb8009f4ae0c1d99, []int{1}
}
func (m *GetMetaDataResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetMetaDataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetMetaDataResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetMetaDataResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetMetaDataResponse.Merge(m, src)
}
func (m *GetMetaDataResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetMetaDataResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetMetaDataResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetMetaDataResponse proto.InternalMessageInfo

func (m *GetMetaDataResponse) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *GetMetaDataResponse) GetPubkey() []byte {
	if m != nil {
		return m.Pubkey
	}
	return nil
}

func (m *GetMetaDataResponse) GetMaxGasLimit() uint64 {
	if m != nil {
		return m.MaxGasLimit
	}
	return 0
}

func (m *GetMetaDataResponse) GetMaxGasPrice() string {
	if m != nil {
		return m.MaxGasPrice
	}
	return ""
}

type SignProtoRequest struct {
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *SignProtoRequest) Reset()         { *m = SignProtoRequest{} }
func (m *SignProtoRequest) String() string { return proto.CompactTextString(m) }
func (*SignProtoRequest) ProtoMessage()    {}
func (*SignProtoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_eb8009f4ae0c1d99, []int{2}
}
func (m *SignProtoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SignProtoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SignProtoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SignProtoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignProtoRequest.Merge(m, src)
}
func (m *SignProtoRequest) XXX_Size() int {
	return m.Size()
}
func (m *SignProtoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SignProtoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SignProtoRequest proto.InternalMessageInfo

func (m *SignProtoRequest) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type SignProtoResponse struct {
	Hash      []byte `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	Signature []byte `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *SignProtoResponse) Reset()         { *m = SignProtoResponse{} }
func (m *SignProtoResponse) String() string { return proto.CompactTextString(m) }
func (*SignProtoResponse) ProtoMessage()    {}
func (*SignProtoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_eb8009f4ae0c1d99, []int{3}
}
func (m *SignProtoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SignProtoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SignProtoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SignProtoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignProtoResponse.Merge(m, src)
}
func (m *SignProtoResponse) XXX_Size() int {
	return m.Size()
}
func (m *SignProtoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SignProtoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SignProtoResponse proto.InternalMessageInfo

func (m *SignProtoResponse) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *SignProtoResponse) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

type SignJSONRequest struct {
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *SignJSONRequest) Reset()         { *m = SignJSONRequest{} }
func (m *SignJSONRequest) String() string { return proto.CompactTextString(m) }
func (*SignJSONRequest) ProtoMessage()    {}
func (*SignJSONRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_eb8009f4ae0c1d99, []int{4}
}
func (m *SignJSONRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SignJSONRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SignJSONRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SignJSONRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignJSONRequest.Merge(m, src)
}
func (m *SignJSONRequest) XXX_Size() int {
	return m.Size()
}
func (m *SignJSONRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SignJSONRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SignJSONRequest proto.InternalMessageInfo

func (m *SignJSONRequest) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type SignJSONResponse struct {
	Hash      []byte `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	Signature []byte `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *SignJSONResponse) Reset()         { *m = SignJSONResponse{} }
func (m *SignJSONResponse) String() string { return proto.CompactTextString(m) }
func (*SignJSONResponse) ProtoMessage()    {}
func (*SignJSONResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_eb8009f4ae0c1d99, []int{5}
}
func (m *SignJSONResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SignJSONResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SignJSONResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SignJSONResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignJSONResponse.Merge(m, src)
}
func (m *SignJSONResponse) XXX_Size() int {
	return m.Size()
}
func (m *SignJSONResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SignJSONResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SignJSONResponse proto.InternalMessageInfo

func (m *SignJSONResponse) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *SignJSONResponse) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func init() {
	proto.RegisterType((*GetMetaDataRequest)(nil), "flux.indexer.web3gw.GetMetaDataRequest")
	proto.RegisterType((*GetMetaDataResponse)(nil), "flux.indexer.web3gw.GetMetaDataResponse")
	proto.RegisterType((*SignProtoRequest)(nil), "flux.indexer.web3gw.SignProtoRequest")
	proto.RegisterType((*SignProtoResponse)(nil), "flux.indexer.web3gw.SignProtoResponse")
	proto.RegisterType((*SignJSONRequest)(nil), "flux.indexer.web3gw.SignJSONRequest")
	proto.RegisterType((*SignJSONResponse)(nil), "flux.indexer.web3gw.SignJSONResponse")
}

func init() { proto.RegisterFile("flux/indexer/web3gw/query.proto", fileDescriptor_eb8009f4ae0c1d99) }

var fileDescriptor_eb8009f4ae0c1d99 = []byte{
	// 429 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x93, 0xdf, 0x6e, 0xd3, 0x30,
	0x18, 0xc5, 0xeb, 0x11, 0x15, 0xfa, 0x6d, 0x08, 0xe6, 0x4d, 0x28, 0x8a, 0x50, 0xa8, 0x22, 0x3a,
	0x72, 0x15, 0x0b, 0xfa, 0x06, 0x68, 0xac, 0x12, 0x8c, 0x31, 0x65, 0x48, 0x95, 0x76, 0x33, 0x9c,
	0xc6, 0x24, 0x16, 0xcd, 0x9f, 0xc5, 0x8e, 0x96, 0x3e, 0x05, 0xbc, 0x01, 0xaf, 0xc3, 0x65, 0x2f,
	0xb9, 0x44, 0xed, 0x8b, 0x20, 0x27, 0x2e, 0x84, 0x52, 0xa8, 0xb4, 0x9b, 0xe8, 0xf3, 0xc9, 0xcf,
	0xc7, 0x47, 0xc7, 0x09, 0x3c, 0xf9, 0x38, 0x2d, 0x2b, 0xc2, 0xd3, 0x90, 0x55, 0xac, 0x20, 0x37,
	0x2c, 0x18, 0x46, 0x37, 0xe4, 0xba, 0x64, 0xc5, 0xcc, 0xcb, 0x8b, 0x4c, 0x66, 0xf8, 0x40, 0x01,
	0x9e, 0x06, 0xbc, 0x06, 0xb0, 0x0e, 0xa3, 0x2c, 0xca, 0xea, 0xf7, 0x44, 0x4d, 0x0d, 0x6a, 0xed,
	0xd3, 0x84, 0xa7, 0x19, 0xa9, 0x9f, 0x8d, 0xe4, 0x1c, 0x02, 0x1e, 0x31, 0xf9, 0x96, 0x49, 0x7a,
	0x4c, 0x25, 0xf5, 0xd9, 0x75, 0xc9, 0x84, 0x74, 0x3e, 0x23, 0x38, 0xf8, 0x43, 0x16, 0x79, 0x96,
	0x0a, 0x86, 0x4d, 0xb8, 0x4b, 0xc3, 0xb0, 0x60, 0x42, 0x98, 0xa8, 0x8f, 0xdc, 0x9e, 0xbf, 0x5a,
	0xe2, 0x47, 0xd0, 0xcd, 0xcb, 0xe0, 0x13, 0x9b, 0x99, 0x3b, 0x7d, 0xe4, 0xee, 0xf9, 0x7a, 0x85,
	0x1d, 0xb8, 0x9f, 0xd0, 0xea, 0x2a, 0xa2, 0xe2, 0x6a, 0xca, 0x13, 0x2e, 0xcd, 0x3b, 0x7d, 0xe4,
	0x1a, 0xfe, 0x6e, 0x42, 0xab, 0x11, 0x15, 0xa7, 0x4a, 0x6a, 0x33, 0x79, 0xc1, 0x27, 0xcc, 0x34,
	0x6a, 0x6f, 0xcd, 0x9c, 0x2b, 0xc9, 0x39, 0x82, 0x87, 0x17, 0x3c, 0x4a, 0xcf, 0x55, 0x68, 0x9d,
	0x12, 0x63, 0x30, 0x42, 0x2a, 0x69, 0x1d, 0x65, 0xcf, 0xaf, 0x67, 0xe7, 0x15, 0xec, 0xb7, 0x38,
	0x1d, 0x1b, 0x83, 0x11, 0x53, 0x11, 0xaf, 0x40, 0x35, 0xe3, 0xc7, 0xd0, 0x13, 0x3c, 0x4a, 0xa9,
	0x2c, 0x0b, 0xa6, 0x33, 0xff, 0x16, 0x9c, 0x01, 0x3c, 0x50, 0x36, 0xaf, 0x2f, 0xde, 0x9d, 0xfd,
	0xef, 0xb4, 0xe3, 0x26, 0x55, 0x83, 0xdd, 0xf6, 0xb0, 0x17, 0x5f, 0x77, 0xa0, 0x3b, 0x66, 0xc1,
	0x70, 0x34, 0xc6, 0x1f, 0x60, 0xb7, 0xd5, 0x3b, 0x7e, 0xe6, 0x6d, 0xb8, 0x5c, 0xef, 0xef, 0x0b,
	0xb3, 0xdc, 0xed, 0xa0, 0x8e, 0x77, 0x09, 0xbd, 0x5f, 0x05, 0xe1, 0xc1, 0xc6, 0x6d, 0xeb, 0x45,
	0x5b, 0x47, 0xdb, 0x30, 0xed, 0x3d, 0x86, 0x7b, 0xab, 0x3a, 0xf0, 0xd3, 0x7f, 0xee, 0x69, 0x95,
	0x6a, 0x0d, 0xb6, 0x50, 0x8d, 0xf1, 0xcb, 0x37, 0xdf, 0x16, 0x36, 0x9a, 0x2f, 0x6c, 0xf4, 0x63,
	0x61, 0xa3, 0x2f, 0x4b, 0xbb, 0x33, 0x5f, 0xda, 0x9d, 0xef, 0x4b, 0xbb, 0x73, 0xf9, 0x3c, 0xe2,
	0x32, 0x2e, 0x03, 0x6f, 0x92, 0x25, 0xe4, 0x64, 0x5a, 0x56, 0x67, 0x27, 0xef, 0x4f, 0x69, 0x20,
	0x88, 0xb2, 0x0d, 0xc9, 0x24, 0xa6, 0x3c, 0x5d, 0xfb, 0x79, 0x82, 0x6e, 0xfd, 0xe5, 0x0f, 0x7f,
	0x06, 0x00, 0x00, 0xff, 0xff, 0xe3, 0x30, 0x21, 0x87, 0x5a, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Web3GWClient is the client API for Web3GW service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type Web3GWClient interface {
	GetMetaData(ctx context.Context, in *GetMetaDataRequest, opts ...grpc.CallOption) (*GetMetaDataResponse, error)
	SignProto(ctx context.Context, in *SignProtoRequest, opts ...grpc.CallOption) (*SignProtoResponse, error)
	SignJSON(ctx context.Context, in *SignJSONRequest, opts ...grpc.CallOption) (*SignJSONResponse, error)
}

type web3GWClient struct {
	cc grpc1.ClientConn
}

func NewWeb3GWClient(cc grpc1.ClientConn) Web3GWClient {
	return &web3GWClient{cc}
}

func (c *web3GWClient) GetMetaData(ctx context.Context, in *GetMetaDataRequest, opts ...grpc.CallOption) (*GetMetaDataResponse, error) {
	out := new(GetMetaDataResponse)
	err := c.cc.Invoke(ctx, "/flux.indexer.web3gw.Web3GW/GetMetaData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *web3GWClient) SignProto(ctx context.Context, in *SignProtoRequest, opts ...grpc.CallOption) (*SignProtoResponse, error) {
	out := new(SignProtoResponse)
	err := c.cc.Invoke(ctx, "/flux.indexer.web3gw.Web3GW/SignProto", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *web3GWClient) SignJSON(ctx context.Context, in *SignJSONRequest, opts ...grpc.CallOption) (*SignJSONResponse, error) {
	out := new(SignJSONResponse)
	err := c.cc.Invoke(ctx, "/flux.indexer.web3gw.Web3GW/SignJSON", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Web3GWServer is the server API for Web3GW service.
type Web3GWServer interface {
	GetMetaData(context.Context, *GetMetaDataRequest) (*GetMetaDataResponse, error)
	SignProto(context.Context, *SignProtoRequest) (*SignProtoResponse, error)
	SignJSON(context.Context, *SignJSONRequest) (*SignJSONResponse, error)
}

// UnimplementedWeb3GWServer can be embedded to have forward compatible implementations.
type UnimplementedWeb3GWServer struct {
}

func (*UnimplementedWeb3GWServer) GetMetaData(ctx context.Context, req *GetMetaDataRequest) (*GetMetaDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMetaData not implemented")
}
func (*UnimplementedWeb3GWServer) SignProto(ctx context.Context, req *SignProtoRequest) (*SignProtoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignProto not implemented")
}
func (*UnimplementedWeb3GWServer) SignJSON(ctx context.Context, req *SignJSONRequest) (*SignJSONResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignJSON not implemented")
}

func RegisterWeb3GWServer(s grpc1.Server, srv Web3GWServer) {
	s.RegisterService(&_Web3GW_serviceDesc, srv)
}

func _Web3GW_GetMetaData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMetaDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Web3GWServer).GetMetaData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flux.indexer.web3gw.Web3GW/GetMetaData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Web3GWServer).GetMetaData(ctx, req.(*GetMetaDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Web3GW_SignProto_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignProtoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Web3GWServer).SignProto(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flux.indexer.web3gw.Web3GW/SignProto",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Web3GWServer).SignProto(ctx, req.(*SignProtoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Web3GW_SignJSON_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignJSONRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Web3GWServer).SignJSON(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flux.indexer.web3gw.Web3GW/SignJSON",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Web3GWServer).SignJSON(ctx, req.(*SignJSONRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Web3GW_serviceDesc = grpc.ServiceDesc{
	ServiceName: "flux.indexer.web3gw.Web3GW",
	HandlerType: (*Web3GWServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMetaData",
			Handler:    _Web3GW_GetMetaData_Handler,
		},
		{
			MethodName: "SignProto",
			Handler:    _Web3GW_SignProto_Handler,
		},
		{
			MethodName: "SignJSON",
			Handler:    _Web3GW_SignJSON_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "flux/indexer/web3gw/query.proto",
}

func (m *GetMetaDataRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetMetaDataRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetMetaDataRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GetMetaDataResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetMetaDataResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetMetaDataResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MaxGasPrice) > 0 {
		i -= len(m.MaxGasPrice)
		copy(dAtA[i:], m.MaxGasPrice)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.MaxGasPrice)))
		i--
		dAtA[i] = 0x22
	}
	if m.MaxGasLimit != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.MaxGasLimit))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Pubkey) > 0 {
		i -= len(m.Pubkey)
		copy(dAtA[i:], m.Pubkey)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Pubkey)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SignProtoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SignProtoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SignProtoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SignProtoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SignProtoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SignProtoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Hash) > 0 {
		i -= len(m.Hash)
		copy(dAtA[i:], m.Hash)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Hash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SignJSONRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SignJSONRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SignJSONRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SignJSONResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SignJSONResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SignJSONResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Hash) > 0 {
		i -= len(m.Hash)
		copy(dAtA[i:], m.Hash)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Hash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GetMetaDataRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetMetaDataResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Pubkey)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.MaxGasLimit != 0 {
		n += 1 + sovQuery(uint64(m.MaxGasLimit))
	}
	l = len(m.MaxGasPrice)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *SignProtoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *SignProtoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *SignJSONRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *SignJSONResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GetMetaDataRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetMetaDataRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetMetaDataRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetMetaDataResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetMetaDataResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetMetaDataResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pubkey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pubkey = append(m.Pubkey[:0], dAtA[iNdEx:postIndex]...)
			if m.Pubkey == nil {
				m.Pubkey = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxGasLimit", wireType)
			}
			m.MaxGasLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxGasLimit |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxGasPrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MaxGasPrice = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SignProtoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SignProtoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SignProtoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SignProtoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SignProtoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SignProtoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = append(m.Hash[:0], dAtA[iNdEx:postIndex]...)
			if m.Hash == nil {
				m.Hash = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SignJSONRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SignJSONRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SignJSONRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SignJSONResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SignJSONResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SignJSONResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = append(m.Hash[:0], dAtA[iNdEx:postIndex]...)
			if m.Hash == nil {
				m.Hash = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
