// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: flux/indexer/explorer/query.proto

package explorer

import (
	context "context"
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	types1 "github.com/FluxNFTLabs/sdk-go/chain/modules/astromesh/types"
	types "github.com/FluxNFTLabs/sdk-go/chain/modules/evm/types"
	types2 "github.com/FluxNFTLabs/sdk-go/chain/modules/strategy/types"
	types4 "github.com/FluxNFTLabs/sdk-go/chain/modules/svm/types"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/codec/types"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	types3 "github.com/cosmos/gogoproto/types"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type OrderDirection int32

const (
	OrderDirection_Long  OrderDirection = 0
	OrderDirection_Short OrderDirection = 1
)

var OrderDirection_name = map[int32]string{
	0: "Long",
	1: "Short",
}

var OrderDirection_value = map[string]int32{
	"Long":  0,
	"Short": 1,
}

func (x OrderDirection) String() string {
	return proto.EnumName(OrderDirection_name, int32(x))
}

func (OrderDirection) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_55f537fd2a78a541, []int{0}
}

type ListEvmContractsRequest struct {
	// owner of the contract to filter
	Address    string             `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *ListEvmContractsRequest) Reset()         { *m = ListEvmContractsRequest{} }
func (m *ListEvmContractsRequest) String() string { return proto.CompactTextString(m) }
func (*ListEvmContractsRequest) ProtoMessage()    {}
func (*ListEvmContractsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_55f537fd2a78a541, []int{0}
}
func (m *ListEvmContractsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListEvmContractsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListEvmContractsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListEvmContractsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListEvmContractsRequest.Merge(m, src)
}
func (m *ListEvmContractsRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListEvmContractsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListEvmContractsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListEvmContractsRequest proto.InternalMessageInfo

func (m *ListEvmContractsRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *ListEvmContractsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type ListEvmContractsResponse struct {
	Contracts  []*types.ContractInfo `protobuf:"bytes,1,rep,name=contracts,proto3" json:"contracts,omitempty"`
	Pagination *query.PageResponse   `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *ListEvmContractsResponse) Reset()         { *m = ListEvmContractsResponse{} }
func (m *ListEvmContractsResponse) String() string { return proto.CompactTextString(m) }
func (*ListEvmContractsResponse) ProtoMessage()    {}
func (*ListEvmContractsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_55f537fd2a78a541, []int{1}
}
func (m *ListEvmContractsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListEvmContractsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListEvmContractsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListEvmContractsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListEvmContractsResponse.Merge(m, src)
}
func (m *ListEvmContractsResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListEvmContractsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListEvmContractsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListEvmContractsResponse proto.InternalMessageInfo

func (m *ListEvmContractsResponse) GetContracts() []*types.ContractInfo {
	if m != nil {
		return m.Contracts
	}
	return nil
}

func (m *ListEvmContractsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type BalancesRequest struct {
	Address    string             `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *BalancesRequest) Reset()         { *m = BalancesRequest{} }
func (m *BalancesRequest) String() string { return proto.CompactTextString(m) }
func (*BalancesRequest) ProtoMessage()    {}
func (*BalancesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_55f537fd2a78a541, []int{2}
}
func (m *BalancesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BalancesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BalancesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BalancesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BalancesRequest.Merge(m, src)
}
func (m *BalancesRequest) XXX_Size() int {
	return m.Size()
}
func (m *BalancesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BalancesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BalancesRequest proto.InternalMessageInfo

func (m *BalancesRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *BalancesRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type BalanceInfo struct {
	Acc           string                `protobuf:"bytes,1,opt,name=acc,proto3" json:"acc,omitempty"`
	Plane         types1.Plane          `protobuf:"varint,2,opt,name=plane,proto3,enum=flux.astromesh.v1beta1.Plane" json:"plane,omitempty"`
	Denom         string                `protobuf:"bytes,3,opt,name=denom,proto3" json:"denom,omitempty"`
	Amount        cosmossdk_io_math.Int `protobuf:"bytes,4,opt,name=amount,proto3,customtype=cosmossdk.io/math.Int" json:"amount"`
	UpdatedHeight uint64                `protobuf:"varint,5,opt,name=updated_height,json=updatedHeight,proto3" json:"updated_height,omitempty" bson:"updated_height"`
	UpdatedTime   uint64                `protobuf:"varint,6,opt,name=updated_time,json=updatedTime,proto3" json:"updated_time,omitempty" bson:"updated_time"`
	DenomMetadata *types1.TokenMetadata `protobuf:"bytes,7,opt,name=denom_metadata,json=denomMetadata,proto3" json:"denom_metadata,omitempty" bson:"denom_metadata,omitempty"`
}

func (m *BalanceInfo) Reset()         { *m = BalanceInfo{} }
func (m *BalanceInfo) String() string { return proto.CompactTextString(m) }
func (*BalanceInfo) ProtoMessage()    {}
func (*BalanceInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_55f537fd2a78a541, []int{3}
}
func (m *BalanceInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BalanceInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BalanceInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BalanceInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BalanceInfo.Merge(m, src)
}
func (m *BalanceInfo) XXX_Size() int {
	return m.Size()
}
func (m *BalanceInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_BalanceInfo.DiscardUnknown(m)
}

var xxx_messageInfo_BalanceInfo proto.InternalMessageInfo

func (m *BalanceInfo) GetAcc() string {
	if m != nil {
		return m.Acc
	}
	return ""
}

func (m *BalanceInfo) GetPlane() types1.Plane {
	if m != nil {
		return m.Plane
	}
	return types1.Plane_COSMOS
}

func (m *BalanceInfo) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *BalanceInfo) GetUpdatedHeight() uint64 {
	if m != nil {
		return m.UpdatedHeight
	}
	return 0
}

func (m *BalanceInfo) GetUpdatedTime() uint64 {
	if m != nil {
		return m.UpdatedTime
	}
	return 0
}

func (m *BalanceInfo) GetDenomMetadata() *types1.TokenMetadata {
	if m != nil {
		return m.DenomMetadata
	}
	return nil
}

type BalancesResponse struct {
	Balances   []*BalanceInfo      `protobuf:"bytes,1,rep,name=balances,proto3" json:"balances,omitempty"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *BalancesResponse) Reset()         { *m = BalancesResponse{} }
func (m *BalancesResponse) String() string { return proto.CompactTextString(m) }
func (*BalancesResponse) ProtoMessage()    {}
func (*BalancesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_55f537fd2a78a541, []int{4}
}
func (m *BalancesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BalancesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BalancesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BalancesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BalancesResponse.Merge(m, src)
}
func (m *BalancesResponse) XXX_Size() int {
	return m.Size()
}
func (m *BalancesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_BalancesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_BalancesResponse proto.InternalMessageInfo

func (m *BalancesResponse) GetBalances() []*BalanceInfo {
	if m != nil {
		return m.Balances
	}
	return nil
}

func (m *BalancesResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// strategy type filter, could be generic strategies, intent solver or cron bot
type TypeFilter struct {
	Value types2.StrategyType `protobuf:"varint,1,opt,name=value,proto3,enum=flux.strategy.v1beta1.StrategyType" json:"value,omitempty"`
}

func (m *TypeFilter) Reset()         { *m = TypeFilter{} }
func (m *TypeFilter) String() string { return proto.CompactTextString(m) }
func (*TypeFilter) ProtoMessage()    {}
func (*TypeFilter) Descriptor() ([]byte, []int) {
	return fileDescriptor_55f537fd2a78a541, []int{5}
}
func (m *TypeFilter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TypeFilter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TypeFilter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TypeFilter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TypeFilter.Merge(m, src)
}
func (m *TypeFilter) XXX_Size() int {
	return m.Size()
}
func (m *TypeFilter) XXX_DiscardUnknown() {
	xxx_messageInfo_TypeFilter.DiscardUnknown(m)
}

var xxx_messageInfo_TypeFilter proto.InternalMessageInfo

func (m *TypeFilter) GetValue() types2.StrategyType {
	if m != nil {
		return m.Value
	}
	return types2.StrategyType_STRATEGY
}

type SupportedAppFilter struct {
	Plane           types1.Plane      `protobuf:"varint,1,opt,name=plane,proto3,enum=flux.astromesh.v1beta1.Plane" json:"plane,omitempty"`
	ContractAddress string            `protobuf:"bytes,2,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`
	Verified        *types3.BoolValue `protobuf:"bytes,3,opt,name=verified,proto3" json:"verified,omitempty"`
}

func (m *SupportedAppFilter) Reset()         { *m = SupportedAppFilter{} }
func (m *SupportedAppFilter) String() string { return proto.CompactTextString(m) }
func (*SupportedAppFilter) ProtoMessage()    {}
func (*SupportedAppFilter) Descriptor() ([]byte, []int) {
	return fileDescriptor_55f537fd2a78a541, []int{6}
}
func (m *SupportedAppFilter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SupportedAppFilter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SupportedAppFilter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SupportedAppFilter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SupportedAppFilter.Merge(m, src)
}
func (m *SupportedAppFilter) XXX_Size() int {
	return m.Size()
}
func (m *SupportedAppFilter) XXX_DiscardUnknown() {
	xxx_messageInfo_SupportedAppFilter.DiscardUnknown(m)
}

var xxx_messageInfo_SupportedAppFilter proto.InternalMessageInfo

func (m *SupportedAppFilter) GetPlane() types1.Plane {
	if m != nil {
		return m.Plane
	}
	return types1.Plane_COSMOS
}

func (m *SupportedAppFilter) GetContractAddress() string {
	if m != nil {
		return m.ContractAddress
	}
	return ""
}

func (m *SupportedAppFilter) GetVerified() *types3.BoolValue {
	if m != nil {
		return m.Verified
	}
	return nil
}

// ListStrategiesRequest is a query type to list out existing on-chain strategies
// with some filters For unused fields, just leave them empty
type ListStrategiesRequest struct {
	// use pagination to limit the output item list
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
	Type       *TypeFilter        `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	// strategy id to filter, this is useful to get info of a single strategy
	Id string `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	// strategy enable/disable status to filter
	Enabled *types3.BoolValue `protobuf:"bytes,4,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// tags to filter
	Tags []string `protobuf:"bytes,5,rep,name=tags,proto3" json:"tags,omitempty"`
	// filter by supported app (filter single app for now)
	SupportedApp *SupportedAppFilter `protobuf:"bytes,6,opt,name=supported_app,json=supportedApp,proto3" json:"supported_app,omitempty"`
}

func (m *ListStrategiesRequest) Reset()         { *m = ListStrategiesRequest{} }
func (m *ListStrategiesRequest) String() string { return proto.CompactTextString(m) }
func (*ListStrategiesRequest) ProtoMessage()    {}
func (*ListStrategiesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_55f537fd2a78a541, []int{7}
}
func (m *ListStrategiesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListStrategiesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListStrategiesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListStrategiesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListStrategiesRequest.Merge(m, src)
}
func (m *ListStrategiesRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListStrategiesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListStrategiesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListStrategiesRequest proto.InternalMessageInfo

func (m *ListStrategiesRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func (m *ListStrategiesRequest) GetType() *TypeFilter {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *ListStrategiesRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ListStrategiesRequest) GetEnabled() *types3.BoolValue {
	if m != nil {
		return m.Enabled
	}
	return nil
}

func (m *ListStrategiesRequest) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *ListStrategiesRequest) GetSupportedApp() *SupportedAppFilter {
	if m != nil {
		return m.SupportedApp
	}
	return nil
}

type ListStrategiesResponse struct {
	// pagination response shows which page the strategy list is at
	Pagination *query.PageResponse `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
	// strategies shows existing strategies after applied the filters in
	// ListStrategiesRequest
	Strategies []*types2.Strategy `protobuf:"bytes,2,rep,name=strategies,proto3" json:"strategies,omitempty"`
}

func (m *ListStrategiesResponse) Reset()         { *m = ListStrategiesResponse{} }
func (m *ListStrategiesResponse) String() string { return proto.CompactTextString(m) }
func (*ListStrategiesResponse) ProtoMessage()    {}
func (*ListStrategiesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_55f537fd2a78a541, []int{8}
}
func (m *ListStrategiesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListStrategiesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListStrategiesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListStrategiesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListStrategiesResponse.Merge(m, src)
}
func (m *ListStrategiesResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListStrategiesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListStrategiesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListStrategiesResponse proto.InternalMessageInfo

func (m *ListStrategiesResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func (m *ListStrategiesResponse) GetStrategies() []*types2.Strategy {
	if m != nil {
		return m.Strategies
	}
	return nil
}

// List strategies by an owner with some additional filters
type ListStrategiesByOwnerRequest struct {
	// use pagination to limit the output item list
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
	// owner of the strategy, required by this query
	Owner string `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
	// strategy type, could be generic strategies, intent solver or cron bot
	Type *TypeFilter `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	// strategy enable/disable status to filter
	Enabled *types3.BoolValue `protobuf:"bytes,4,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// tags to filter
	Tags []string `protobuf:"bytes,5,rep,name=tags,proto3" json:"tags,omitempty"`
	// filter by supported app (filter single app for now)
	SupportedApp *SupportedAppFilter `protobuf:"bytes,6,opt,name=supported_app,json=supportedApp,proto3" json:"supported_app,omitempty"`
}

func (m *ListStrategiesByOwnerRequest) Reset()         { *m = ListStrategiesByOwnerRequest{} }
func (m *ListStrategiesByOwnerRequest) String() string { return proto.CompactTextString(m) }
func (*ListStrategiesByOwnerRequest) ProtoMessage()    {}
func (*ListStrategiesByOwnerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_55f537fd2a78a541, []int{9}
}
func (m *ListStrategiesByOwnerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListStrategiesByOwnerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListStrategiesByOwnerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListStrategiesByOwnerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListStrategiesByOwnerRequest.Merge(m, src)
}
func (m *ListStrategiesByOwnerRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListStrategiesByOwnerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListStrategiesByOwnerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListStrategiesByOwnerRequest proto.InternalMessageInfo

func (m *ListStrategiesByOwnerRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func (m *ListStrategiesByOwnerRequest) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *ListStrategiesByOwnerRequest) GetType() *TypeFilter {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *ListStrategiesByOwnerRequest) GetEnabled() *types3.BoolValue {
	if m != nil {
		return m.Enabled
	}
	return nil
}

func (m *ListStrategiesByOwnerRequest) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *ListStrategiesByOwnerRequest) GetSupportedApp() *SupportedAppFilter {
	if m != nil {
		return m.SupportedApp
	}
	return nil
}

type Pool struct {
	Exchange        string                 `protobuf:"bytes,1,opt,name=exchange,proto3" json:"exchange,omitempty" bson:"exchange"`
	Plane           types1.Plane           `protobuf:"varint,2,opt,name=plane,proto3,enum=flux.astromesh.v1beta1.Plane" json:"plane,omitempty" bson:"plane"`
	PoolId          string                 `protobuf:"bytes,3,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty" bson:"pool_id"`
	Token0Volume    *cosmossdk_io_math.Int `protobuf:"bytes,4,opt,name=token0_volume,json=token0Volume,proto3,customtype=cosmossdk.io/math.Int" json:"token0_volume,omitempty" bson:"token0_volume"`
	Token1Volume    *cosmossdk_io_math.Int `protobuf:"bytes,5,opt,name=token1_volume,json=token1Volume,proto3,customtype=cosmossdk.io/math.Int" json:"token1_volume,omitempty" bson:"token1_volume"`
	Token0Liquidity *cosmossdk_io_math.Int `protobuf:"bytes,6,opt,name=token0_liquidity,json=token0Liquidity,proto3,customtype=cosmossdk.io/math.Int" json:"token0_liquidity,omitempty" bson:"token0_liquidity"`
	Token1Liquidity *cosmossdk_io_math.Int `protobuf:"bytes,7,opt,name=token1_liquidity,json=token1Liquidity,proto3,customtype=cosmossdk.io/math.Int" json:"token1_liquidity,omitempty" bson:"token1_liquidity"`
	SwapCount       int64                  `protobuf:"varint,8,opt,name=swap_count,json=swapCount,proto3" json:"swap_count,omitempty" bson:"swap_count"`
}

func (m *Pool) Reset()         { *m = Pool{} }
func (m *Pool) String() string { return proto.CompactTextString(m) }
func (*Pool) ProtoMessage()    {}
func (*Pool) Descriptor() ([]byte, []int) {
	return fileDescriptor_55f537fd2a78a541, []int{10}
}
func (m *Pool) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Pool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Pool.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Pool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Pool.Merge(m, src)
}
func (m *Pool) XXX_Size() int {
	return m.Size()
}
func (m *Pool) XXX_DiscardUnknown() {
	xxx_messageInfo_Pool.DiscardUnknown(m)
}

var xxx_messageInfo_Pool proto.InternalMessageInfo

func (m *Pool) GetExchange() string {
	if m != nil {
		return m.Exchange
	}
	return ""
}

func (m *Pool) GetPlane() types1.Plane {
	if m != nil {
		return m.Plane
	}
	return types1.Plane_COSMOS
}

func (m *Pool) GetPoolId() string {
	if m != nil {
		return m.PoolId
	}
	return ""
}

func (m *Pool) GetSwapCount() int64 {
	if m != nil {
		return m.SwapCount
	}
	return 0
}

type Metrics struct {
	TxCount    int64   `protobuf:"varint,1,opt,name=tx_count,json=txCount,proto3" json:"tx_count,omitempty" bson:"tx_count"`
	BlockCount int64   `protobuf:"varint,2,opt,name=block_count,json=blockCount,proto3" json:"block_count,omitempty" bson:"block_count"`
	Pools      []*Pool `protobuf:"bytes,3,rep,name=pools,proto3" json:"pools,omitempty" bson:"pools"`
}

func (m *Metrics) Reset()         { *m = Metrics{} }
func (m *Metrics) String() string { return proto.CompactTextString(m) }
func (*Metrics) ProtoMessage()    {}
func (*Metrics) Descriptor() ([]byte, []int) {
	return fileDescriptor_55f537fd2a78a541, []int{11}
}
func (m *Metrics) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Metrics) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Metrics.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Metrics) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Metrics.Merge(m, src)
}
func (m *Metrics) XXX_Size() int {
	return m.Size()
}
func (m *Metrics) XXX_DiscardUnknown() {
	xxx_messageInfo_Metrics.DiscardUnknown(m)
}

var xxx_messageInfo_Metrics proto.InternalMessageInfo

func (m *Metrics) GetTxCount() int64 {
	if m != nil {
		return m.TxCount
	}
	return 0
}

func (m *Metrics) GetBlockCount() int64 {
	if m != nil {
		return m.BlockCount
	}
	return 0
}

func (m *Metrics) GetPools() []*Pool {
	if m != nil {
		return m.Pools
	}
	return nil
}

type GetMetricsRequest struct {
}

func (m *GetMetricsRequest) Reset()         { *m = GetMetricsRequest{} }
func (m *GetMetricsRequest) String() string { return proto.CompactTextString(m) }
func (*GetMetricsRequest) ProtoMessage()    {}
func (*GetMetricsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_55f537fd2a78a541, []int{12}
}
func (m *GetMetricsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetMetricsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetMetricsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetMetricsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetMetricsRequest.Merge(m, src)
}
func (m *GetMetricsRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetMetricsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetMetricsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetMetricsRequest proto.InternalMessageInfo

type GetMetricsResponse struct {
	Data *Metrics `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *GetMetricsResponse) Reset()         { *m = GetMetricsResponse{} }
func (m *GetMetricsResponse) String() string { return proto.CompactTextString(m) }
func (*GetMetricsResponse) ProtoMessage()    {}
func (*GetMetricsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_55f537fd2a78a541, []int{13}
}
func (m *GetMetricsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetMetricsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetMetricsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetMetricsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetMetricsResponse.Merge(m, src)
}
func (m *GetMetricsResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetMetricsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetMetricsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetMetricsResponse proto.InternalMessageInfo

func (m *GetMetricsResponse) GetData() *Metrics {
	if m != nil {
		return m.Data
	}
	return nil
}

type StreamBalanceResponse struct {
	Height   uint64         `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
	Deleted  uint64         `protobuf:"varint,2,opt,name=deleted,proto3" json:"deleted,omitempty"`
	Balances []*BalanceInfo `protobuf:"bytes,3,rep,name=balances,proto3" json:"balances,omitempty"`
}

func (m *StreamBalanceResponse) Reset()         { *m = StreamBalanceResponse{} }
func (m *StreamBalanceResponse) String() string { return proto.CompactTextString(m) }
func (*StreamBalanceResponse) ProtoMessage()    {}
func (*StreamBalanceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_55f537fd2a78a541, []int{14}
}
func (m *StreamBalanceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StreamBalanceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StreamBalanceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StreamBalanceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamBalanceResponse.Merge(m, src)
}
func (m *StreamBalanceResponse) XXX_Size() int {
	return m.Size()
}
func (m *StreamBalanceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamBalanceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_StreamBalanceResponse proto.InternalMessageInfo

func (m *StreamBalanceResponse) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *StreamBalanceResponse) GetDeleted() uint64 {
	if m != nil {
		return m.Deleted
	}
	return 0
}

func (m *StreamBalanceResponse) GetBalances() []*BalanceInfo {
	if m != nil {
		return m.Balances
	}
	return nil
}

type ListStrategyTriggerByIdRequest struct {
	// Use pagination to limit the output item list
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
	// Strategy ID to filter
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Start time to filter
	FromTime int64 `protobuf:"varint,3,opt,name=from_time,json=fromTime,proto3" json:"from_time,omitempty"`
	// End time to filter
	ToTime int64 `protobuf:"varint,4,opt,name=to_time,json=toTime,proto3" json:"to_time,omitempty"`
	// Filter only succeeded/failed triggers
	Success *types3.BoolValue `protobuf:"bytes,5,opt,name=success,proto3" json:"success,omitempty"`
}

func (m *ListStrategyTriggerByIdRequest) Reset()         { *m = ListStrategyTriggerByIdRequest{} }
func (m *ListStrategyTriggerByIdRequest) String() string { return proto.CompactTextString(m) }
func (*ListStrategyTriggerByIdRequest) ProtoMessage()    {}
func (*ListStrategyTriggerByIdRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_55f537fd2a78a541, []int{15}
}
func (m *ListStrategyTriggerByIdRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListStrategyTriggerByIdRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListStrategyTriggerByIdRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListStrategyTriggerByIdRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListStrategyTriggerByIdRequest.Merge(m, src)
}
func (m *ListStrategyTriggerByIdRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListStrategyTriggerByIdRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListStrategyTriggerByIdRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListStrategyTriggerByIdRequest proto.InternalMessageInfo

func (m *ListStrategyTriggerByIdRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func (m *ListStrategyTriggerByIdRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ListStrategyTriggerByIdRequest) GetFromTime() int64 {
	if m != nil {
		return m.FromTime
	}
	return 0
}

func (m *ListStrategyTriggerByIdRequest) GetToTime() int64 {
	if m != nil {
		return m.ToTime
	}
	return 0
}

func (m *ListStrategyTriggerByIdRequest) GetSuccess() *types3.BoolValue {
	if m != nil {
		return m.Success
	}
	return nil
}

type ListStrategyTriggerByIdResponse struct {
	// pagination response shows which page the strategy trigger list is at
	Pagination *query.PageResponse            `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
	Triggers   []*types2.StrategyTriggerEvent `protobuf:"bytes,2,rep,name=triggers,proto3" json:"triggers,omitempty"`
}

func (m *ListStrategyTriggerByIdResponse) Reset()         { *m = ListStrategyTriggerByIdResponse{} }
func (m *ListStrategyTriggerByIdResponse) String() string { return proto.CompactTextString(m) }
func (*ListStrategyTriggerByIdResponse) ProtoMessage()    {}
func (*ListStrategyTriggerByIdResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_55f537fd2a78a541, []int{16}
}
func (m *ListStrategyTriggerByIdResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListStrategyTriggerByIdResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListStrategyTriggerByIdResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListStrategyTriggerByIdResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListStrategyTriggerByIdResponse.Merge(m, src)
}
func (m *ListStrategyTriggerByIdResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListStrategyTriggerByIdResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListStrategyTriggerByIdResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListStrategyTriggerByIdResponse proto.InternalMessageInfo

func (m *ListStrategyTriggerByIdResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func (m *ListStrategyTriggerByIdResponse) GetTriggers() []*types2.StrategyTriggerEvent {
	if m != nil {
		return m.Triggers
	}
	return nil
}

type StreamStrategyTriggerRequest struct {
	Id []string `protobuf:"bytes,1,rep,name=id,proto3" json:"id,omitempty"`
}

func (m *StreamStrategyTriggerRequest) Reset()         { *m = StreamStrategyTriggerRequest{} }
func (m *StreamStrategyTriggerRequest) String() string { return proto.CompactTextString(m) }
func (*StreamStrategyTriggerRequest) ProtoMessage()    {}
func (*StreamStrategyTriggerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_55f537fd2a78a541, []int{17}
}
func (m *StreamStrategyTriggerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StreamStrategyTriggerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StreamStrategyTriggerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StreamStrategyTriggerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamStrategyTriggerRequest.Merge(m, src)
}
func (m *StreamStrategyTriggerRequest) XXX_Size() int {
	return m.Size()
}
func (m *StreamStrategyTriggerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamStrategyTriggerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StreamStrategyTriggerRequest proto.InternalMessageInfo

func (m *StreamStrategyTriggerRequest) GetId() []string {
	if m != nil {
		return m.Id
	}
	return nil
}

type StreamStrategyTriggerResponse struct {
	Height   uint64                         `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
	Deleted  uint64                         `protobuf:"varint,2,opt,name=deleted,proto3" json:"deleted,omitempty"`
	Triggers []*types2.StrategyTriggerEvent `protobuf:"bytes,3,rep,name=triggers,proto3" json:"triggers,omitempty"`
}

func (m *StreamStrategyTriggerResponse) Reset()         { *m = StreamStrategyTriggerResponse{} }
func (m *StreamStrategyTriggerResponse) String() string { return proto.CompactTextString(m) }
func (*StreamStrategyTriggerResponse) ProtoMessage()    {}
func (*StreamStrategyTriggerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_55f537fd2a78a541, []int{18}
}
func (m *StreamStrategyTriggerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StreamStrategyTriggerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StreamStrategyTriggerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StreamStrategyTriggerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamStrategyTriggerResponse.Merge(m, src)
}
func (m *StreamStrategyTriggerResponse) XXX_Size() int {
	return m.Size()
}
func (m *StreamStrategyTriggerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamStrategyTriggerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_StreamStrategyTriggerResponse proto.InternalMessageInfo

func (m *StreamStrategyTriggerResponse) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *StreamStrategyTriggerResponse) GetDeleted() uint64 {
	if m != nil {
		return m.Deleted
	}
	return 0
}

func (m *StreamStrategyTriggerResponse) GetTriggers() []*types2.StrategyTriggerEvent {
	if m != nil {
		return m.Triggers
	}
	return nil
}

type StreamStrategiesRequest struct {
	// owner of the strategy, required by this query
	Owner string `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	// strategy type, could be generic strategies, intent solver or cron bot
	Type *TypeFilter `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	// tags to filter
	Tags []string `protobuf:"bytes,3,rep,name=tags,proto3" json:"tags,omitempty"`
	// filter by supported app (filter single app for now)
	SupportedApp *SupportedAppFilter `protobuf:"bytes,6,opt,name=supported_app,json=supportedApp,proto3" json:"supported_app,omitempty"`
}

func (m *StreamStrategiesRequest) Reset()         { *m = StreamStrategiesRequest{} }
func (m *StreamStrategiesRequest) String() string { return proto.CompactTextString(m) }
func (*StreamStrategiesRequest) ProtoMessage()    {}
func (*StreamStrategiesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_55f537fd2a78a541, []int{19}
}
func (m *StreamStrategiesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StreamStrategiesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StreamStrategiesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StreamStrategiesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamStrategiesRequest.Merge(m, src)
}
func (m *StreamStrategiesRequest) XXX_Size() int {
	return m.Size()
}
func (m *StreamStrategiesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamStrategiesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StreamStrategiesRequest proto.InternalMessageInfo

func (m *StreamStrategiesRequest) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *StreamStrategiesRequest) GetType() *TypeFilter {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *StreamStrategiesRequest) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *StreamStrategiesRequest) GetSupportedApp() *SupportedAppFilter {
	if m != nil {
		return m.SupportedApp
	}
	return nil
}

type StreamStrategiesResponse struct {
	Height     uint64             `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
	Deleted    uint64             `protobuf:"varint,2,opt,name=deleted,proto3" json:"deleted,omitempty"`
	Strategies []*types2.Strategy `protobuf:"bytes,3,rep,name=strategies,proto3" json:"strategies,omitempty"`
}

func (m *StreamStrategiesResponse) Reset()         { *m = StreamStrategiesResponse{} }
func (m *StreamStrategiesResponse) String() string { return proto.CompactTextString(m) }
func (*StreamStrategiesResponse) ProtoMessage()    {}
func (*StreamStrategiesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_55f537fd2a78a541, []int{20}
}
func (m *StreamStrategiesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StreamStrategiesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StreamStrategiesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StreamStrategiesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamStrategiesResponse.Merge(m, src)
}
func (m *StreamStrategiesResponse) XXX_Size() int {
	return m.Size()
}
func (m *StreamStrategiesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamStrategiesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_StreamStrategiesResponse proto.InternalMessageInfo

func (m *StreamStrategiesResponse) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *StreamStrategiesResponse) GetDeleted() uint64 {
	if m != nil {
		return m.Deleted
	}
	return 0
}

func (m *StreamStrategiesResponse) GetStrategies() []*types2.Strategy {
	if m != nil {
		return m.Strategies
	}
	return nil
}

type ListTokenMetadataRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *ListTokenMetadataRequest) Reset()         { *m = ListTokenMetadataRequest{} }
func (m *ListTokenMetadataRequest) String() string { return proto.CompactTextString(m) }
func (*ListTokenMetadataRequest) ProtoMessage()    {}
func (*ListTokenMetadataRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_55f537fd2a78a541, []int{21}
}
func (m *ListTokenMetadataRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListTokenMetadataRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListTokenMetadataRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListTokenMetadataRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListTokenMetadataRequest.Merge(m, src)
}
func (m *ListTokenMetadataRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListTokenMetadataRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListTokenMetadataRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListTokenMetadataRequest proto.InternalMessageInfo

func (m *ListTokenMetadataRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type ListTokenMetadataResponse struct {
	Pagination *query.PageResponse     `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
	Metadata   []*types1.TokenMetadata `protobuf:"bytes,2,rep,name=metadata,proto3" json:"metadata,omitempty"`
}

func (m *ListTokenMetadataResponse) Reset()         { *m = ListTokenMetadataResponse{} }
func (m *ListTokenMetadataResponse) String() string { return proto.CompactTextString(m) }
func (*ListTokenMetadataResponse) ProtoMessage()    {}
func (*ListTokenMetadataResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_55f537fd2a78a541, []int{22}
}
func (m *ListTokenMetadataResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListTokenMetadataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListTokenMetadataResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListTokenMetadataResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListTokenMetadataResponse.Merge(m, src)
}
func (m *ListTokenMetadataResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListTokenMetadataResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListTokenMetadataResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListTokenMetadataResponse proto.InternalMessageInfo

func (m *ListTokenMetadataResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func (m *ListTokenMetadataResponse) GetMetadata() []*types1.TokenMetadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

type StreamTokenMetadataRequest struct {
}

func (m *StreamTokenMetadataRequest) Reset()         { *m = StreamTokenMetadataRequest{} }
func (m *StreamTokenMetadataRequest) String() string { return proto.CompactTextString(m) }
func (*StreamTokenMetadataRequest) ProtoMessage()    {}
func (*StreamTokenMetadataRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_55f537fd2a78a541, []int{23}
}
func (m *StreamTokenMetadataRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StreamTokenMetadataRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StreamTokenMetadataRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StreamTokenMetadataRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamTokenMetadataRequest.Merge(m, src)
}
func (m *StreamTokenMetadataRequest) XXX_Size() int {
	return m.Size()
}
func (m *StreamTokenMetadataRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamTokenMetadataRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StreamTokenMetadataRequest proto.InternalMessageInfo

type StreamTokenMetadataResponse struct {
	Height   uint64                  `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
	Deleted  uint64                  `protobuf:"varint,2,opt,name=deleted,proto3" json:"deleted,omitempty"`
	Metadata []*types1.TokenMetadata `protobuf:"bytes,3,rep,name=metadata,proto3" json:"metadata,omitempty"`
}

func (m *StreamTokenMetadataResponse) Reset()         { *m = StreamTokenMetadataResponse{} }
func (m *StreamTokenMetadataResponse) String() string { return proto.CompactTextString(m) }
func (*StreamTokenMetadataResponse) ProtoMessage()    {}
func (*StreamTokenMetadataResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_55f537fd2a78a541, []int{24}
}
func (m *StreamTokenMetadataResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StreamTokenMetadataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StreamTokenMetadataResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StreamTokenMetadataResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamTokenMetadataResponse.Merge(m, src)
}
func (m *StreamTokenMetadataResponse) XXX_Size() int {
	return m.Size()
}
func (m *StreamTokenMetadataResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamTokenMetadataResponse.DiscardUnknown(m)
}

var xxx_messageInfo_StreamTokenMetadataResponse proto.InternalMessageInfo

func (m *StreamTokenMetadataResponse) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *StreamTokenMetadataResponse) GetDeleted() uint64 {
	if m != nil {
		return m.Deleted
	}
	return 0
}

func (m *StreamTokenMetadataResponse) GetMetadata() []*types1.TokenMetadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

type ListSvmAccountLinksRequest struct {
	CosmosAddr string             `protobuf:"bytes,1,opt,name=cosmos_addr,json=cosmosAddr,proto3" json:"cosmos_addr,omitempty"`
	SvmAddr    string             `protobuf:"bytes,2,opt,name=svm_addr,json=svmAddr,proto3" json:"svm_addr,omitempty"`
	Pagination *query.PageRequest `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *ListSvmAccountLinksRequest) Reset()         { *m = ListSvmAccountLinksRequest{} }
func (m *ListSvmAccountLinksRequest) String() string { return proto.CompactTextString(m) }
func (*ListSvmAccountLinksRequest) ProtoMessage()    {}
func (*ListSvmAccountLinksRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_55f537fd2a78a541, []int{25}
}
func (m *ListSvmAccountLinksRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListSvmAccountLinksRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListSvmAccountLinksRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListSvmAccountLinksRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListSvmAccountLinksRequest.Merge(m, src)
}
func (m *ListSvmAccountLinksRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListSvmAccountLinksRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListSvmAccountLinksRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListSvmAccountLinksRequest proto.InternalMessageInfo

func (m *ListSvmAccountLinksRequest) GetCosmosAddr() string {
	if m != nil {
		return m.CosmosAddr
	}
	return ""
}

func (m *ListSvmAccountLinksRequest) GetSvmAddr() string {
	if m != nil {
		return m.SvmAddr
	}
	return ""
}

func (m *ListSvmAccountLinksRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type ListSvmAccountLinksResponse struct {
	Pagination   *query.PageResponse   `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
	AccountLinks []*types4.AccountLink `protobuf:"bytes,2,rep,name=account_links,json=accountLinks,proto3" json:"account_links,omitempty"`
}

func (m *ListSvmAccountLinksResponse) Reset()         { *m = ListSvmAccountLinksResponse{} }
func (m *ListSvmAccountLinksResponse) String() string { return proto.CompactTextString(m) }
func (*ListSvmAccountLinksResponse) ProtoMessage()    {}
func (*ListSvmAccountLinksResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_55f537fd2a78a541, []int{26}
}
func (m *ListSvmAccountLinksResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListSvmAccountLinksResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListSvmAccountLinksResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListSvmAccountLinksResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListSvmAccountLinksResponse.Merge(m, src)
}
func (m *ListSvmAccountLinksResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListSvmAccountLinksResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListSvmAccountLinksResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListSvmAccountLinksResponse proto.InternalMessageInfo

func (m *ListSvmAccountLinksResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func (m *ListSvmAccountLinksResponse) GetAccountLinks() []*types4.AccountLink {
	if m != nil {
		return m.AccountLinks
	}
	return nil
}

type StreamSvmAccountLinkRequest struct {
	CosmosAddress string `protobuf:"bytes,1,opt,name=cosmos_address,json=cosmosAddress,proto3" json:"cosmos_address,omitempty"`
	SvmAddress    string `protobuf:"bytes,2,opt,name=svm_address,json=svmAddress,proto3" json:"svm_address,omitempty"`
}

func (m *StreamSvmAccountLinkRequest) Reset()         { *m = StreamSvmAccountLinkRequest{} }
func (m *StreamSvmAccountLinkRequest) String() string { return proto.CompactTextString(m) }
func (*StreamSvmAccountLinkRequest) ProtoMessage()    {}
func (*StreamSvmAccountLinkRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_55f537fd2a78a541, []int{27}
}
func (m *StreamSvmAccountLinkRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StreamSvmAccountLinkRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StreamSvmAccountLinkRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StreamSvmAccountLinkRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamSvmAccountLinkRequest.Merge(m, src)
}
func (m *StreamSvmAccountLinkRequest) XXX_Size() int {
	return m.Size()
}
func (m *StreamSvmAccountLinkRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamSvmAccountLinkRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StreamSvmAccountLinkRequest proto.InternalMessageInfo

func (m *StreamSvmAccountLinkRequest) GetCosmosAddress() string {
	if m != nil {
		return m.CosmosAddress
	}
	return ""
}

func (m *StreamSvmAccountLinkRequest) GetSvmAddress() string {
	if m != nil {
		return m.SvmAddress
	}
	return ""
}

type StreamSvmAccountLinkResponse struct {
	Height      uint64                `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
	Deleted     uint64                `protobuf:"varint,2,opt,name=deleted,proto3" json:"deleted,omitempty"`
	AccountLink []*types4.AccountLink `protobuf:"bytes,3,rep,name=account_link,json=accountLink,proto3" json:"account_link,omitempty"`
}

func (m *StreamSvmAccountLinkResponse) Reset()         { *m = StreamSvmAccountLinkResponse{} }
func (m *StreamSvmAccountLinkResponse) String() string { return proto.CompactTextString(m) }
func (*StreamSvmAccountLinkResponse) ProtoMessage()    {}
func (*StreamSvmAccountLinkResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_55f537fd2a78a541, []int{28}
}
func (m *StreamSvmAccountLinkResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StreamSvmAccountLinkResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StreamSvmAccountLinkResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StreamSvmAccountLinkResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamSvmAccountLinkResponse.Merge(m, src)
}
func (m *StreamSvmAccountLinkResponse) XXX_Size() int {
	return m.Size()
}
func (m *StreamSvmAccountLinkResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamSvmAccountLinkResponse.DiscardUnknown(m)
}

var xxx_messageInfo_StreamSvmAccountLinkResponse proto.InternalMessageInfo

func (m *StreamSvmAccountLinkResponse) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *StreamSvmAccountLinkResponse) GetDeleted() uint64 {
	if m != nil {
		return m.Deleted
	}
	return 0
}

func (m *StreamSvmAccountLinkResponse) GetAccountLink() []*types4.AccountLink {
	if m != nil {
		return m.AccountLink
	}
	return nil
}

// Request and response messages for ListDriftOrders
type ListDriftOrdersRequest struct {
	MarketName string `protobuf:"bytes,1,opt,name=market_name,json=marketName,proto3" json:"market_name,omitempty"`
}

func (m *ListDriftOrdersRequest) Reset()         { *m = ListDriftOrdersRequest{} }
func (m *ListDriftOrdersRequest) String() string { return proto.CompactTextString(m) }
func (*ListDriftOrdersRequest) ProtoMessage()    {}
func (*ListDriftOrdersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_55f537fd2a78a541, []int{29}
}
func (m *ListDriftOrdersRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListDriftOrdersRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListDriftOrdersRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListDriftOrdersRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListDriftOrdersRequest.Merge(m, src)
}
func (m *ListDriftOrdersRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListDriftOrdersRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListDriftOrdersRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListDriftOrdersRequest proto.InternalMessageInfo

func (m *ListDriftOrdersRequest) GetMarketName() string {
	if m != nil {
		return m.MarketName
	}
	return ""
}

type ListDriftOrdersResponse struct {
	Orders []*DriftOrder `protobuf:"bytes,1,rep,name=orders,proto3" json:"orders,omitempty"`
}

func (m *ListDriftOrdersResponse) Reset()         { *m = ListDriftOrdersResponse{} }
func (m *ListDriftOrdersResponse) String() string { return proto.CompactTextString(m) }
func (*ListDriftOrdersResponse) ProtoMessage()    {}
func (*ListDriftOrdersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_55f537fd2a78a541, []int{30}
}
func (m *ListDriftOrdersResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListDriftOrdersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListDriftOrdersResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListDriftOrdersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListDriftOrdersResponse.Merge(m, src)
}
func (m *ListDriftOrdersResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListDriftOrdersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListDriftOrdersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListDriftOrdersResponse proto.InternalMessageInfo

func (m *ListDriftOrdersResponse) GetOrders() []*DriftOrder {
	if m != nil {
		return m.Orders
	}
	return nil
}

// Request and response messages for ListFillableDriftJITOrders
type ListFillableDriftJITOrdersRequest struct {
	MarketName string `protobuf:"bytes,1,opt,name=market_name,json=marketName,proto3" json:"market_name,omitempty"`
	WorstPrice uint64 `protobuf:"varint,2,opt,name=worst_price,json=worstPrice,proto3" json:"worst_price,omitempty"`
	Direction  string `protobuf:"bytes,3,opt,name=direction,proto3" json:"direction,omitempty"`
	Quantity   uint64 `protobuf:"varint,4,opt,name=quantity,proto3" json:"quantity,omitempty"`
}

func (m *ListFillableDriftJITOrdersRequest) Reset()         { *m = ListFillableDriftJITOrdersRequest{} }
func (m *ListFillableDriftJITOrdersRequest) String() string { return proto.CompactTextString(m) }
func (*ListFillableDriftJITOrdersRequest) ProtoMessage()    {}
func (*ListFillableDriftJITOrdersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_55f537fd2a78a541, []int{31}
}
func (m *ListFillableDriftJITOrdersRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListFillableDriftJITOrdersRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListFillableDriftJITOrdersRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListFillableDriftJITOrdersRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListFillableDriftJITOrdersRequest.Merge(m, src)
}
func (m *ListFillableDriftJITOrdersRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListFillableDriftJITOrdersRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListFillableDriftJITOrdersRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListFillableDriftJITOrdersRequest proto.InternalMessageInfo

func (m *ListFillableDriftJITOrdersRequest) GetMarketName() string {
	if m != nil {
		return m.MarketName
	}
	return ""
}

func (m *ListFillableDriftJITOrdersRequest) GetWorstPrice() uint64 {
	if m != nil {
		return m.WorstPrice
	}
	return 0
}

func (m *ListFillableDriftJITOrdersRequest) GetDirection() string {
	if m != nil {
		return m.Direction
	}
	return ""
}

func (m *ListFillableDriftJITOrdersRequest) GetQuantity() uint64 {
	if m != nil {
		return m.Quantity
	}
	return 0
}

type ListFillableDriftJITOrdersResponse struct {
	FillableOrders []*DriftOrder `protobuf:"bytes,1,rep,name=fillable_orders,json=fillableOrders,proto3" json:"fillable_orders,omitempty"`
}

func (m *ListFillableDriftJITOrdersResponse) Reset()         { *m = ListFillableDriftJITOrdersResponse{} }
func (m *ListFillableDriftJITOrdersResponse) String() string { return proto.CompactTextString(m) }
func (*ListFillableDriftJITOrdersResponse) ProtoMessage()    {}
func (*ListFillableDriftJITOrdersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_55f537fd2a78a541, []int{32}
}
func (m *ListFillableDriftJITOrdersResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListFillableDriftJITOrdersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListFillableDriftJITOrdersResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListFillableDriftJITOrdersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListFillableDriftJITOrdersResponse.Merge(m, src)
}
func (m *ListFillableDriftJITOrdersResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListFillableDriftJITOrdersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListFillableDriftJITOrdersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListFillableDriftJITOrdersResponse proto.InternalMessageInfo

func (m *ListFillableDriftJITOrdersResponse) GetFillableOrders() []*DriftOrder {
	if m != nil {
		return m.FillableOrders
	}
	return nil
}

// Order structure with auction_start_price and auction_end_price
type DriftOrder struct {
	SubaccountAddress string         `protobuf:"bytes,1,opt,name=subaccount_address,json=subaccountAddress,proto3" json:"subaccount_address,omitempty"`
	OwnerAddress      string         `protobuf:"bytes,2,opt,name=owner_address,json=ownerAddress,proto3" json:"owner_address,omitempty"`
	Price             uint64         `protobuf:"varint,3,opt,name=price,proto3" json:"price,omitempty"`
	TotalQuantity     uint64         `protobuf:"varint,4,opt,name=total_quantity,json=totalQuantity,proto3" json:"total_quantity,omitempty"`
	MarketName        string         `protobuf:"bytes,5,opt,name=market_name,json=marketName,proto3" json:"market_name,omitempty"`
	OrderId           uint32         `protobuf:"varint,6,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	AuctionStartPrice int64          `protobuf:"varint,7,opt,name=auction_start_price,json=auctionStartPrice,proto3" json:"auction_start_price,omitempty"`
	AuctionEndPrice   int64          `protobuf:"varint,8,opt,name=auction_end_price,json=auctionEndPrice,proto3" json:"auction_end_price,omitempty"`
	Slot              uint64         `protobuf:"varint,9,opt,name=slot,proto3" json:"slot,omitempty"`
	AuctionDuration   uint32         `protobuf:"varint,10,opt,name=auction_duration,json=auctionDuration,proto3" json:"auction_duration,omitempty"`
	ExpiredAt         int64          `protobuf:"varint,11,opt,name=expired_at,json=expiredAt,proto3" json:"expired_at,omitempty"`
	Direction         OrderDirection `protobuf:"varint,12,opt,name=direction,proto3,enum=flux.indexer.explorer.OrderDirection" json:"direction,omitempty"`
	FillableQuantity  uint64         `protobuf:"varint,13,opt,name=fillable_quantity,json=fillableQuantity,proto3" json:"fillable_quantity,omitempty"`
}

func (m *DriftOrder) Reset()         { *m = DriftOrder{} }
func (m *DriftOrder) String() string { return proto.CompactTextString(m) }
func (*DriftOrder) ProtoMessage()    {}
func (*DriftOrder) Descriptor() ([]byte, []int) {
	return fileDescriptor_55f537fd2a78a541, []int{33}
}
func (m *DriftOrder) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DriftOrder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DriftOrder.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DriftOrder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DriftOrder.Merge(m, src)
}
func (m *DriftOrder) XXX_Size() int {
	return m.Size()
}
func (m *DriftOrder) XXX_DiscardUnknown() {
	xxx_messageInfo_DriftOrder.DiscardUnknown(m)
}

var xxx_messageInfo_DriftOrder proto.InternalMessageInfo

func (m *DriftOrder) GetSubaccountAddress() string {
	if m != nil {
		return m.SubaccountAddress
	}
	return ""
}

func (m *DriftOrder) GetOwnerAddress() string {
	if m != nil {
		return m.OwnerAddress
	}
	return ""
}

func (m *DriftOrder) GetPrice() uint64 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *DriftOrder) GetTotalQuantity() uint64 {
	if m != nil {
		return m.TotalQuantity
	}
	return 0
}

func (m *DriftOrder) GetMarketName() string {
	if m != nil {
		return m.MarketName
	}
	return ""
}

func (m *DriftOrder) GetOrderId() uint32 {
	if m != nil {
		return m.OrderId
	}
	return 0
}

func (m *DriftOrder) GetAuctionStartPrice() int64 {
	if m != nil {
		return m.AuctionStartPrice
	}
	return 0
}

func (m *DriftOrder) GetAuctionEndPrice() int64 {
	if m != nil {
		return m.AuctionEndPrice
	}
	return 0
}

func (m *DriftOrder) GetSlot() uint64 {
	if m != nil {
		return m.Slot
	}
	return 0
}

func (m *DriftOrder) GetAuctionDuration() uint32 {
	if m != nil {
		return m.AuctionDuration
	}
	return 0
}

func (m *DriftOrder) GetExpiredAt() int64 {
	if m != nil {
		return m.ExpiredAt
	}
	return 0
}

func (m *DriftOrder) GetDirection() OrderDirection {
	if m != nil {
		return m.Direction
	}
	return OrderDirection_Long
}

func (m *DriftOrder) GetFillableQuantity() uint64 {
	if m != nil {
		return m.FillableQuantity
	}
	return 0
}

type StreamDriftOrdersRequest struct {
	MarketName string `protobuf:"bytes,1,opt,name=market_name,json=marketName,proto3" json:"market_name,omitempty"`
	Price      uint64 `protobuf:"varint,2,opt,name=price,proto3" json:"price,omitempty"`
	Direction  string `protobuf:"bytes,3,opt,name=direction,proto3" json:"direction,omitempty"`
}

func (m *StreamDriftOrdersRequest) Reset()         { *m = StreamDriftOrdersRequest{} }
func (m *StreamDriftOrdersRequest) String() string { return proto.CompactTextString(m) }
func (*StreamDriftOrdersRequest) ProtoMessage()    {}
func (*StreamDriftOrdersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_55f537fd2a78a541, []int{34}
}
func (m *StreamDriftOrdersRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StreamDriftOrdersRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StreamDriftOrdersRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StreamDriftOrdersRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamDriftOrdersRequest.Merge(m, src)
}
func (m *StreamDriftOrdersRequest) XXX_Size() int {
	return m.Size()
}
func (m *StreamDriftOrdersRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamDriftOrdersRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StreamDriftOrdersRequest proto.InternalMessageInfo

func (m *StreamDriftOrdersRequest) GetMarketName() string {
	if m != nil {
		return m.MarketName
	}
	return ""
}

func (m *StreamDriftOrdersRequest) GetPrice() uint64 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *StreamDriftOrdersRequest) GetDirection() string {
	if m != nil {
		return m.Direction
	}
	return ""
}

type StreamDriftOrdersResponse struct {
	Height  uint64      `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
	Deleted uint64      `protobuf:"varint,2,opt,name=deleted,proto3" json:"deleted,omitempty"`
	Order   *DriftOrder `protobuf:"bytes,3,opt,name=order,proto3" json:"order,omitempty"`
}

func (m *StreamDriftOrdersResponse) Reset()         { *m = StreamDriftOrdersResponse{} }
func (m *StreamDriftOrdersResponse) String() string { return proto.CompactTextString(m) }
func (*StreamDriftOrdersResponse) ProtoMessage()    {}
func (*StreamDriftOrdersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_55f537fd2a78a541, []int{35}
}
func (m *StreamDriftOrdersResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StreamDriftOrdersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StreamDriftOrdersResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StreamDriftOrdersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamDriftOrdersResponse.Merge(m, src)
}
func (m *StreamDriftOrdersResponse) XXX_Size() int {
	return m.Size()
}
func (m *StreamDriftOrdersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamDriftOrdersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_StreamDriftOrdersResponse proto.InternalMessageInfo

func (m *StreamDriftOrdersResponse) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *StreamDriftOrdersResponse) GetDeleted() uint64 {
	if m != nil {
		return m.Deleted
	}
	return 0
}

func (m *StreamDriftOrdersResponse) GetOrder() *DriftOrder {
	if m != nil {
		return m.Order
	}
	return nil
}

func init() {
	proto.RegisterEnum("flux.indexer.explorer.OrderDirection", OrderDirection_name, OrderDirection_value)
	proto.RegisterType((*ListEvmContractsRequest)(nil), "flux.indexer.explorer.ListEvmContractsRequest")
	proto.RegisterType((*ListEvmContractsResponse)(nil), "flux.indexer.explorer.ListEvmContractsResponse")
	proto.RegisterType((*BalancesRequest)(nil), "flux.indexer.explorer.BalancesRequest")
	proto.RegisterType((*BalanceInfo)(nil), "flux.indexer.explorer.BalanceInfo")
	proto.RegisterType((*BalancesResponse)(nil), "flux.indexer.explorer.BalancesResponse")
	proto.RegisterType((*TypeFilter)(nil), "flux.indexer.explorer.TypeFilter")
	proto.RegisterType((*SupportedAppFilter)(nil), "flux.indexer.explorer.SupportedAppFilter")
	proto.RegisterType((*ListStrategiesRequest)(nil), "flux.indexer.explorer.ListStrategiesRequest")
	proto.RegisterType((*ListStrategiesResponse)(nil), "flux.indexer.explorer.ListStrategiesResponse")
	proto.RegisterType((*ListStrategiesByOwnerRequest)(nil), "flux.indexer.explorer.ListStrategiesByOwnerRequest")
	proto.RegisterType((*Pool)(nil), "flux.indexer.explorer.Pool")
	proto.RegisterType((*Metrics)(nil), "flux.indexer.explorer.Metrics")
	proto.RegisterType((*GetMetricsRequest)(nil), "flux.indexer.explorer.GetMetricsRequest")
	proto.RegisterType((*GetMetricsResponse)(nil), "flux.indexer.explorer.GetMetricsResponse")
	proto.RegisterType((*StreamBalanceResponse)(nil), "flux.indexer.explorer.StreamBalanceResponse")
	proto.RegisterType((*ListStrategyTriggerByIdRequest)(nil), "flux.indexer.explorer.ListStrategyTriggerByIdRequest")
	proto.RegisterType((*ListStrategyTriggerByIdResponse)(nil), "flux.indexer.explorer.ListStrategyTriggerByIdResponse")
	proto.RegisterType((*StreamStrategyTriggerRequest)(nil), "flux.indexer.explorer.StreamStrategyTriggerRequest")
	proto.RegisterType((*StreamStrategyTriggerResponse)(nil), "flux.indexer.explorer.StreamStrategyTriggerResponse")
	proto.RegisterType((*StreamStrategiesRequest)(nil), "flux.indexer.explorer.StreamStrategiesRequest")
	proto.RegisterType((*StreamStrategiesResponse)(nil), "flux.indexer.explorer.StreamStrategiesResponse")
	proto.RegisterType((*ListTokenMetadataRequest)(nil), "flux.indexer.explorer.ListTokenMetadataRequest")
	proto.RegisterType((*ListTokenMetadataResponse)(nil), "flux.indexer.explorer.ListTokenMetadataResponse")
	proto.RegisterType((*StreamTokenMetadataRequest)(nil), "flux.indexer.explorer.StreamTokenMetadataRequest")
	proto.RegisterType((*StreamTokenMetadataResponse)(nil), "flux.indexer.explorer.StreamTokenMetadataResponse")
	proto.RegisterType((*ListSvmAccountLinksRequest)(nil), "flux.indexer.explorer.ListSvmAccountLinksRequest")
	proto.RegisterType((*ListSvmAccountLinksResponse)(nil), "flux.indexer.explorer.ListSvmAccountLinksResponse")
	proto.RegisterType((*StreamSvmAccountLinkRequest)(nil), "flux.indexer.explorer.StreamSvmAccountLinkRequest")
	proto.RegisterType((*StreamSvmAccountLinkResponse)(nil), "flux.indexer.explorer.StreamSvmAccountLinkResponse")
	proto.RegisterType((*ListDriftOrdersRequest)(nil), "flux.indexer.explorer.ListDriftOrdersRequest")
	proto.RegisterType((*ListDriftOrdersResponse)(nil), "flux.indexer.explorer.ListDriftOrdersResponse")
	proto.RegisterType((*ListFillableDriftJITOrdersRequest)(nil), "flux.indexer.explorer.ListFillableDriftJITOrdersRequest")
	proto.RegisterType((*ListFillableDriftJITOrdersResponse)(nil), "flux.indexer.explorer.ListFillableDriftJITOrdersResponse")
	proto.RegisterType((*DriftOrder)(nil), "flux.indexer.explorer.DriftOrder")
	proto.RegisterType((*StreamDriftOrdersRequest)(nil), "flux.indexer.explorer.StreamDriftOrdersRequest")
	proto.RegisterType((*StreamDriftOrdersResponse)(nil), "flux.indexer.explorer.StreamDriftOrdersResponse")
}

func init() { proto.RegisterFile("flux/indexer/explorer/query.proto", fileDescriptor_55f537fd2a78a541) }

var fileDescriptor_55f537fd2a78a541 = []byte{
	// 2653 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x5a, 0x5b, 0x6f, 0x1b, 0xc7,
	0xf5, 0xf7, 0xf0, 0x22, 0x52, 0x47, 0xf7, 0xb1, 0x6c, 0x51, 0x94, 0x4c, 0x4a, 0xeb, 0x9b, 0x7c,
	0xe3, 0x4a, 0xb2, 0x93, 0xfc, 0x1d, 0xfc, 0xd1, 0x46, 0x74, 0x6c, 0x47, 0x81, 0x93, 0xb8, 0x2b,
	0x21, 0x0f, 0x7d, 0x21, 0x96, 0xdc, 0x11, 0xb5, 0x30, 0x77, 0x97, 0xde, 0x1d, 0xd2, 0x12, 0x8c,
	0xa0, 0x40, 0xd1, 0x16, 0xe8, 0x43, 0x8a, 0x22, 0x79, 0x28, 0xd0, 0x3c, 0x34, 0x0d, 0x8a, 0x16,
	0x08, 0x5a, 0xf4, 0xa1, 0x41, 0x8b, 0x3e, 0x14, 0xe8, 0x63, 0x50, 0xa0, 0x40, 0x90, 0xbc, 0x14,
	0x7d, 0x10, 0x8a, 0x38, 0x9f, 0x40, 0x9f, 0xa0, 0xd8, 0xb9, 0x2c, 0x77, 0xc9, 0x25, 0x25, 0xaa,
	0x2a, 0xd0, 0x27, 0x71, 0xe6, 0x9c, 0x33, 0xe7, 0x37, 0xe7, 0x32, 0x73, 0xce, 0xac, 0x60, 0x79,
	0xa7, 0xd1, 0xda, 0x53, 0x4d, 0xdb, 0x20, 0x7b, 0xc4, 0x55, 0xc9, 0x5e, 0xb3, 0xe1, 0xb8, 0xc4,
	0x55, 0x9f, 0xb6, 0x88, 0xbb, 0x5f, 0x6a, 0xba, 0x0e, 0x75, 0xf0, 0x39, 0x9f, 0xa5, 0x24, 0x58,
	0x4a, 0x92, 0x25, 0x3f, 0x5f, 0x77, 0x9c, 0x7a, 0x83, 0xa8, 0x8c, 0xa9, 0xda, 0xda, 0x51, 0x75,
	0x5b, 0x48, 0xe4, 0x17, 0x05, 0x49, 0x6f, 0x9a, 0xaa, 0x6e, 0xdb, 0x0e, 0xd5, 0xa9, 0xe9, 0xd8,
	0x9e, 0xa0, 0x5e, 0xaf, 0x39, 0x9e, 0xe5, 0x78, 0x6a, 0x55, 0xf7, 0x08, 0x57, 0xa4, 0xb6, 0xd7,
	0xaa, 0x84, 0xea, 0x6b, 0x6a, 0x53, 0xaf, 0x9b, 0x36, 0x63, 0x16, 0xbc, 0x79, 0x06, 0x8f, 0xb4,
	0xad, 0x80, 0x85, 0xb4, 0xad, 0x08, 0xcd, 0x0b, 0xd1, 0xbc, 0x80, 0x56, 0x64, 0x34, 0xdd, 0xa3,
	0xae, 0x63, 0x11, 0x6f, 0x37, 0xe0, 0xa0, 0x7b, 0x82, 0x41, 0xe9, 0xc3, 0x40, 0xda, 0xc4, 0xa6,
	0x82, 0x67, 0x9e, 0x03, 0xad, 0xb0, 0x91, 0xca, 0x07, 0x82, 0x34, 0x5b, 0x77, 0xea, 0x0e, 0x9f,
	0xf7, 0x7f, 0x89, 0xd9, 0x4b, 0x1c, 0x11, 0x75, 0x75, 0x4a, 0xea, 0x9d, 0x5d, 0xc9, 0x09, 0xc1,
	0xb5, 0x1c, 0xcf, 0x15, 0xd6, 0x5c, 0xe8, 0xb6, 0xed, 0x33, 0x57, 0x6f, 0x36, 0x89, 0x2b, 0xd4,
	0x2b, 0xcf, 0x61, 0xee, 0x91, 0xe9, 0xd1, 0xfb, 0x6d, 0xeb, 0x9e, 0x63, 0x53, 0x57, 0xaf, 0x51,
	0x4f, 0x23, 0x4f, 0x5b, 0xc4, 0xa3, 0x38, 0x07, 0x19, 0xdd, 0x30, 0x5c, 0xe2, 0x79, 0x39, 0xb4,
	0x84, 0x56, 0x46, 0x35, 0x39, 0xc4, 0x0f, 0x00, 0x3a, 0xf6, 0xcd, 0x25, 0x96, 0xd0, 0xca, 0xd8,
	0xfa, 0x95, 0x92, 0xd8, 0x96, 0xef, 0x8c, 0x12, 0xf7, 0xba, 0x00, 0x54, 0x7a, 0xac, 0xd7, 0x89,
	0x58, 0x55, 0x0b, 0x49, 0x2a, 0xbf, 0x44, 0x90, 0xeb, 0xd5, 0xee, 0x35, 0x1d, 0xdb, 0x23, 0xf8,
	0xff, 0x61, 0xb4, 0x26, 0x27, 0x73, 0x68, 0x29, 0xb9, 0x32, 0xb6, 0x5e, 0x28, 0xb1, 0x00, 0xf2,
	0x1d, 0x27, 0x97, 0x96, 0x72, 0x9b, 0xf6, 0x8e, 0xa3, 0x75, 0x04, 0xf0, 0xc3, 0x18, 0x88, 0x57,
	0x8f, 0x84, 0xc8, 0x55, 0x47, 0x30, 0xbe, 0x8f, 0x60, 0xaa, 0xac, 0x37, 0x74, 0xbb, 0x46, 0x02,
	0xcb, 0xac, 0x77, 0x59, 0xa6, 0x9c, 0xfb, 0xf2, 0xb3, 0x5b, 0xb3, 0x62, 0xf1, 0x0d, 0x4e, 0xd9,
	0xa2, 0xae, 0x69, 0xd7, 0x4f, 0xdf, 0x66, 0x1f, 0x27, 0x61, 0x4c, 0xe0, 0xf1, 0xf7, 0x8c, 0xa7,
	0x21, 0xa9, 0xd7, 0x6a, 0xc2, 0x43, 0xfe, 0x4f, 0x7c, 0x1b, 0xd2, 0xcd, 0x86, 0x6e, 0x13, 0xa6,
	0x64, 0x72, 0xfd, 0x02, 0x37, 0x5a, 0x10, 0xa0, 0x1d, 0x0d, 0x3e, 0x93, 0xc6, 0x79, 0xf1, 0x2c,
	0xa4, 0x0d, 0x62, 0x3b, 0x56, 0x2e, 0xc9, 0x16, 0xe2, 0x03, 0x7c, 0x0f, 0x46, 0x74, 0xcb, 0x69,
	0xd9, 0x34, 0x97, 0x62, 0xfb, 0xbc, 0xf1, 0xf9, 0x41, 0xf1, 0xcc, 0x3f, 0x0f, 0x8a, 0xe7, 0x38,
	0x6e, 0xcf, 0x78, 0x52, 0x32, 0x1d, 0xd5, 0xd2, 0xe9, 0x6e, 0x69, 0xd3, 0xa6, 0x5f, 0x7e, 0x76,
	0x0b, 0xc4, 0x86, 0x36, 0x6d, 0xaa, 0x09, 0x51, 0xfc, 0x1a, 0x4c, 0xb6, 0x9a, 0x86, 0x4e, 0x89,
	0x51, 0xd9, 0x25, 0x66, 0x7d, 0x97, 0xe6, 0xd2, 0x4b, 0x68, 0x25, 0x55, 0x9e, 0x3f, 0x3c, 0x28,
	0x9e, 0xab, 0x7a, 0x8e, 0xfd, 0xaa, 0x12, 0xa5, 0x2b, 0xda, 0x84, 0x98, 0x78, 0x83, 0x8d, 0xf1,
	0xab, 0x30, 0x2e, 0x39, 0xa8, 0x69, 0x91, 0xdc, 0x08, 0x93, 0x9f, 0x3b, 0x3c, 0x28, 0x9e, 0x8d,
	0xca, 0xfb, 0x54, 0x45, 0x1b, 0x13, 0xc3, 0x6d, 0xd3, 0x22, 0xf8, 0x29, 0x4c, 0xb2, 0xbd, 0x54,
	0x2c, 0x42, 0x75, 0x43, 0xa7, 0x7a, 0x2e, 0xc3, 0x6c, 0x7f, 0xb9, 0x9f, 0x59, 0xb6, 0x9d, 0x27,
	0xc4, 0x7e, 0x4b, 0x30, 0x97, 0x2f, 0x1e, 0x1e, 0x14, 0x8b, 0x5c, 0x49, 0x74, 0x99, 0x9b, 0x8e,
	0x65, 0x52, 0x62, 0x35, 0xe9, 0xbe, 0xa2, 0x4d, 0x30, 0x92, 0x94, 0x51, 0x3e, 0x42, 0x30, 0xdd,
	0x09, 0x19, 0x11, 0xce, 0xdf, 0x82, 0x6c, 0x55, 0xcc, 0x89, 0x68, 0x56, 0x4a, 0xb1, 0xc7, 0x61,
	0x29, 0xe4, 0x5d, 0x2d, 0x90, 0x39, 0xbd, 0x80, 0x7e, 0x08, 0xb0, 0xbd, 0xdf, 0x24, 0x0f, 0xcc,
	0x06, 0x25, 0x2e, 0xbe, 0x0b, 0xe9, 0xb6, 0xde, 0x68, 0x11, 0x16, 0x40, 0x93, 0xeb, 0x17, 0x39,
	0xa6, 0xe0, 0x9c, 0x91, 0xab, 0x6d, 0x89, 0x09, 0x5f, 0x52, 0xe3, 0x12, 0xca, 0x6f, 0x11, 0xe0,
	0xad, 0x56, 0xb3, 0xe9, 0xb8, 0x94, 0x18, 0x1b, 0xcd, 0xa6, 0x58, 0x31, 0x08, 0x3f, 0x34, 0x44,
	0xf8, 0x5d, 0x83, 0x69, 0x99, 0xbb, 0x15, 0x99, 0x5a, 0x09, 0x16, 0x89, 0x53, 0x72, 0x5e, 0xe4,
	0x15, 0x7e, 0x19, 0xb2, 0x6d, 0xe2, 0x9a, 0x3b, 0x26, 0x31, 0x58, 0xb0, 0x8e, 0xad, 0xe7, 0x4b,
	0xfc, 0x90, 0x2b, 0xc9, 0x43, 0xae, 0x54, 0x76, 0x9c, 0xc6, 0xbb, 0x3e, 0x48, 0x2d, 0xe0, 0x55,
	0xfe, 0x9a, 0x80, 0x73, 0xfe, 0x61, 0x23, 0xb6, 0x62, 0x76, 0xd2, 0x39, 0x9a, 0x9a, 0xe8, 0xa4,
	0xa9, 0x89, 0x5f, 0x82, 0x14, 0xdd, 0x6f, 0x12, 0xe1, 0x9c, 0xe5, 0x3e, 0xee, 0xed, 0x18, 0x5f,
	0x63, 0xec, 0x78, 0x12, 0x12, 0xa6, 0x21, 0xf2, 0x2e, 0x61, 0x1a, 0xf8, 0x0e, 0x64, 0x88, 0xad,
	0x57, 0x1b, 0xc4, 0x60, 0x59, 0x37, 0x78, 0x7f, 0x92, 0x15, 0x63, 0x48, 0x51, 0xbd, 0xee, 0xe5,
	0xd2, 0x4b, 0xc9, 0x95, 0x51, 0x8d, 0xfd, 0xc6, 0x6f, 0xc3, 0x84, 0x27, 0x1d, 0x54, 0xd1, 0x9b,
	0x4d, 0x96, 0x38, 0x63, 0xeb, 0xd7, 0xfa, 0x20, 0xeb, 0x75, 0xa6, 0x36, 0xee, 0x85, 0xe6, 0x94,
	0x4f, 0x10, 0x9c, 0xef, 0x36, 0xa1, 0x08, 0xef, 0x87, 0x31, 0x36, 0x3c, 0x49, 0x78, 0xe2, 0x6f,
	0x03, 0x78, 0xc1, 0xf2, 0xb9, 0x04, 0xcb, 0x94, 0xe2, 0x11, 0x51, 0xa9, 0x85, 0x44, 0x94, 0xbf,
	0x27, 0x60, 0x31, 0x0a, 0xb2, 0xbc, 0xff, 0xce, 0x33, 0x9b, 0xb8, 0xa7, 0xed, 0xee, 0x59, 0x48,
	0x3b, 0xfe, 0xba, 0x22, 0x50, 0xf9, 0x20, 0x08, 0x82, 0xe4, 0x70, 0x41, 0xf0, 0xbf, 0xeb, 0xf4,
	0xaf, 0x52, 0x90, 0x7a, 0xec, 0x38, 0x0d, 0xac, 0x42, 0x96, 0xec, 0xd5, 0x76, 0x75, 0xbb, 0x4e,
	0xc4, 0xb5, 0x77, 0xf6, 0xf0, 0xa0, 0x38, 0xc5, 0x0f, 0x47, 0x49, 0x51, 0xb4, 0x80, 0x09, 0xdf,
	0x1f, 0xe6, 0x22, 0x2a, 0x4f, 0x1f, 0x1e, 0x14, 0xc7, 0xf9, 0x62, 0x4c, 0x4a, 0x91, 0x67, 0xc3,
	0x0d, 0xc8, 0x34, 0x1d, 0xa7, 0x51, 0x91, 0x49, 0x52, 0xc6, 0x87, 0x07, 0xc5, 0x49, 0xc1, 0xc9,
	0x09, 0x8a, 0x36, 0xe2, 0xff, 0xda, 0x34, 0xf0, 0xbb, 0x30, 0x41, 0xfd, 0x03, 0x7c, 0xb5, 0xd2,
	0x76, 0x1a, 0x2d, 0x8b, 0x88, 0x8b, 0x6b, 0xad, 0xef, 0xa5, 0x75, 0x78, 0x50, 0x9c, 0xe5, 0x6b,
	0x45, 0xe4, 0x14, 0x6d, 0x9c, 0x8f, 0xdf, 0x65, 0xc3, 0x60, 0xdd, 0x35, 0xb9, 0x6e, 0x7a, 0xb8,
	0x75, 0xd7, 0xba, 0xd6, 0x5d, 0x13, 0xeb, 0x56, 0x60, 0x5a, 0xe8, 0x6d, 0x98, 0x4f, 0x5b, 0xa6,
	0x61, 0xd2, 0x7d, 0xe6, 0xb0, 0xd1, 0xf2, 0x9d, 0x41, 0x4b, 0xcf, 0x45, 0x20, 0x07, 0xa2, 0x8a,
	0x36, 0xc5, 0xa7, 0x1e, 0xc9, 0x99, 0x40, 0xc1, 0x5a, 0x48, 0x41, 0x66, 0x38, 0x05, 0x6b, 0xbd,
	0x0a, 0xd6, 0x3a, 0x0a, 0xee, 0x00, 0x78, 0xcf, 0xf4, 0x66, 0xa5, 0xc6, 0xea, 0x84, 0xec, 0x12,
	0x5a, 0x49, 0x96, 0xcf, 0x1d, 0x1e, 0x14, 0x67, 0xf8, 0x0a, 0x1d, 0x9a, 0xa2, 0x8d, 0xfa, 0x83,
	0x7b, 0xec, 0xf7, 0x9f, 0x10, 0x64, 0xde, 0x22, 0xd4, 0x35, 0x6b, 0x1e, 0x2e, 0x41, 0x96, 0xee,
	0x09, 0x79, 0xc4, 0xe4, 0x43, 0x81, 0x25, 0x29, 0x8a, 0x96, 0xa1, 0x7b, 0x4c, 0x16, 0xbf, 0x02,
	0x63, 0xd5, 0x86, 0x53, 0x7b, 0x22, 0x44, 0x12, 0x4c, 0xe4, 0xfc, 0xe1, 0x41, 0x11, 0x73, 0x91,
	0x10, 0x51, 0xd1, 0x80, 0x8d, 0xb8, 0xe0, 0x3d, 0x48, 0xfb, 0x61, 0xe2, 0xe5, 0x92, 0xec, 0x58,
	0x59, 0xe8, 0x93, 0x12, 0x7e, 0xb4, 0x47, 0xc2, 0xd1, 0x97, 0xf1, 0xc3, 0x91, 0xfd, 0x3d, 0x0b,
	0x33, 0x0f, 0x09, 0x15, 0xd8, 0xc5, 0xb9, 0xa0, 0xbc, 0x01, 0x38, 0x3c, 0x29, 0x0e, 0xc5, 0x75,
	0x48, 0xb1, 0x8a, 0x83, 0x9f, 0x31, 0x85, 0x3e, 0xea, 0xa4, 0x14, 0xe3, 0x55, 0x7e, 0x8c, 0xe0,
	0xdc, 0x16, 0x75, 0x89, 0x6e, 0x89, 0x3a, 0x20, 0x58, 0xed, 0x3c, 0x8c, 0x88, 0xfa, 0xc9, 0x5f,
	0x2f, 0xa5, 0x89, 0x91, 0x5f, 0xa7, 0x1b, 0xa4, 0x41, 0x28, 0x31, 0x98, 0x29, 0x52, 0x9a, 0x1c,
	0x46, 0x6a, 0x8e, 0xe4, 0xf0, 0x35, 0x87, 0xf2, 0x0d, 0x82, 0x42, 0xe8, 0x28, 0xdd, 0xdf, 0x76,
	0xcd, 0x7a, 0x9d, 0xb8, 0xe5, 0xfd, 0x4d, 0xe3, 0xb4, 0x0f, 0x53, 0x7e, 0x09, 0x26, 0x82, 0x4b,
	0x70, 0x01, 0x46, 0x77, 0x5c, 0xc7, 0xe2, 0xf5, 0x9e, 0x9f, 0xf6, 0x49, 0x2d, 0xeb, 0x4f, 0xb0,
	0x9a, 0x6e, 0x0e, 0x32, 0xd4, 0xe1, 0xa4, 0x14, 0x23, 0x8d, 0x50, 0x87, 0x11, 0xee, 0x40, 0xc6,
	0x6b, 0xd5, 0x6a, 0x7e, 0xf5, 0x90, 0x3e, 0xfa, 0x14, 0x15, 0xac, 0xca, 0x1f, 0x10, 0x14, 0xfb,
	0x6e, 0xf3, 0xb4, 0xef, 0xb7, 0x87, 0x90, 0xa5, 0x7c, 0x7d, 0x79, 0xbb, 0xdd, 0x38, 0xaa, 0xe6,
	0xe2, 0xec, 0xf7, 0xfd, 0xae, 0x4e, 0x0b, 0x84, 0x95, 0x12, 0x2c, 0xf2, 0x38, 0xe9, 0xe2, 0x93,
	0x9e, 0xe1, 0x16, 0x45, 0xec, 0x66, 0x48, 0x98, 0x86, 0xf2, 0x73, 0x04, 0x17, 0xfa, 0x08, 0x9c,
	0x38, 0xc0, 0xc2, 0x9b, 0x49, 0xfe, 0x27, 0x9b, 0xf9, 0x1b, 0x82, 0xb9, 0x08, 0xb8, 0x50, 0x79,
	0x16, 0xdc, 0xb3, 0x28, 0xee, 0x9e, 0x1d, 0xb2, 0xd8, 0x92, 0x37, 0x66, 0xf2, 0xbf, 0x78, 0x63,
	0xbe, 0x8f, 0x20, 0xd7, 0xbb, 0x99, 0x13, 0x1b, 0x39, 0x5a, 0x11, 0x25, 0x87, 0xaf, 0x88, 0xaa,
	0xbc, 0xcb, 0x8e, 0x34, 0x36, 0xa7, 0x9c, 0xbf, 0xca, 0x6f, 0x10, 0xcc, 0xc7, 0x28, 0x39, 0xed,
	0xec, 0xd9, 0x80, 0x6c, 0xd0, 0xc7, 0xf1, 0xec, 0x39, 0x5e, 0x1f, 0xa7, 0x05, 0x62, 0xca, 0x22,
	0xe4, 0xb9, 0x73, 0xe2, 0xec, 0xa1, 0x7c, 0x80, 0x60, 0x21, 0x96, 0x7c, 0x62, 0xf7, 0x85, 0x21,
	0x27, 0x4f, 0x06, 0xf9, 0x63, 0x04, 0x79, 0x76, 0x40, 0xb5, 0xad, 0x8d, 0x1a, 0xbb, 0xd7, 0x1e,
	0x99, 0xf6, 0x93, 0x20, 0x41, 0x8a, 0x30, 0x26, 0xde, 0x97, 0xfc, 0xd6, 0x49, 0xa4, 0x89, 0xe8,
	0xc4, 0xfd, 0xae, 0x09, 0xcf, 0x43, 0xd6, 0x6b, 0x5b, 0x9c, 0xca, 0x8f, 0xd8, 0x8c, 0xd7, 0xb6,
	0x18, 0x29, 0xea, 0xff, 0xe4, 0x89, 0xfd, 0xff, 0x29, 0x82, 0x85, 0x58, 0x88, 0xa7, 0x1d, 0x01,
	0x65, 0x98, 0xd0, 0xb9, 0x82, 0x4a, 0xc3, 0xd7, 0x20, 0xc2, 0x40, 0x14, 0x97, 0x5e, 0xe8, 0x69,
	0x28, 0x84, 0x43, 0x1b, 0xd7, 0x43, 0xa0, 0x14, 0x22, 0x7d, 0x1c, 0x45, 0x2b, 0xed, 0x79, 0x19,
	0x26, 0x43, 0xf6, 0xec, 0xbc, 0x7f, 0x4d, 0x74, 0x4c, 0xea, 0x37, 0xa2, 0x45, 0x18, 0x93, 0x56,
	0xed, 0xb4, 0xab, 0x20, 0x0c, 0xeb, 0xdf, 0x2b, 0x1f, 0xa0, 0xe0, 0x88, 0xee, 0xd2, 0x73, 0xe2,
	0x60, 0x7a, 0x0d, 0xc6, 0xc3, 0xbb, 0x17, 0x01, 0x75, 0xc4, 0xe6, 0xc7, 0x42, 0x9b, 0x57, 0xee,
	0xf2, 0x16, 0xee, 0x75, 0xd7, 0xdc, 0xa1, 0xef, 0xb8, 0x06, 0x71, 0xc3, 0x61, 0x64, 0xe9, 0xee,
	0x13, 0x42, 0x2b, 0xb6, 0x6e, 0x11, 0x19, 0x46, 0x7c, 0xea, 0x6d, 0xdd, 0x22, 0xca, 0x36, 0x7f,
	0x2b, 0x8c, 0x88, 0x8a, 0x9d, 0xdc, 0x85, 0x11, 0x87, 0xcd, 0x88, 0xb7, 0x8d, 0x7e, 0xe7, 0x71,
	0x47, 0x56, 0x13, 0x02, 0xca, 0x2f, 0x10, 0x2c, 0xfb, 0xcb, 0x3e, 0x30, 0x1b, 0x0d, 0xbf, 0xab,
	0x61, 0x2c, 0x6f, 0x6e, 0x6e, 0x0f, 0x07, 0xce, 0x67, 0x78, 0xe6, 0xb8, 0x1e, 0xad, 0x34, 0x5d,
	0xb3, 0x46, 0x84, 0xdd, 0x80, 0x4d, 0x3d, 0xf6, 0x67, 0xf0, 0x22, 0x8c, 0x1a, 0xa6, 0x4b, 0x6a,
	0x41, 0xa0, 0x8f, 0x6a, 0x9d, 0x09, 0x9c, 0x87, 0xec, 0xd3, 0x96, 0x6e, 0x53, 0xbf, 0x3c, 0x4e,
	0x31, 0xd9, 0x60, 0xac, 0x34, 0x41, 0x19, 0x04, 0x50, 0x98, 0xe0, 0x4d, 0x98, 0xda, 0x11, 0x1c,
	0x95, 0x61, 0x6d, 0x31, 0x29, 0x25, 0xf9, 0x9a, 0xca, 0x0f, 0x53, 0x00, 0x1d, 0x32, 0xbe, 0x05,
	0xd8, 0x6b, 0x55, 0xa5, 0xe3, 0xa3, 0x41, 0x39, 0xd3, 0xa1, 0xc8, 0xc0, 0xbc, 0x08, 0x13, 0xec,
	0x8e, 0xec, 0x0a, 0xcd, 0x71, 0x36, 0x29, 0x99, 0x66, 0x21, 0xcd, 0x2d, 0x95, 0x64, 0xbb, 0xe5,
	0x03, 0x3f, 0xf4, 0xa9, 0x43, 0xf5, 0x46, 0xa5, 0xcb, 0x18, 0x13, 0x6c, 0xf6, 0x3b, 0x62, 0xb2,
	0xdb, 0x1b, 0xe9, 0x1e, 0x6f, 0xcc, 0x43, 0x96, 0xd9, 0xc0, 0x6f, 0xda, 0xfc, 0xdb, 0x74, 0x42,
	0xcb, 0xb0, 0xf1, 0xa6, 0x81, 0x4b, 0x70, 0x56, 0x6f, 0x31, 0xa3, 0x57, 0x3c, 0xaa, 0xbb, 0xd2,
	0x61, 0x19, 0x56, 0xc8, 0xcd, 0x08, 0xd2, 0x96, 0x4f, 0xe1, 0x7e, 0xbb, 0x0e, 0x72, 0xb2, 0x42,
	0x6c, 0x43, 0x70, 0xb3, 0x36, 0x43, 0x9b, 0x12, 0x84, 0xfb, 0xb6, 0xc1, 0x79, 0x31, 0xa4, 0xbc,
	0x86, 0x43, 0x73, 0xa3, 0x0c, 0x34, 0xfb, 0x8d, 0xaf, 0xc1, 0xb4, 0x94, 0x37, 0x5a, 0x2e, 0x3f,
	0x7f, 0x80, 0x41, 0x92, 0xe2, 0xaf, 0x8b, 0x69, 0x7c, 0x01, 0x80, 0xec, 0x35, 0x4d, 0xd7, 0x2f,
	0x03, 0x68, 0x6e, 0x8c, 0xe9, 0x18, 0x15, 0x33, 0x1b, 0x7e, 0xfb, 0x10, 0x8a, 0xa0, 0x71, 0xd6,
	0xd3, 0x5e, 0xee, 0xe3, 0x5b, 0xe6, 0xb7, 0xd7, 0x25, 0x73, 0x38, 0xd0, 0x6e, 0xc0, 0x4c, 0x10,
	0x26, 0x81, 0x91, 0x27, 0x18, 0xde, 0x69, 0x49, 0x90, 0x76, 0x56, 0x1c, 0x59, 0x48, 0x9c, 0x20,
	0x5d, 0x3b, 0x1e, 0x4e, 0x84, 0x3d, 0x3c, 0x30, 0x0d, 0x94, 0x1f, 0x21, 0x98, 0x8f, 0xd1, 0x78,
	0xe2, 0xf3, 0xea, 0x15, 0x48, 0x33, 0xbf, 0x1f, 0xf1, 0x1c, 0x12, 0x4a, 0x05, 0xce, 0x7f, 0xfd,
	0x32, 0x4c, 0x46, 0x6d, 0x88, 0xb3, 0x90, 0x7a, 0xe4, 0xd8, 0xf5, 0xe9, 0x33, 0x78, 0x14, 0xd2,
	0x5b, 0xbb, 0x8e, 0x4b, 0xa7, 0xd1, 0xfa, 0xef, 0x66, 0x21, 0xb9, 0xf1, 0x78, 0x13, 0xff, 0x0c,
	0xc1, 0x74, 0xf7, 0x97, 0x04, 0x5c, 0xea, 0xa3, 0xad, 0xcf, 0x07, 0x8f, 0xbc, 0x7a, 0x6c, 0x7e,
	0x6e, 0x0f, 0x45, 0xf9, 0xfe, 0x57, 0xdf, 0x7c, 0x98, 0x58, 0xc4, 0xf9, 0xce, 0xe7, 0xae, 0x36,
	0xfb, 0xae, 0xa4, 0x76, 0x3e, 0x44, 0xfc, 0x00, 0x41, 0x56, 0x3e, 0x06, 0xe3, 0x2b, 0x83, 0xdb,
	0xaf, 0x00, 0xc9, 0xd5, 0x23, 0xf9, 0x04, 0x82, 0xab, 0x0c, 0xc1, 0x32, 0x2e, 0x46, 0x10, 0xc8,
	0x06, 0x4e, 0x7d, 0x2e, 0x4e, 0x80, 0xf7, 0xf0, 0x4f, 0x10, 0x4c, 0x46, 0x5f, 0xc5, 0xf0, 0xcd,
	0x01, 0xdb, 0xed, 0xa9, 0xc2, 0xf3, 0xb7, 0x8e, 0xc9, 0x2d, 0x80, 0x15, 0x19, 0xb0, 0x79, 0x3c,
	0x17, 0x01, 0xd6, 0x29, 0x4a, 0xf1, 0xaf, 0x50, 0xf7, 0x73, 0xac, 0x78, 0xa6, 0xc3, 0xb7, 0x8f,
	0xa5, 0x29, 0xfa, 0xa8, 0x37, 0x2c, 0xbc, 0x78, 0xbb, 0x75, 0xe0, 0xa9, 0xcf, 0xd9, 0x61, 0xf9,
	0x1e, 0xfe, 0x1e, 0x40, 0xa7, 0xb1, 0xc7, 0x2b, 0x7d, 0xb4, 0xf4, 0x3c, 0x08, 0xe4, 0xaf, 0x1d,
	0x83, 0x53, 0x60, 0x59, 0x64, 0x58, 0xce, 0xe3, 0xd9, 0x08, 0x16, 0x4b, 0xa8, 0xfc, 0xa3, 0xf8,
	0x46, 0xd6, 0xd5, 0x40, 0x79, 0x7e, 0x77, 0x8a, 0x5f, 0x3a, 0x7a, 0xd7, 0x31, 0x4d, 0x7b, 0xfe,
	0xe5, 0x61, 0xc5, 0x04, 0xd2, 0x1b, 0x0c, 0xe9, 0x65, 0x7c, 0x31, 0xce, 0x6a, 0xfb, 0xea, 0x73,
	0xd3, 0x78, 0x4f, 0x95, 0x2d, 0x1d, 0xfe, 0x08, 0xc1, 0x4c, 0x4f, 0x47, 0x80, 0x07, 0xe5, 0x58,
	0x5c, 0x41, 0x9e, 0x5f, 0x3d, 0xbe, 0x80, 0x40, 0x79, 0x91, 0xa1, 0xbc, 0x80, 0x17, 0x22, 0x28,
	0xd9, 0xb3, 0x55, 0xf0, 0xf5, 0xc6, 0x0f, 0xbf, 0xb3, 0x31, 0xf5, 0x2a, 0x5e, 0x1b, 0x64, 0x9a,
	0xd8, 0xf2, 0x3b, 0xbf, 0x3e, 0x8c, 0x88, 0xc0, 0x78, 0x85, 0x61, 0x5c, 0xc2, 0x85, 0xa8, 0x25,
	0xdb, 0x96, 0x1a, 0x29, 0x6e, 0x59, 0xda, 0x46, 0x5e, 0x83, 0x8e, 0x7f, 0x86, 0xf4, 0x4b, 0xef,
	0xd8, 0xc7, 0x25, 0xe5, 0x12, 0x03, 0x54, 0xc0, 0x8b, 0xdd, 0xae, 0x25, 0xba, 0x55, 0x91, 0xe7,
	0xc9, 0x2a, 0xc2, 0x7f, 0x46, 0x70, 0x3e, 0xf6, 0x15, 0xc1, 0xeb, 0x9b, 0xb7, 0x83, 0x5e, 0x29,
	0xf2, 0x77, 0x86, 0x13, 0x12, 0x68, 0xd7, 0x19, 0xda, 0x9b, 0xf8, 0xfa, 0x80, 0x40, 0x14, 0xd8,
	0x65, 0x3c, 0xae, 0x22, 0xfc, 0x6b, 0x04, 0xd3, 0xdd, 0x7d, 0x79, 0xdf, 0x4b, 0xa2, 0xcf, 0x6b,
	0x44, 0xdf, 0x4b, 0xa2, 0x5f, 0xc3, 0xaf, 0xa8, 0x0c, 0xeb, 0x35, 0x7c, 0x35, 0x1e, 0xab, 0x80,
	0xd9, 0x39, 0x7a, 0x56, 0x11, 0xfe, 0x14, 0xc1, 0xd9, 0x98, 0x26, 0xb4, 0x6f, 0x70, 0xf6, 0xef,
	0x67, 0xfb, 0x06, 0xe7, 0x80, 0x1e, 0x57, 0xb9, 0xce, 0x10, 0x5f, 0xc2, 0x4a, 0x5c, 0x2c, 0x44,
	0xf3, 0x68, 0x15, 0xe1, 0xdf, 0x23, 0x98, 0x8d, 0xeb, 0x72, 0xf0, 0x60, 0xd5, 0xb1, 0xad, 0x57,
	0xfe, 0xf6, 0x50, 0x32, 0x02, 0xef, 0x4d, 0x86, 0xf7, 0x0a, 0xbe, 0xd4, 0x93, 0x4c, 0x02, 0x73,
	0x38, 0xa7, 0x56, 0x11, 0xfe, 0x10, 0xc1, 0x54, 0x57, 0x23, 0x83, 0x07, 0xdd, 0x1f, 0xbd, 0xc5,
	0x57, 0xbe, 0x74, 0x5c, 0x76, 0x01, 0x71, 0x99, 0x41, 0x5c, 0xc0, 0xf3, 0x11, 0x88, 0x86, 0xcf,
	0xa9, 0xf2, 0x66, 0x01, 0xff, 0x45, 0x34, 0xf9, 0xf1, 0x6d, 0x06, 0xfe, 0xbf, 0x01, 0x1a, 0x07,
	0xb6, 0x4e, 0xf9, 0xbb, 0x27, 0x90, 0x1c, 0x18, 0x09, 0x1c, 0x76, 0x57, 0xb3, 0x83, 0x3f, 0x41,
	0x30, 0xd3, 0x53, 0x3a, 0xe2, 0xc1, 0xe9, 0x12, 0x63, 0xd9, 0xd5, 0xe3, 0x0b, 0x08, 0x90, 0x2b,
	0x0c, 0xa4, 0x82, 0x97, 0x62, 0x40, 0x8a, 0x00, 0xe0, 0x10, 0x57, 0x51, 0xf9, 0xad, 0xcf, 0xbf,
	0x2e, 0xa0, 0x2f, 0xbe, 0x2e, 0xa0, 0x7f, 0x7d, 0x5d, 0x40, 0x3f, 0x7d, 0x51, 0x38, 0xf3, 0xc5,
	0x8b, 0xc2, 0x99, 0x7f, 0xbc, 0x28, 0x9c, 0xf9, 0xee, 0xed, 0xba, 0x49, 0x77, 0x5b, 0xd5, 0x52,
	0xcd, 0xb1, 0xd4, 0x07, 0x8d, 0xd6, 0xde, 0xdb, 0x0f, 0xb6, 0x1f, 0xe9, 0x55, 0x4f, 0xf5, 0xd1,
	0x18, 0x6a, 0x6d, 0x57, 0x37, 0xed, 0x9e, 0x7f, 0x6e, 0xaa, 0x8e, 0xb0, 0x67, 0xe5, 0xdb, 0xff,
	0x0e, 0x00, 0x00, 0xff, 0xff, 0x6c, 0x2c, 0xfe, 0x50, 0xfc, 0x24, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// APIClient is the client API for API service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type APIClient interface {
	ListEvmContracts(ctx context.Context, in *ListEvmContractsRequest, opts ...grpc.CallOption) (*ListEvmContractsResponse, error)
	Balances(ctx context.Context, in *BalancesRequest, opts ...grpc.CallOption) (*BalancesResponse, error)
	ListStrategies(ctx context.Context, in *ListStrategiesRequest, opts ...grpc.CallOption) (*ListStrategiesResponse, error)
	ListStrategiesByOwner(ctx context.Context, in *ListStrategiesByOwnerRequest, opts ...grpc.CallOption) (*ListStrategiesResponse, error)
	GetMetrics(ctx context.Context, in *GetMetricsRequest, opts ...grpc.CallOption) (*GetMetricsResponse, error)
	ListStrategyTriggersById(ctx context.Context, in *ListStrategyTriggerByIdRequest, opts ...grpc.CallOption) (*ListStrategyTriggerByIdResponse, error)
	ListTokenMetadata(ctx context.Context, in *ListTokenMetadataRequest, opts ...grpc.CallOption) (*ListTokenMetadataResponse, error)
	ListSvmAccountLinks(ctx context.Context, in *ListSvmAccountLinksRequest, opts ...grpc.CallOption) (*ListSvmAccountLinksResponse, error)
	StreamBalances(ctx context.Context, in *BalancesRequest, opts ...grpc.CallOption) (API_StreamBalancesClient, error)
	StreamStrategyTriggers(ctx context.Context, in *StreamStrategyTriggerRequest, opts ...grpc.CallOption) (API_StreamStrategyTriggersClient, error)
	StreamStrategies(ctx context.Context, in *StreamStrategiesRequest, opts ...grpc.CallOption) (API_StreamStrategiesClient, error)
	StreamTokenMetadata(ctx context.Context, in *StreamTokenMetadataRequest, opts ...grpc.CallOption) (API_StreamTokenMetadataClient, error)
	StreamSvmAccountLink(ctx context.Context, in *StreamSvmAccountLinkRequest, opts ...grpc.CallOption) (API_StreamSvmAccountLinkClient, error)
	ListDriftOrders(ctx context.Context, in *ListDriftOrdersRequest, opts ...grpc.CallOption) (*ListDriftOrdersResponse, error)
	ListFillableDriftJITOrders(ctx context.Context, in *ListFillableDriftJITOrdersRequest, opts ...grpc.CallOption) (*ListFillableDriftJITOrdersResponse, error)
	StreamDriftOrders(ctx context.Context, in *StreamDriftOrdersRequest, opts ...grpc.CallOption) (API_StreamDriftOrdersClient, error)
}

type aPIClient struct {
	cc grpc1.ClientConn
}

func NewAPIClient(cc grpc1.ClientConn) APIClient {
	return &aPIClient{cc}
}

func (c *aPIClient) ListEvmContracts(ctx context.Context, in *ListEvmContractsRequest, opts ...grpc.CallOption) (*ListEvmContractsResponse, error) {
	out := new(ListEvmContractsResponse)
	err := c.cc.Invoke(ctx, "/flux.indexer.explorer.API/ListEvmContracts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) Balances(ctx context.Context, in *BalancesRequest, opts ...grpc.CallOption) (*BalancesResponse, error) {
	out := new(BalancesResponse)
	err := c.cc.Invoke(ctx, "/flux.indexer.explorer.API/Balances", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) ListStrategies(ctx context.Context, in *ListStrategiesRequest, opts ...grpc.CallOption) (*ListStrategiesResponse, error) {
	out := new(ListStrategiesResponse)
	err := c.cc.Invoke(ctx, "/flux.indexer.explorer.API/ListStrategies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) ListStrategiesByOwner(ctx context.Context, in *ListStrategiesByOwnerRequest, opts ...grpc.CallOption) (*ListStrategiesResponse, error) {
	out := new(ListStrategiesResponse)
	err := c.cc.Invoke(ctx, "/flux.indexer.explorer.API/ListStrategiesByOwner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) GetMetrics(ctx context.Context, in *GetMetricsRequest, opts ...grpc.CallOption) (*GetMetricsResponse, error) {
	out := new(GetMetricsResponse)
	err := c.cc.Invoke(ctx, "/flux.indexer.explorer.API/GetMetrics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) ListStrategyTriggersById(ctx context.Context, in *ListStrategyTriggerByIdRequest, opts ...grpc.CallOption) (*ListStrategyTriggerByIdResponse, error) {
	out := new(ListStrategyTriggerByIdResponse)
	err := c.cc.Invoke(ctx, "/flux.indexer.explorer.API/ListStrategyTriggersById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) ListTokenMetadata(ctx context.Context, in *ListTokenMetadataRequest, opts ...grpc.CallOption) (*ListTokenMetadataResponse, error) {
	out := new(ListTokenMetadataResponse)
	err := c.cc.Invoke(ctx, "/flux.indexer.explorer.API/ListTokenMetadata", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) ListSvmAccountLinks(ctx context.Context, in *ListSvmAccountLinksRequest, opts ...grpc.CallOption) (*ListSvmAccountLinksResponse, error) {
	out := new(ListSvmAccountLinksResponse)
	err := c.cc.Invoke(ctx, "/flux.indexer.explorer.API/ListSvmAccountLinks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) StreamBalances(ctx context.Context, in *BalancesRequest, opts ...grpc.CallOption) (API_StreamBalancesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_API_serviceDesc.Streams[0], "/flux.indexer.explorer.API/StreamBalances", opts...)
	if err != nil {
		return nil, err
	}
	x := &aPIStreamBalancesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type API_StreamBalancesClient interface {
	Recv() (*StreamBalanceResponse, error)
	grpc.ClientStream
}

type aPIStreamBalancesClient struct {
	grpc.ClientStream
}

func (x *aPIStreamBalancesClient) Recv() (*StreamBalanceResponse, error) {
	m := new(StreamBalanceResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *aPIClient) StreamStrategyTriggers(ctx context.Context, in *StreamStrategyTriggerRequest, opts ...grpc.CallOption) (API_StreamStrategyTriggersClient, error) {
	stream, err := c.cc.NewStream(ctx, &_API_serviceDesc.Streams[1], "/flux.indexer.explorer.API/StreamStrategyTriggers", opts...)
	if err != nil {
		return nil, err
	}
	x := &aPIStreamStrategyTriggersClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type API_StreamStrategyTriggersClient interface {
	Recv() (*StreamStrategyTriggerResponse, error)
	grpc.ClientStream
}

type aPIStreamStrategyTriggersClient struct {
	grpc.ClientStream
}

func (x *aPIStreamStrategyTriggersClient) Recv() (*StreamStrategyTriggerResponse, error) {
	m := new(StreamStrategyTriggerResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *aPIClient) StreamStrategies(ctx context.Context, in *StreamStrategiesRequest, opts ...grpc.CallOption) (API_StreamStrategiesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_API_serviceDesc.Streams[2], "/flux.indexer.explorer.API/StreamStrategies", opts...)
	if err != nil {
		return nil, err
	}
	x := &aPIStreamStrategiesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type API_StreamStrategiesClient interface {
	Recv() (*StreamStrategiesResponse, error)
	grpc.ClientStream
}

type aPIStreamStrategiesClient struct {
	grpc.ClientStream
}

func (x *aPIStreamStrategiesClient) Recv() (*StreamStrategiesResponse, error) {
	m := new(StreamStrategiesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *aPIClient) StreamTokenMetadata(ctx context.Context, in *StreamTokenMetadataRequest, opts ...grpc.CallOption) (API_StreamTokenMetadataClient, error) {
	stream, err := c.cc.NewStream(ctx, &_API_serviceDesc.Streams[3], "/flux.indexer.explorer.API/StreamTokenMetadata", opts...)
	if err != nil {
		return nil, err
	}
	x := &aPIStreamTokenMetadataClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type API_StreamTokenMetadataClient interface {
	Recv() (*StreamTokenMetadataResponse, error)
	grpc.ClientStream
}

type aPIStreamTokenMetadataClient struct {
	grpc.ClientStream
}

func (x *aPIStreamTokenMetadataClient) Recv() (*StreamTokenMetadataResponse, error) {
	m := new(StreamTokenMetadataResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *aPIClient) StreamSvmAccountLink(ctx context.Context, in *StreamSvmAccountLinkRequest, opts ...grpc.CallOption) (API_StreamSvmAccountLinkClient, error) {
	stream, err := c.cc.NewStream(ctx, &_API_serviceDesc.Streams[4], "/flux.indexer.explorer.API/StreamSvmAccountLink", opts...)
	if err != nil {
		return nil, err
	}
	x := &aPIStreamSvmAccountLinkClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type API_StreamSvmAccountLinkClient interface {
	Recv() (*StreamSvmAccountLinkResponse, error)
	grpc.ClientStream
}

type aPIStreamSvmAccountLinkClient struct {
	grpc.ClientStream
}

func (x *aPIStreamSvmAccountLinkClient) Recv() (*StreamSvmAccountLinkResponse, error) {
	m := new(StreamSvmAccountLinkResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *aPIClient) ListDriftOrders(ctx context.Context, in *ListDriftOrdersRequest, opts ...grpc.CallOption) (*ListDriftOrdersResponse, error) {
	out := new(ListDriftOrdersResponse)
	err := c.cc.Invoke(ctx, "/flux.indexer.explorer.API/ListDriftOrders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) ListFillableDriftJITOrders(ctx context.Context, in *ListFillableDriftJITOrdersRequest, opts ...grpc.CallOption) (*ListFillableDriftJITOrdersResponse, error) {
	out := new(ListFillableDriftJITOrdersResponse)
	err := c.cc.Invoke(ctx, "/flux.indexer.explorer.API/ListFillableDriftJITOrders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) StreamDriftOrders(ctx context.Context, in *StreamDriftOrdersRequest, opts ...grpc.CallOption) (API_StreamDriftOrdersClient, error) {
	stream, err := c.cc.NewStream(ctx, &_API_serviceDesc.Streams[5], "/flux.indexer.explorer.API/StreamDriftOrders", opts...)
	if err != nil {
		return nil, err
	}
	x := &aPIStreamDriftOrdersClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type API_StreamDriftOrdersClient interface {
	Recv() (*StreamDriftOrdersResponse, error)
	grpc.ClientStream
}

type aPIStreamDriftOrdersClient struct {
	grpc.ClientStream
}

func (x *aPIStreamDriftOrdersClient) Recv() (*StreamDriftOrdersResponse, error) {
	m := new(StreamDriftOrdersResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// APIServer is the server API for API service.
type APIServer interface {
	ListEvmContracts(context.Context, *ListEvmContractsRequest) (*ListEvmContractsResponse, error)
	Balances(context.Context, *BalancesRequest) (*BalancesResponse, error)
	ListStrategies(context.Context, *ListStrategiesRequest) (*ListStrategiesResponse, error)
	ListStrategiesByOwner(context.Context, *ListStrategiesByOwnerRequest) (*ListStrategiesResponse, error)
	GetMetrics(context.Context, *GetMetricsRequest) (*GetMetricsResponse, error)
	ListStrategyTriggersById(context.Context, *ListStrategyTriggerByIdRequest) (*ListStrategyTriggerByIdResponse, error)
	ListTokenMetadata(context.Context, *ListTokenMetadataRequest) (*ListTokenMetadataResponse, error)
	ListSvmAccountLinks(context.Context, *ListSvmAccountLinksRequest) (*ListSvmAccountLinksResponse, error)
	StreamBalances(*BalancesRequest, API_StreamBalancesServer) error
	StreamStrategyTriggers(*StreamStrategyTriggerRequest, API_StreamStrategyTriggersServer) error
	StreamStrategies(*StreamStrategiesRequest, API_StreamStrategiesServer) error
	StreamTokenMetadata(*StreamTokenMetadataRequest, API_StreamTokenMetadataServer) error
	StreamSvmAccountLink(*StreamSvmAccountLinkRequest, API_StreamSvmAccountLinkServer) error
	ListDriftOrders(context.Context, *ListDriftOrdersRequest) (*ListDriftOrdersResponse, error)
	ListFillableDriftJITOrders(context.Context, *ListFillableDriftJITOrdersRequest) (*ListFillableDriftJITOrdersResponse, error)
	StreamDriftOrders(*StreamDriftOrdersRequest, API_StreamDriftOrdersServer) error
}

// UnimplementedAPIServer can be embedded to have forward compatible implementations.
type UnimplementedAPIServer struct {
}

func (*UnimplementedAPIServer) ListEvmContracts(ctx context.Context, req *ListEvmContractsRequest) (*ListEvmContractsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEvmContracts not implemented")
}
func (*UnimplementedAPIServer) Balances(ctx context.Context, req *BalancesRequest) (*BalancesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Balances not implemented")
}
func (*UnimplementedAPIServer) ListStrategies(ctx context.Context, req *ListStrategiesRequest) (*ListStrategiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListStrategies not implemented")
}
func (*UnimplementedAPIServer) ListStrategiesByOwner(ctx context.Context, req *ListStrategiesByOwnerRequest) (*ListStrategiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListStrategiesByOwner not implemented")
}
func (*UnimplementedAPIServer) GetMetrics(ctx context.Context, req *GetMetricsRequest) (*GetMetricsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMetrics not implemented")
}
func (*UnimplementedAPIServer) ListStrategyTriggersById(ctx context.Context, req *ListStrategyTriggerByIdRequest) (*ListStrategyTriggerByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListStrategyTriggersById not implemented")
}
func (*UnimplementedAPIServer) ListTokenMetadata(ctx context.Context, req *ListTokenMetadataRequest) (*ListTokenMetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTokenMetadata not implemented")
}
func (*UnimplementedAPIServer) ListSvmAccountLinks(ctx context.Context, req *ListSvmAccountLinksRequest) (*ListSvmAccountLinksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSvmAccountLinks not implemented")
}
func (*UnimplementedAPIServer) StreamBalances(req *BalancesRequest, srv API_StreamBalancesServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamBalances not implemented")
}
func (*UnimplementedAPIServer) StreamStrategyTriggers(req *StreamStrategyTriggerRequest, srv API_StreamStrategyTriggersServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamStrategyTriggers not implemented")
}
func (*UnimplementedAPIServer) StreamStrategies(req *StreamStrategiesRequest, srv API_StreamStrategiesServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamStrategies not implemented")
}
func (*UnimplementedAPIServer) StreamTokenMetadata(req *StreamTokenMetadataRequest, srv API_StreamTokenMetadataServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamTokenMetadata not implemented")
}
func (*UnimplementedAPIServer) StreamSvmAccountLink(req *StreamSvmAccountLinkRequest, srv API_StreamSvmAccountLinkServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamSvmAccountLink not implemented")
}
func (*UnimplementedAPIServer) ListDriftOrders(ctx context.Context, req *ListDriftOrdersRequest) (*ListDriftOrdersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDriftOrders not implemented")
}
func (*UnimplementedAPIServer) ListFillableDriftJITOrders(ctx context.Context, req *ListFillableDriftJITOrdersRequest) (*ListFillableDriftJITOrdersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFillableDriftJITOrders not implemented")
}
func (*UnimplementedAPIServer) StreamDriftOrders(req *StreamDriftOrdersRequest, srv API_StreamDriftOrdersServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamDriftOrders not implemented")
}

func RegisterAPIServer(s grpc1.Server, srv APIServer) {
	s.RegisterService(&_API_serviceDesc, srv)
}

func _API_ListEvmContracts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEvmContractsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).ListEvmContracts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flux.indexer.explorer.API/ListEvmContracts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).ListEvmContracts(ctx, req.(*ListEvmContractsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_Balances_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BalancesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).Balances(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flux.indexer.explorer.API/Balances",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).Balances(ctx, req.(*BalancesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_ListStrategies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListStrategiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).ListStrategies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flux.indexer.explorer.API/ListStrategies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).ListStrategies(ctx, req.(*ListStrategiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_ListStrategiesByOwner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListStrategiesByOwnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).ListStrategiesByOwner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flux.indexer.explorer.API/ListStrategiesByOwner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).ListStrategiesByOwner(ctx, req.(*ListStrategiesByOwnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_GetMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).GetMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flux.indexer.explorer.API/GetMetrics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).GetMetrics(ctx, req.(*GetMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_ListStrategyTriggersById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListStrategyTriggerByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).ListStrategyTriggersById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flux.indexer.explorer.API/ListStrategyTriggersById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).ListStrategyTriggersById(ctx, req.(*ListStrategyTriggerByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_ListTokenMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTokenMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).ListTokenMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flux.indexer.explorer.API/ListTokenMetadata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).ListTokenMetadata(ctx, req.(*ListTokenMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_ListSvmAccountLinks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSvmAccountLinksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).ListSvmAccountLinks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flux.indexer.explorer.API/ListSvmAccountLinks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).ListSvmAccountLinks(ctx, req.(*ListSvmAccountLinksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_StreamBalances_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(BalancesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(APIServer).StreamBalances(m, &aPIStreamBalancesServer{stream})
}

type API_StreamBalancesServer interface {
	Send(*StreamBalanceResponse) error
	grpc.ServerStream
}

type aPIStreamBalancesServer struct {
	grpc.ServerStream
}

func (x *aPIStreamBalancesServer) Send(m *StreamBalanceResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _API_StreamStrategyTriggers_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamStrategyTriggerRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(APIServer).StreamStrategyTriggers(m, &aPIStreamStrategyTriggersServer{stream})
}

type API_StreamStrategyTriggersServer interface {
	Send(*StreamStrategyTriggerResponse) error
	grpc.ServerStream
}

type aPIStreamStrategyTriggersServer struct {
	grpc.ServerStream
}

func (x *aPIStreamStrategyTriggersServer) Send(m *StreamStrategyTriggerResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _API_StreamStrategies_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamStrategiesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(APIServer).StreamStrategies(m, &aPIStreamStrategiesServer{stream})
}

type API_StreamStrategiesServer interface {
	Send(*StreamStrategiesResponse) error
	grpc.ServerStream
}

type aPIStreamStrategiesServer struct {
	grpc.ServerStream
}

func (x *aPIStreamStrategiesServer) Send(m *StreamStrategiesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _API_StreamTokenMetadata_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamTokenMetadataRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(APIServer).StreamTokenMetadata(m, &aPIStreamTokenMetadataServer{stream})
}

type API_StreamTokenMetadataServer interface {
	Send(*StreamTokenMetadataResponse) error
	grpc.ServerStream
}

type aPIStreamTokenMetadataServer struct {
	grpc.ServerStream
}

func (x *aPIStreamTokenMetadataServer) Send(m *StreamTokenMetadataResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _API_StreamSvmAccountLink_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamSvmAccountLinkRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(APIServer).StreamSvmAccountLink(m, &aPIStreamSvmAccountLinkServer{stream})
}

type API_StreamSvmAccountLinkServer interface {
	Send(*StreamSvmAccountLinkResponse) error
	grpc.ServerStream
}

type aPIStreamSvmAccountLinkServer struct {
	grpc.ServerStream
}

func (x *aPIStreamSvmAccountLinkServer) Send(m *StreamSvmAccountLinkResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _API_ListDriftOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDriftOrdersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).ListDriftOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flux.indexer.explorer.API/ListDriftOrders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).ListDriftOrders(ctx, req.(*ListDriftOrdersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_ListFillableDriftJITOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFillableDriftJITOrdersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).ListFillableDriftJITOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flux.indexer.explorer.API/ListFillableDriftJITOrders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).ListFillableDriftJITOrders(ctx, req.(*ListFillableDriftJITOrdersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_StreamDriftOrders_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamDriftOrdersRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(APIServer).StreamDriftOrders(m, &aPIStreamDriftOrdersServer{stream})
}

type API_StreamDriftOrdersServer interface {
	Send(*StreamDriftOrdersResponse) error
	grpc.ServerStream
}

type aPIStreamDriftOrdersServer struct {
	grpc.ServerStream
}

func (x *aPIStreamDriftOrdersServer) Send(m *StreamDriftOrdersResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _API_serviceDesc = grpc.ServiceDesc{
	ServiceName: "flux.indexer.explorer.API",
	HandlerType: (*APIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListEvmContracts",
			Handler:    _API_ListEvmContracts_Handler,
		},
		{
			MethodName: "Balances",
			Handler:    _API_Balances_Handler,
		},
		{
			MethodName: "ListStrategies",
			Handler:    _API_ListStrategies_Handler,
		},
		{
			MethodName: "ListStrategiesByOwner",
			Handler:    _API_ListStrategiesByOwner_Handler,
		},
		{
			MethodName: "GetMetrics",
			Handler:    _API_GetMetrics_Handler,
		},
		{
			MethodName: "ListStrategyTriggersById",
			Handler:    _API_ListStrategyTriggersById_Handler,
		},
		{
			MethodName: "ListTokenMetadata",
			Handler:    _API_ListTokenMetadata_Handler,
		},
		{
			MethodName: "ListSvmAccountLinks",
			Handler:    _API_ListSvmAccountLinks_Handler,
		},
		{
			MethodName: "ListDriftOrders",
			Handler:    _API_ListDriftOrders_Handler,
		},
		{
			MethodName: "ListFillableDriftJITOrders",
			Handler:    _API_ListFillableDriftJITOrders_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamBalances",
			Handler:       _API_StreamBalances_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamStrategyTriggers",
			Handler:       _API_StreamStrategyTriggers_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamStrategies",
			Handler:       _API_StreamStrategies_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamTokenMetadata",
			Handler:       _API_StreamTokenMetadata_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamSvmAccountLink",
			Handler:       _API_StreamSvmAccountLink_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamDriftOrders",
			Handler:       _API_StreamDriftOrders_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "flux/indexer/explorer/query.proto",
}

func (m *ListEvmContractsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListEvmContractsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListEvmContractsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListEvmContractsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListEvmContractsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListEvmContractsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Contracts) > 0 {
		for iNdEx := len(m.Contracts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Contracts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *BalancesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BalancesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BalancesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BalanceInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BalanceInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BalanceInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DenomMetadata != nil {
		{
			size, err := m.DenomMetadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.UpdatedTime != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.UpdatedTime))
		i--
		dAtA[i] = 0x30
	}
	if m.UpdatedHeight != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.UpdatedHeight))
		i--
		dAtA[i] = 0x28
	}
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Plane != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Plane))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Acc) > 0 {
		i -= len(m.Acc)
		copy(dAtA[i:], m.Acc)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Acc)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BalancesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BalancesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BalancesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Balances) > 0 {
		for iNdEx := len(m.Balances) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Balances[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *TypeFilter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TypeFilter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TypeFilter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Value != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Value))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SupportedAppFilter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SupportedAppFilter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SupportedAppFilter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Verified != nil {
		{
			size, err := m.Verified.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ContractAddress) > 0 {
		i -= len(m.ContractAddress)
		copy(dAtA[i:], m.ContractAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ContractAddress)))
		i--
		dAtA[i] = 0x12
	}
	if m.Plane != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Plane))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ListStrategiesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListStrategiesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListStrategiesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SupportedApp != nil {
		{
			size, err := m.SupportedApp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if len(m.Tags) > 0 {
		for iNdEx := len(m.Tags) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Tags[iNdEx])
			copy(dAtA[i:], m.Tags[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.Tags[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.Enabled != nil {
		{
			size, err := m.Enabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Type != nil {
		{
			size, err := m.Type.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListStrategiesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListStrategiesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListStrategiesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Strategies) > 0 {
		for iNdEx := len(m.Strategies) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Strategies[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListStrategiesByOwnerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListStrategiesByOwnerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListStrategiesByOwnerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SupportedApp != nil {
		{
			size, err := m.SupportedApp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if len(m.Tags) > 0 {
		for iNdEx := len(m.Tags) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Tags[iNdEx])
			copy(dAtA[i:], m.Tags[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.Tags[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.Enabled != nil {
		{
			size, err := m.Enabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Type != nil {
		{
			size, err := m.Type.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x12
	}
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Pool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Pool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Pool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SwapCount != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.SwapCount))
		i--
		dAtA[i] = 0x40
	}
	if m.Token1Liquidity != nil {
		{
			size := m.Token1Liquidity.Size()
			i -= size
			if _, err := m.Token1Liquidity.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.Token0Liquidity != nil {
		{
			size := m.Token0Liquidity.Size()
			i -= size
			if _, err := m.Token0Liquidity.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.Token1Volume != nil {
		{
			size := m.Token1Volume.Size()
			i -= size
			if _, err := m.Token1Volume.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.Token0Volume != nil {
		{
			size := m.Token0Volume.Size()
			i -= size
			if _, err := m.Token0Volume.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.PoolId) > 0 {
		i -= len(m.PoolId)
		copy(dAtA[i:], m.PoolId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.PoolId)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Plane != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Plane))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Exchange) > 0 {
		i -= len(m.Exchange)
		copy(dAtA[i:], m.Exchange)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Exchange)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Metrics) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Metrics) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Metrics) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Pools) > 0 {
		for iNdEx := len(m.Pools) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Pools[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.BlockCount != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.BlockCount))
		i--
		dAtA[i] = 0x10
	}
	if m.TxCount != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TxCount))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetMetricsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetMetricsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetMetricsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GetMetricsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetMetricsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetMetricsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Data != nil {
		{
			size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StreamBalanceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StreamBalanceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StreamBalanceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Balances) > 0 {
		for iNdEx := len(m.Balances) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Balances[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Deleted != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Deleted))
		i--
		dAtA[i] = 0x10
	}
	if m.Height != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ListStrategyTriggerByIdRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListStrategyTriggerByIdRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListStrategyTriggerByIdRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Success != nil {
		{
			size, err := m.Success.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.ToTime != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ToTime))
		i--
		dAtA[i] = 0x20
	}
	if m.FromTime != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.FromTime))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0x12
	}
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListStrategyTriggerByIdResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListStrategyTriggerByIdResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListStrategyTriggerByIdResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Triggers) > 0 {
		for iNdEx := len(m.Triggers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Triggers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StreamStrategyTriggerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StreamStrategyTriggerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StreamStrategyTriggerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		for iNdEx := len(m.Id) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Id[iNdEx])
			copy(dAtA[i:], m.Id[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.Id[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *StreamStrategyTriggerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StreamStrategyTriggerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StreamStrategyTriggerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Triggers) > 0 {
		for iNdEx := len(m.Triggers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Triggers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Deleted != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Deleted))
		i--
		dAtA[i] = 0x10
	}
	if m.Height != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *StreamStrategiesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StreamStrategiesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StreamStrategiesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SupportedApp != nil {
		{
			size, err := m.SupportedApp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if len(m.Tags) > 0 {
		for iNdEx := len(m.Tags) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Tags[iNdEx])
			copy(dAtA[i:], m.Tags[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.Tags[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Type != nil {
		{
			size, err := m.Type.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StreamStrategiesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StreamStrategiesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StreamStrategiesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Strategies) > 0 {
		for iNdEx := len(m.Strategies) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Strategies[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Deleted != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Deleted))
		i--
		dAtA[i] = 0x10
	}
	if m.Height != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ListTokenMetadataRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListTokenMetadataRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListTokenMetadataRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListTokenMetadataResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListTokenMetadataResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListTokenMetadataResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Metadata) > 0 {
		for iNdEx := len(m.Metadata) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Metadata[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StreamTokenMetadataRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StreamTokenMetadataRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StreamTokenMetadataRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *StreamTokenMetadataResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StreamTokenMetadataResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StreamTokenMetadataResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Metadata) > 0 {
		for iNdEx := len(m.Metadata) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Metadata[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Deleted != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Deleted))
		i--
		dAtA[i] = 0x10
	}
	if m.Height != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ListSvmAccountLinksRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListSvmAccountLinksRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListSvmAccountLinksRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.SvmAddr) > 0 {
		i -= len(m.SvmAddr)
		copy(dAtA[i:], m.SvmAddr)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SvmAddr)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.CosmosAddr) > 0 {
		i -= len(m.CosmosAddr)
		copy(dAtA[i:], m.CosmosAddr)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.CosmosAddr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListSvmAccountLinksResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListSvmAccountLinksResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListSvmAccountLinksResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AccountLinks) > 0 {
		for iNdEx := len(m.AccountLinks) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AccountLinks[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StreamSvmAccountLinkRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StreamSvmAccountLinkRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StreamSvmAccountLinkRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SvmAddress) > 0 {
		i -= len(m.SvmAddress)
		copy(dAtA[i:], m.SvmAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SvmAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.CosmosAddress) > 0 {
		i -= len(m.CosmosAddress)
		copy(dAtA[i:], m.CosmosAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.CosmosAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StreamSvmAccountLinkResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StreamSvmAccountLinkResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StreamSvmAccountLinkResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AccountLink) > 0 {
		for iNdEx := len(m.AccountLink) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AccountLink[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Deleted != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Deleted))
		i--
		dAtA[i] = 0x10
	}
	if m.Height != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ListDriftOrdersRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListDriftOrdersRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListDriftOrdersRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MarketName) > 0 {
		i -= len(m.MarketName)
		copy(dAtA[i:], m.MarketName)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.MarketName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListDriftOrdersResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListDriftOrdersResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListDriftOrdersResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Orders) > 0 {
		for iNdEx := len(m.Orders) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Orders[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ListFillableDriftJITOrdersRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListFillableDriftJITOrdersRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListFillableDriftJITOrdersRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Quantity != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Quantity))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Direction) > 0 {
		i -= len(m.Direction)
		copy(dAtA[i:], m.Direction)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Direction)))
		i--
		dAtA[i] = 0x1a
	}
	if m.WorstPrice != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.WorstPrice))
		i--
		dAtA[i] = 0x10
	}
	if len(m.MarketName) > 0 {
		i -= len(m.MarketName)
		copy(dAtA[i:], m.MarketName)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.MarketName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListFillableDriftJITOrdersResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListFillableDriftJITOrdersResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListFillableDriftJITOrdersResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FillableOrders) > 0 {
		for iNdEx := len(m.FillableOrders) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.FillableOrders[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *DriftOrder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DriftOrder) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DriftOrder) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FillableQuantity != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.FillableQuantity))
		i--
		dAtA[i] = 0x68
	}
	if m.Direction != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Direction))
		i--
		dAtA[i] = 0x60
	}
	if m.ExpiredAt != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ExpiredAt))
		i--
		dAtA[i] = 0x58
	}
	if m.AuctionDuration != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.AuctionDuration))
		i--
		dAtA[i] = 0x50
	}
	if m.Slot != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Slot))
		i--
		dAtA[i] = 0x48
	}
	if m.AuctionEndPrice != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.AuctionEndPrice))
		i--
		dAtA[i] = 0x40
	}
	if m.AuctionStartPrice != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.AuctionStartPrice))
		i--
		dAtA[i] = 0x38
	}
	if m.OrderId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.OrderId))
		i--
		dAtA[i] = 0x30
	}
	if len(m.MarketName) > 0 {
		i -= len(m.MarketName)
		copy(dAtA[i:], m.MarketName)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.MarketName)))
		i--
		dAtA[i] = 0x2a
	}
	if m.TotalQuantity != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TotalQuantity))
		i--
		dAtA[i] = 0x20
	}
	if m.Price != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Price))
		i--
		dAtA[i] = 0x18
	}
	if len(m.OwnerAddress) > 0 {
		i -= len(m.OwnerAddress)
		copy(dAtA[i:], m.OwnerAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.OwnerAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.SubaccountAddress) > 0 {
		i -= len(m.SubaccountAddress)
		copy(dAtA[i:], m.SubaccountAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SubaccountAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StreamDriftOrdersRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StreamDriftOrdersRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StreamDriftOrdersRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Direction) > 0 {
		i -= len(m.Direction)
		copy(dAtA[i:], m.Direction)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Direction)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Price != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Price))
		i--
		dAtA[i] = 0x10
	}
	if len(m.MarketName) > 0 {
		i -= len(m.MarketName)
		copy(dAtA[i:], m.MarketName)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.MarketName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StreamDriftOrdersResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StreamDriftOrdersResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StreamDriftOrdersResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Order != nil {
		{
			size, err := m.Order.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Deleted != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Deleted))
		i--
		dAtA[i] = 0x10
	}
	if m.Height != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ListEvmContractsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *ListEvmContractsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Contracts) > 0 {
		for _, e := range m.Contracts {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *BalancesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *BalanceInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Acc)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Plane != 0 {
		n += 1 + sovQuery(uint64(m.Plane))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovQuery(uint64(l))
	if m.UpdatedHeight != 0 {
		n += 1 + sovQuery(uint64(m.UpdatedHeight))
	}
	if m.UpdatedTime != 0 {
		n += 1 + sovQuery(uint64(m.UpdatedTime))
	}
	if m.DenomMetadata != nil {
		l = m.DenomMetadata.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *BalancesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Balances) > 0 {
		for _, e := range m.Balances {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *TypeFilter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Value != 0 {
		n += 1 + sovQuery(uint64(m.Value))
	}
	return n
}

func (m *SupportedAppFilter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Plane != 0 {
		n += 1 + sovQuery(uint64(m.Plane))
	}
	l = len(m.ContractAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Verified != nil {
		l = m.Verified.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *ListStrategiesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Type != nil {
		l = m.Type.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Enabled != nil {
		l = m.Enabled.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if len(m.Tags) > 0 {
		for _, s := range m.Tags {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.SupportedApp != nil {
		l = m.SupportedApp.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *ListStrategiesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if len(m.Strategies) > 0 {
		for _, e := range m.Strategies {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *ListStrategiesByOwnerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Type != nil {
		l = m.Type.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Enabled != nil {
		l = m.Enabled.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if len(m.Tags) > 0 {
		for _, s := range m.Tags {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.SupportedApp != nil {
		l = m.SupportedApp.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *Pool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Exchange)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Plane != 0 {
		n += 1 + sovQuery(uint64(m.Plane))
	}
	l = len(m.PoolId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Token0Volume != nil {
		l = m.Token0Volume.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Token1Volume != nil {
		l = m.Token1Volume.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Token0Liquidity != nil {
		l = m.Token0Liquidity.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Token1Liquidity != nil {
		l = m.Token1Liquidity.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.SwapCount != 0 {
		n += 1 + sovQuery(uint64(m.SwapCount))
	}
	return n
}

func (m *Metrics) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TxCount != 0 {
		n += 1 + sovQuery(uint64(m.TxCount))
	}
	if m.BlockCount != 0 {
		n += 1 + sovQuery(uint64(m.BlockCount))
	}
	if len(m.Pools) > 0 {
		for _, e := range m.Pools {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *GetMetricsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetMetricsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *StreamBalanceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Height != 0 {
		n += 1 + sovQuery(uint64(m.Height))
	}
	if m.Deleted != 0 {
		n += 1 + sovQuery(uint64(m.Deleted))
	}
	if len(m.Balances) > 0 {
		for _, e := range m.Balances {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *ListStrategyTriggerByIdRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.FromTime != 0 {
		n += 1 + sovQuery(uint64(m.FromTime))
	}
	if m.ToTime != 0 {
		n += 1 + sovQuery(uint64(m.ToTime))
	}
	if m.Success != nil {
		l = m.Success.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *ListStrategyTriggerByIdResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if len(m.Triggers) > 0 {
		for _, e := range m.Triggers {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *StreamStrategyTriggerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Id) > 0 {
		for _, s := range m.Id {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *StreamStrategyTriggerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Height != 0 {
		n += 1 + sovQuery(uint64(m.Height))
	}
	if m.Deleted != 0 {
		n += 1 + sovQuery(uint64(m.Deleted))
	}
	if len(m.Triggers) > 0 {
		for _, e := range m.Triggers {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *StreamStrategiesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Type != nil {
		l = m.Type.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if len(m.Tags) > 0 {
		for _, s := range m.Tags {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.SupportedApp != nil {
		l = m.SupportedApp.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *StreamStrategiesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Height != 0 {
		n += 1 + sovQuery(uint64(m.Height))
	}
	if m.Deleted != 0 {
		n += 1 + sovQuery(uint64(m.Deleted))
	}
	if len(m.Strategies) > 0 {
		for _, e := range m.Strategies {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *ListTokenMetadataRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *ListTokenMetadataResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if len(m.Metadata) > 0 {
		for _, e := range m.Metadata {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *StreamTokenMetadataRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *StreamTokenMetadataResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Height != 0 {
		n += 1 + sovQuery(uint64(m.Height))
	}
	if m.Deleted != 0 {
		n += 1 + sovQuery(uint64(m.Deleted))
	}
	if len(m.Metadata) > 0 {
		for _, e := range m.Metadata {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *ListSvmAccountLinksRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CosmosAddr)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.SvmAddr)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *ListSvmAccountLinksResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if len(m.AccountLinks) > 0 {
		for _, e := range m.AccountLinks {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *StreamSvmAccountLinkRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CosmosAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.SvmAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *StreamSvmAccountLinkResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Height != 0 {
		n += 1 + sovQuery(uint64(m.Height))
	}
	if m.Deleted != 0 {
		n += 1 + sovQuery(uint64(m.Deleted))
	}
	if len(m.AccountLink) > 0 {
		for _, e := range m.AccountLink {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *ListDriftOrdersRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MarketName)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *ListDriftOrdersResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Orders) > 0 {
		for _, e := range m.Orders {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *ListFillableDriftJITOrdersRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MarketName)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.WorstPrice != 0 {
		n += 1 + sovQuery(uint64(m.WorstPrice))
	}
	l = len(m.Direction)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Quantity != 0 {
		n += 1 + sovQuery(uint64(m.Quantity))
	}
	return n
}

func (m *ListFillableDriftJITOrdersResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.FillableOrders) > 0 {
		for _, e := range m.FillableOrders {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *DriftOrder) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SubaccountAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.OwnerAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Price != 0 {
		n += 1 + sovQuery(uint64(m.Price))
	}
	if m.TotalQuantity != 0 {
		n += 1 + sovQuery(uint64(m.TotalQuantity))
	}
	l = len(m.MarketName)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.OrderId != 0 {
		n += 1 + sovQuery(uint64(m.OrderId))
	}
	if m.AuctionStartPrice != 0 {
		n += 1 + sovQuery(uint64(m.AuctionStartPrice))
	}
	if m.AuctionEndPrice != 0 {
		n += 1 + sovQuery(uint64(m.AuctionEndPrice))
	}
	if m.Slot != 0 {
		n += 1 + sovQuery(uint64(m.Slot))
	}
	if m.AuctionDuration != 0 {
		n += 1 + sovQuery(uint64(m.AuctionDuration))
	}
	if m.ExpiredAt != 0 {
		n += 1 + sovQuery(uint64(m.ExpiredAt))
	}
	if m.Direction != 0 {
		n += 1 + sovQuery(uint64(m.Direction))
	}
	if m.FillableQuantity != 0 {
		n += 1 + sovQuery(uint64(m.FillableQuantity))
	}
	return n
}

func (m *StreamDriftOrdersRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MarketName)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Price != 0 {
		n += 1 + sovQuery(uint64(m.Price))
	}
	l = len(m.Direction)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *StreamDriftOrdersResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Height != 0 {
		n += 1 + sovQuery(uint64(m.Height))
	}
	if m.Deleted != 0 {
		n += 1 + sovQuery(uint64(m.Deleted))
	}
	if m.Order != nil {
		l = m.Order.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ListEvmContractsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListEvmContractsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListEvmContractsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListEvmContractsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListEvmContractsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListEvmContractsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contracts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Contracts = append(m.Contracts, &types.ContractInfo{})
			if err := m.Contracts[len(m.Contracts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BalancesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BalancesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BalancesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BalanceInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BalanceInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BalanceInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Acc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Acc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Plane", wireType)
			}
			m.Plane = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Plane |= types1.Plane(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedHeight", wireType)
			}
			m.UpdatedHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdatedHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedTime", wireType)
			}
			m.UpdatedTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdatedTime |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DenomMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DenomMetadata == nil {
				m.DenomMetadata = &types1.TokenMetadata{}
			}
			if err := m.DenomMetadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BalancesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BalancesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BalancesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Balances", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Balances = append(m.Balances, &BalanceInfo{})
			if err := m.Balances[len(m.Balances)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TypeFilter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TypeFilter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TypeFilter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			m.Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= types2.StrategyType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SupportedAppFilter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SupportedAppFilter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SupportedAppFilter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Plane", wireType)
			}
			m.Plane = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Plane |= types1.Plane(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Verified", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Verified == nil {
				m.Verified = &types3.BoolValue{}
			}
			if err := m.Verified.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListStrategiesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListStrategiesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListStrategiesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Type == nil {
				m.Type = &TypeFilter{}
			}
			if err := m.Type.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Enabled == nil {
				m.Enabled = &types3.BoolValue{}
			}
			if err := m.Enabled.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tags = append(m.Tags, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SupportedApp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SupportedApp == nil {
				m.SupportedApp = &SupportedAppFilter{}
			}
			if err := m.SupportedApp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListStrategiesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListStrategiesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListStrategiesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Strategies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Strategies = append(m.Strategies, &types2.Strategy{})
			if err := m.Strategies[len(m.Strategies)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListStrategiesByOwnerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListStrategiesByOwnerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListStrategiesByOwnerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Type == nil {
				m.Type = &TypeFilter{}
			}
			if err := m.Type.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Enabled == nil {
				m.Enabled = &types3.BoolValue{}
			}
			if err := m.Enabled.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tags = append(m.Tags, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SupportedApp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SupportedApp == nil {
				m.SupportedApp = &SupportedAppFilter{}
			}
			if err := m.SupportedApp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Pool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Pool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Pool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exchange", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Exchange = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Plane", wireType)
			}
			m.Plane = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Plane |= types1.Plane(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PoolId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token0Volume", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v cosmossdk_io_math.Int
			m.Token0Volume = &v
			if err := m.Token0Volume.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token1Volume", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v cosmossdk_io_math.Int
			m.Token1Volume = &v
			if err := m.Token1Volume.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token0Liquidity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v cosmossdk_io_math.Int
			m.Token0Liquidity = &v
			if err := m.Token0Liquidity.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token1Liquidity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v cosmossdk_io_math.Int
			m.Token1Liquidity = &v
			if err := m.Token1Liquidity.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SwapCount", wireType)
			}
			m.SwapCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SwapCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Metrics) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Metrics: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Metrics: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxCount", wireType)
			}
			m.TxCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TxCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockCount", wireType)
			}
			m.BlockCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pools", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pools = append(m.Pools, &Pool{})
			if err := m.Pools[len(m.Pools)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetMetricsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetMetricsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetMetricsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetMetricsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetMetricsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetMetricsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &Metrics{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StreamBalanceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StreamBalanceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StreamBalanceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deleted", wireType)
			}
			m.Deleted = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Deleted |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Balances", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Balances = append(m.Balances, &BalanceInfo{})
			if err := m.Balances[len(m.Balances)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListStrategyTriggerByIdRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListStrategyTriggerByIdRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListStrategyTriggerByIdRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromTime", wireType)
			}
			m.FromTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToTime", wireType)
			}
			m.ToTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ToTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Success == nil {
				m.Success = &types3.BoolValue{}
			}
			if err := m.Success.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListStrategyTriggerByIdResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListStrategyTriggerByIdResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListStrategyTriggerByIdResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Triggers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Triggers = append(m.Triggers, &types2.StrategyTriggerEvent{})
			if err := m.Triggers[len(m.Triggers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StreamStrategyTriggerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StreamStrategyTriggerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StreamStrategyTriggerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StreamStrategyTriggerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StreamStrategyTriggerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StreamStrategyTriggerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deleted", wireType)
			}
			m.Deleted = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Deleted |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Triggers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Triggers = append(m.Triggers, &types2.StrategyTriggerEvent{})
			if err := m.Triggers[len(m.Triggers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StreamStrategiesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StreamStrategiesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StreamStrategiesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Type == nil {
				m.Type = &TypeFilter{}
			}
			if err := m.Type.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tags = append(m.Tags, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SupportedApp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SupportedApp == nil {
				m.SupportedApp = &SupportedAppFilter{}
			}
			if err := m.SupportedApp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StreamStrategiesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StreamStrategiesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StreamStrategiesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deleted", wireType)
			}
			m.Deleted = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Deleted |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Strategies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Strategies = append(m.Strategies, &types2.Strategy{})
			if err := m.Strategies[len(m.Strategies)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListTokenMetadataRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListTokenMetadataRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListTokenMetadataRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListTokenMetadataResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListTokenMetadataResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListTokenMetadataResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Metadata = append(m.Metadata, &types1.TokenMetadata{})
			if err := m.Metadata[len(m.Metadata)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StreamTokenMetadataRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StreamTokenMetadataRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StreamTokenMetadataRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StreamTokenMetadataResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StreamTokenMetadataResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StreamTokenMetadataResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deleted", wireType)
			}
			m.Deleted = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Deleted |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Metadata = append(m.Metadata, &types1.TokenMetadata{})
			if err := m.Metadata[len(m.Metadata)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListSvmAccountLinksRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListSvmAccountLinksRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListSvmAccountLinksRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CosmosAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CosmosAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SvmAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SvmAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListSvmAccountLinksResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListSvmAccountLinksResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListSvmAccountLinksResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountLinks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccountLinks = append(m.AccountLinks, &types4.AccountLink{})
			if err := m.AccountLinks[len(m.AccountLinks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StreamSvmAccountLinkRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StreamSvmAccountLinkRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StreamSvmAccountLinkRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CosmosAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CosmosAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SvmAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SvmAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StreamSvmAccountLinkResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StreamSvmAccountLinkResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StreamSvmAccountLinkResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deleted", wireType)
			}
			m.Deleted = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Deleted |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountLink", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccountLink = append(m.AccountLink, &types4.AccountLink{})
			if err := m.AccountLink[len(m.AccountLink)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListDriftOrdersRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListDriftOrdersRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListDriftOrdersRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MarketName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListDriftOrdersResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListDriftOrdersResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListDriftOrdersResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Orders", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Orders = append(m.Orders, &DriftOrder{})
			if err := m.Orders[len(m.Orders)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListFillableDriftJITOrdersRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListFillableDriftJITOrdersRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListFillableDriftJITOrdersRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MarketName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorstPrice", wireType)
			}
			m.WorstPrice = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WorstPrice |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Direction", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Direction = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quantity", wireType)
			}
			m.Quantity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Quantity |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListFillableDriftJITOrdersResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListFillableDriftJITOrdersResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListFillableDriftJITOrdersResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FillableOrders", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FillableOrders = append(m.FillableOrders, &DriftOrder{})
			if err := m.FillableOrders[len(m.FillableOrders)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DriftOrder) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DriftOrder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DriftOrder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubaccountAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubaccountAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OwnerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			m.Price = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Price |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalQuantity", wireType)
			}
			m.TotalQuantity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalQuantity |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MarketName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderId", wireType)
			}
			m.OrderId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OrderId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuctionStartPrice", wireType)
			}
			m.AuctionStartPrice = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuctionStartPrice |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuctionEndPrice", wireType)
			}
			m.AuctionEndPrice = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuctionEndPrice |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slot", wireType)
			}
			m.Slot = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Slot |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuctionDuration", wireType)
			}
			m.AuctionDuration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuctionDuration |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpiredAt", wireType)
			}
			m.ExpiredAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpiredAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Direction", wireType)
			}
			m.Direction = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Direction |= OrderDirection(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FillableQuantity", wireType)
			}
			m.FillableQuantity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FillableQuantity |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StreamDriftOrdersRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StreamDriftOrdersRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StreamDriftOrdersRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MarketName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			m.Price = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Price |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Direction", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Direction = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StreamDriftOrdersResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StreamDriftOrdersResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StreamDriftOrdersResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deleted", wireType)
			}
			m.Deleted = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Deleted |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Order", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Order == nil {
				m.Order = &DriftOrder{}
			}
			if err := m.Order.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
