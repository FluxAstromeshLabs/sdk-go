// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: flux/indexer/media/query.proto

package media

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/codec/types"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ContentType int32

const (
	ContentType_Static ContentType = 0
	ContentType_Audio  ContentType = 1
	ContentType_Video  ContentType = 2
)

var ContentType_name = map[int32]string{
	0: "Static",
	1: "Audio",
	2: "Video",
}

var ContentType_value = map[string]int32{
	"Static": 0,
	"Audio":  1,
	"Video":  2,
}

func (x ContentType) String() string {
	return proto.EnumName(ContentType_name, int32(x))
}

func (ContentType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_06796104fc06fe94, []int{0}
}

type UploadResponse struct {
}

func (m *UploadResponse) Reset()         { *m = UploadResponse{} }
func (m *UploadResponse) String() string { return proto.CompactTextString(m) }
func (*UploadResponse) ProtoMessage()    {}
func (*UploadResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_06796104fc06fe94, []int{0}
}
func (m *UploadResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UploadResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UploadResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UploadResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UploadResponse.Merge(m, src)
}
func (m *UploadResponse) XXX_Size() int {
	return m.Size()
}
func (m *UploadResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UploadResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UploadResponse proto.InternalMessageInfo

type DownloadRequest struct {
	Path string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
}

func (m *DownloadRequest) Reset()         { *m = DownloadRequest{} }
func (m *DownloadRequest) String() string { return proto.CompactTextString(m) }
func (*DownloadRequest) ProtoMessage()    {}
func (*DownloadRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_06796104fc06fe94, []int{1}
}
func (m *DownloadRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DownloadRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DownloadRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DownloadRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DownloadRequest.Merge(m, src)
}
func (m *DownloadRequest) XXX_Size() int {
	return m.Size()
}
func (m *DownloadRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DownloadRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DownloadRequest proto.InternalMessageInfo

func (m *DownloadRequest) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

type StreamMsg struct {
	// Types that are valid to be assigned to Content:
	//
	//	*StreamMsg_Metadata
	//	*StreamMsg_MediaChunk
	Content isStreamMsg_Content `protobuf_oneof:"content"`
}

func (m *StreamMsg) Reset()         { *m = StreamMsg{} }
func (m *StreamMsg) String() string { return proto.CompactTextString(m) }
func (*StreamMsg) ProtoMessage()    {}
func (*StreamMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_06796104fc06fe94, []int{2}
}
func (m *StreamMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StreamMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StreamMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StreamMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamMsg.Merge(m, src)
}
func (m *StreamMsg) XXX_Size() int {
	return m.Size()
}
func (m *StreamMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamMsg.DiscardUnknown(m)
}

var xxx_messageInfo_StreamMsg proto.InternalMessageInfo

type isStreamMsg_Content interface {
	isStreamMsg_Content()
	MarshalTo([]byte) (int, error)
	Size() int
}

type StreamMsg_Metadata struct {
	Metadata *Metadata `protobuf:"bytes,1,opt,name=metadata,proto3,oneof" json:"metadata,omitempty"`
}
type StreamMsg_MediaChunk struct {
	MediaChunk []byte `protobuf:"bytes,2,opt,name=media_chunk,json=mediaChunk,proto3,oneof" json:"media_chunk,omitempty"`
}

func (*StreamMsg_Metadata) isStreamMsg_Content()   {}
func (*StreamMsg_MediaChunk) isStreamMsg_Content() {}

func (m *StreamMsg) GetContent() isStreamMsg_Content {
	if m != nil {
		return m.Content
	}
	return nil
}

func (m *StreamMsg) GetMetadata() *Metadata {
	if x, ok := m.GetContent().(*StreamMsg_Metadata); ok {
		return x.Metadata
	}
	return nil
}

func (m *StreamMsg) GetMediaChunk() []byte {
	if x, ok := m.GetContent().(*StreamMsg_MediaChunk); ok {
		return x.MediaChunk
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*StreamMsg) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*StreamMsg_Metadata)(nil),
		(*StreamMsg_MediaChunk)(nil),
	}
}

type Metadata struct {
	Path      string      `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	Encrypted bool        `protobuf:"varint,2,opt,name=encrypted,proto3" json:"encrypted,omitempty"`
	Type      ContentType `protobuf:"varint,3,opt,name=type,proto3,enum=flux.indexer.media.ContentType" json:"type,omitempty"`
}

func (m *Metadata) Reset()         { *m = Metadata{} }
func (m *Metadata) String() string { return proto.CompactTextString(m) }
func (*Metadata) ProtoMessage()    {}
func (*Metadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_06796104fc06fe94, []int{3}
}
func (m *Metadata) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Metadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Metadata.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Metadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Metadata.Merge(m, src)
}
func (m *Metadata) XXX_Size() int {
	return m.Size()
}
func (m *Metadata) XXX_DiscardUnknown() {
	xxx_messageInfo_Metadata.DiscardUnknown(m)
}

var xxx_messageInfo_Metadata proto.InternalMessageInfo

func (m *Metadata) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *Metadata) GetEncrypted() bool {
	if m != nil {
		return m.Encrypted
	}
	return false
}

func (m *Metadata) GetType() ContentType {
	if m != nil {
		return m.Type
	}
	return ContentType_Static
}

func init() {
	proto.RegisterEnum("flux.indexer.media.ContentType", ContentType_name, ContentType_value)
	proto.RegisterType((*UploadResponse)(nil), "flux.indexer.media.UploadResponse")
	proto.RegisterType((*DownloadRequest)(nil), "flux.indexer.media.DownloadRequest")
	proto.RegisterType((*StreamMsg)(nil), "flux.indexer.media.StreamMsg")
	proto.RegisterType((*Metadata)(nil), "flux.indexer.media.Metadata")
}

func init() { proto.RegisterFile("flux/indexer/media/query.proto", fileDescriptor_06796104fc06fe94) }

var fileDescriptor_06796104fc06fe94 = []byte{
	// 450 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x52, 0xc1, 0x6e, 0xd3, 0x40,
	0x10, 0xf5, 0xa6, 0x25, 0xc4, 0x13, 0x54, 0xa2, 0x39, 0x05, 0x2b, 0x98, 0x60, 0x84, 0x14, 0x71,
	0xf0, 0x56, 0xe9, 0x8d, 0x5b, 0x5b, 0x54, 0x15, 0x44, 0x11, 0x72, 0x0b, 0x07, 0x2e, 0x68, 0xe3,
	0x9d, 0x26, 0x16, 0xc9, 0xae, 0x63, 0xef, 0xaa, 0xc9, 0x95, 0x2f, 0x40, 0xe2, 0xa7, 0x38, 0x56,
	0xe2, 0xc2, 0x11, 0x25, 0x1c, 0xf9, 0x08, 0x94, 0x4d, 0x5a, 0xa0, 0x58, 0xdc, 0x46, 0xef, 0x3d,
	0xbd, 0xf7, 0x34, 0x33, 0x10, 0x9e, 0x8f, 0xed, 0x8c, 0x67, 0x4a, 0xd2, 0x8c, 0x0a, 0x3e, 0x21,
	0x99, 0x09, 0x3e, 0xb5, 0x54, 0xcc, 0xe3, 0xbc, 0xd0, 0x46, 0x23, 0xae, 0xf8, 0x78, 0xc3, 0xc7,
	0x8e, 0x0f, 0xee, 0x0d, 0xb5, 0x1e, 0x8e, 0x89, 0x3b, 0xc5, 0xc0, 0x9e, 0x73, 0xa1, 0x36, 0xf2,
	0xa0, 0xb3, 0xa1, 0x44, 0x9e, 0x71, 0xa1, 0x94, 0x36, 0xc2, 0x64, 0x5a, 0x95, 0x6b, 0x36, 0x6a,
	0xc1, 0xce, 0x9b, 0x7c, 0xac, 0x85, 0x4c, 0xa8, 0xcc, 0xb5, 0x2a, 0x29, 0x7a, 0x0c, 0x77, 0x9f,
	0xe9, 0x0b, 0xb5, 0xc6, 0xa6, 0x96, 0x4a, 0x83, 0x08, 0xdb, 0xb9, 0x30, 0xa3, 0x36, 0xeb, 0xb2,
	0x9e, 0x9f, 0xb8, 0x39, 0xb2, 0xe0, 0x9f, 0x9a, 0x82, 0xc4, 0xe4, 0xa4, 0x1c, 0xe2, 0x53, 0x68,
	0x4c, 0xc8, 0x08, 0x29, 0x8c, 0x70, 0xa2, 0x66, 0xbf, 0x13, 0xff, 0xdb, 0x32, 0x3e, 0xd9, 0x68,
	0x8e, 0xbd, 0xe4, 0x5a, 0x8f, 0x0f, 0xa1, 0xe9, 0xd8, 0xf7, 0xe9, 0xc8, 0xaa, 0x0f, 0xed, 0x5a,
	0x97, 0xf5, 0xee, 0x1c, 0x7b, 0x09, 0x38, 0xf0, 0x70, 0x85, 0x1d, 0xf8, 0x70, 0x3b, 0xd5, 0xca,
	0x90, 0x32, 0xd1, 0x14, 0x1a, 0x57, 0x2e, 0x55, 0xb5, 0xb0, 0x03, 0x3e, 0xa9, 0xb4, 0x98, 0xe7,
	0x86, 0xa4, 0xf3, 0x6a, 0x24, 0xbf, 0x01, 0xdc, 0x83, 0x6d, 0x33, 0xcf, 0xa9, 0xbd, 0xd5, 0x65,
	0xbd, 0x9d, 0xfe, 0x83, 0xaa, 0x8e, 0x87, 0xeb, 0xa0, 0xb3, 0x79, 0x4e, 0x89, 0x13, 0x3f, 0xe1,
	0xd0, 0xfc, 0x03, 0x44, 0x80, 0xfa, 0xe9, 0x6a, 0x87, 0x69, 0xcb, 0x43, 0x1f, 0x6e, 0xed, 0x5b,
	0x99, 0xe9, 0x16, 0x5b, 0x8d, 0x6f, 0x33, 0x49, 0xba, 0x55, 0xeb, 0xff, 0x64, 0xb0, 0xb5, 0xff,
	0xfa, 0x39, 0x4e, 0xa1, 0xbe, 0xde, 0x2d, 0xde, 0xaf, 0x4a, 0xba, 0x5e, 0x5f, 0x10, 0x55, 0xd1,
	0x37, 0xce, 0x12, 0x7d, 0xfc, 0xfa, 0xe3, 0x73, 0xad, 0x83, 0x01, 0xaf, 0x78, 0x0f, 0xeb, 0xb4,
	0x3d, 0x86, 0x05, 0x34, 0xae, 0x8e, 0x87, 0x8f, 0xaa, 0x5c, 0x6f, 0x9c, 0x36, 0xf8, 0x7f, 0xb3,
	0xa8, 0xeb, 0x52, 0x03, 0x6c, 0x57, 0xa5, 0x4a, 0x7d, 0xa1, 0x76, 0xd9, 0xc1, 0x8b, 0x2f, 0x8b,
	0x90, 0x5d, 0x2e, 0x42, 0xf6, 0x7d, 0x11, 0xb2, 0x4f, 0xcb, 0xd0, 0xbb, 0x5c, 0x86, 0xde, 0xb7,
	0x65, 0xe8, 0xbd, 0xdb, 0x1d, 0x66, 0x66, 0x64, 0x07, 0x71, 0xaa, 0x27, 0xfc, 0x68, 0x6c, 0x67,
	0xaf, 0x8e, 0xce, 0x5e, 0x8a, 0x41, 0xe9, 0xbc, 0x24, 0x4f, 0x47, 0x22, 0x53, 0x7f, 0x5b, 0x0e,
	0xea, 0xee, 0x2b, 0xf7, 0x7e, 0x05, 0x00, 0x00, 0xff, 0xff, 0xa4, 0x37, 0xa3, 0x09, 0x04, 0x03,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// APIClient is the client API for API service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type APIClient interface {
	Upload(ctx context.Context, opts ...grpc.CallOption) (API_UploadClient, error)
	Download(ctx context.Context, in *DownloadRequest, opts ...grpc.CallOption) (API_DownloadClient, error)
}

type aPIClient struct {
	cc grpc1.ClientConn
}

func NewAPIClient(cc grpc1.ClientConn) APIClient {
	return &aPIClient{cc}
}

func (c *aPIClient) Upload(ctx context.Context, opts ...grpc.CallOption) (API_UploadClient, error) {
	stream, err := c.cc.NewStream(ctx, &_API_serviceDesc.Streams[0], "/flux.indexer.media.API/Upload", opts...)
	if err != nil {
		return nil, err
	}
	x := &aPIUploadClient{stream}
	return x, nil
}

type API_UploadClient interface {
	Send(*StreamMsg) error
	CloseAndRecv() (*UploadResponse, error)
	grpc.ClientStream
}

type aPIUploadClient struct {
	grpc.ClientStream
}

func (x *aPIUploadClient) Send(m *StreamMsg) error {
	return x.ClientStream.SendMsg(m)
}

func (x *aPIUploadClient) CloseAndRecv() (*UploadResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UploadResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *aPIClient) Download(ctx context.Context, in *DownloadRequest, opts ...grpc.CallOption) (API_DownloadClient, error) {
	stream, err := c.cc.NewStream(ctx, &_API_serviceDesc.Streams[1], "/flux.indexer.media.API/Download", opts...)
	if err != nil {
		return nil, err
	}
	x := &aPIDownloadClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type API_DownloadClient interface {
	Recv() (*StreamMsg, error)
	grpc.ClientStream
}

type aPIDownloadClient struct {
	grpc.ClientStream
}

func (x *aPIDownloadClient) Recv() (*StreamMsg, error) {
	m := new(StreamMsg)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// APIServer is the server API for API service.
type APIServer interface {
	Upload(API_UploadServer) error
	Download(*DownloadRequest, API_DownloadServer) error
}

// UnimplementedAPIServer can be embedded to have forward compatible implementations.
type UnimplementedAPIServer struct {
}

func (*UnimplementedAPIServer) Upload(srv API_UploadServer) error {
	return status.Errorf(codes.Unimplemented, "method Upload not implemented")
}
func (*UnimplementedAPIServer) Download(req *DownloadRequest, srv API_DownloadServer) error {
	return status.Errorf(codes.Unimplemented, "method Download not implemented")
}

func RegisterAPIServer(s grpc1.Server, srv APIServer) {
	s.RegisterService(&_API_serviceDesc, srv)
}

func _API_Upload_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(APIServer).Upload(&aPIUploadServer{stream})
}

type API_UploadServer interface {
	SendAndClose(*UploadResponse) error
	Recv() (*StreamMsg, error)
	grpc.ServerStream
}

type aPIUploadServer struct {
	grpc.ServerStream
}

func (x *aPIUploadServer) SendAndClose(m *UploadResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *aPIUploadServer) Recv() (*StreamMsg, error) {
	m := new(StreamMsg)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _API_Download_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DownloadRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(APIServer).Download(m, &aPIDownloadServer{stream})
}

type API_DownloadServer interface {
	Send(*StreamMsg) error
	grpc.ServerStream
}

type aPIDownloadServer struct {
	grpc.ServerStream
}

func (x *aPIDownloadServer) Send(m *StreamMsg) error {
	return x.ServerStream.SendMsg(m)
}

var _API_serviceDesc = grpc.ServiceDesc{
	ServiceName: "flux.indexer.media.API",
	HandlerType: (*APIServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Upload",
			Handler:       _API_Upload_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Download",
			Handler:       _API_Download_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "flux/indexer/media/query.proto",
}

func (m *UploadResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UploadResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UploadResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *DownloadRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DownloadRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DownloadRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Path) > 0 {
		i -= len(m.Path)
		copy(dAtA[i:], m.Path)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Path)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StreamMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StreamMsg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StreamMsg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Content != nil {
		{
			size := m.Content.Size()
			i -= size
			if _, err := m.Content.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *StreamMsg_Metadata) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StreamMsg_Metadata) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Metadata != nil {
		{
			size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *StreamMsg_MediaChunk) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StreamMsg_MediaChunk) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.MediaChunk != nil {
		i -= len(m.MediaChunk)
		copy(dAtA[i:], m.MediaChunk)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.MediaChunk)))
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *Metadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Metadata) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Metadata) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x18
	}
	if m.Encrypted {
		i--
		if m.Encrypted {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.Path) > 0 {
		i -= len(m.Path)
		copy(dAtA[i:], m.Path)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Path)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *UploadResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *DownloadRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Path)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *StreamMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Content != nil {
		n += m.Content.Size()
	}
	return n
}

func (m *StreamMsg_Metadata) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}
func (m *StreamMsg_MediaChunk) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MediaChunk != nil {
		l = len(m.MediaChunk)
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}
func (m *Metadata) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Path)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Encrypted {
		n += 2
	}
	if m.Type != 0 {
		n += 1 + sovQuery(uint64(m.Type))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *UploadResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UploadResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UploadResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DownloadRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DownloadRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DownloadRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StreamMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StreamMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StreamMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Metadata{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Content = &StreamMsg_Metadata{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MediaChunk", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := make([]byte, postIndex-iNdEx)
			copy(v, dAtA[iNdEx:postIndex])
			m.Content = &StreamMsg_MediaChunk{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Metadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Metadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Metadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Encrypted", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Encrypted = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= ContentType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
