// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: flux/strategy/v1beta1/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	types "github.com/FluxNFTLabs/sdk-go/chain/modules/astromesh/types"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Config int32

const (
	Config_deploy  Config = 0
	Config_update  Config = 1
	Config_disable Config = 2
	Config_enable  Config = 3
	Config_revoke  Config = 4
)

var Config_name = map[int32]string{
	0: "deploy",
	1: "update",
	2: "disable",
	3: "enable",
	4: "revoke",
}

var Config_value = map[string]int32{
	"deploy":  0,
	"update":  1,
	"disable": 2,
	"enable":  3,
	"revoke":  4,
}

func (x Config) String() string {
	return proto.EnumName(Config_name, int32(x))
}

func (Config) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_cd40292536fdda88, []int{0}
}

type MsgConfigStrategy struct {
	Sender            string                 `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	Config            Config                 `protobuf:"varint,2,opt,name=config,proto3,enum=flux.strategy.v1beta1.Config" json:"config,omitempty"`
	Id                string                 `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	Strategy          []byte                 `protobuf:"bytes,4,opt,name=strategy,proto3" json:"strategy,omitempty"`
	Query             *types.FISQueryRequest `protobuf:"bytes,5,opt,name=query,proto3" json:"query,omitempty"`
	TriggerPermission *PermissionConfig      `protobuf:"bytes,6,opt,name=trigger_permission,json=triggerPermission,proto3" json:"trigger_permission,omitempty"`
	Metadata          *StrategyMetadata      `protobuf:"bytes,7,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (m *MsgConfigStrategy) Reset()         { *m = MsgConfigStrategy{} }
func (m *MsgConfigStrategy) String() string { return proto.CompactTextString(m) }
func (*MsgConfigStrategy) ProtoMessage()    {}
func (*MsgConfigStrategy) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd40292536fdda88, []int{0}
}
func (m *MsgConfigStrategy) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgConfigStrategy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgConfigStrategy.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgConfigStrategy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgConfigStrategy.Merge(m, src)
}
func (m *MsgConfigStrategy) XXX_Size() int {
	return m.Size()
}
func (m *MsgConfigStrategy) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgConfigStrategy.DiscardUnknown(m)
}

var xxx_messageInfo_MsgConfigStrategy proto.InternalMessageInfo

func (m *MsgConfigStrategy) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *MsgConfigStrategy) GetConfig() Config {
	if m != nil {
		return m.Config
	}
	return Config_deploy
}

func (m *MsgConfigStrategy) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *MsgConfigStrategy) GetStrategy() []byte {
	if m != nil {
		return m.Strategy
	}
	return nil
}

func (m *MsgConfigStrategy) GetQuery() *types.FISQueryRequest {
	if m != nil {
		return m.Query
	}
	return nil
}

func (m *MsgConfigStrategy) GetTriggerPermission() *PermissionConfig {
	if m != nil {
		return m.TriggerPermission
	}
	return nil
}

func (m *MsgConfigStrategy) GetMetadata() *StrategyMetadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

type MsgConfigStrategyResponse struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *MsgConfigStrategyResponse) Reset()         { *m = MsgConfigStrategyResponse{} }
func (m *MsgConfigStrategyResponse) String() string { return proto.CompactTextString(m) }
func (*MsgConfigStrategyResponse) ProtoMessage()    {}
func (*MsgConfigStrategyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd40292536fdda88, []int{1}
}
func (m *MsgConfigStrategyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgConfigStrategyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgConfigStrategyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgConfigStrategyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgConfigStrategyResponse.Merge(m, src)
}
func (m *MsgConfigStrategyResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgConfigStrategyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgConfigStrategyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgConfigStrategyResponse proto.InternalMessageInfo

func (m *MsgConfigStrategyResponse) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type MsgTriggerStrategies struct {
	Sender  string                   `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	Ids     []string                 `protobuf:"bytes,2,rep,name=ids,proto3" json:"ids,omitempty"`
	Inputs  [][]byte                 `protobuf:"bytes,3,rep,name=inputs,proto3" json:"inputs,omitempty"`
	Queries []*types.FISQueryRequest `protobuf:"bytes,4,rep,name=queries,proto3" json:"queries,omitempty"`
}

func (m *MsgTriggerStrategies) Reset()         { *m = MsgTriggerStrategies{} }
func (m *MsgTriggerStrategies) String() string { return proto.CompactTextString(m) }
func (*MsgTriggerStrategies) ProtoMessage()    {}
func (*MsgTriggerStrategies) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd40292536fdda88, []int{2}
}
func (m *MsgTriggerStrategies) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgTriggerStrategies) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgTriggerStrategies.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgTriggerStrategies) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgTriggerStrategies.Merge(m, src)
}
func (m *MsgTriggerStrategies) XXX_Size() int {
	return m.Size()
}
func (m *MsgTriggerStrategies) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgTriggerStrategies.DiscardUnknown(m)
}

var xxx_messageInfo_MsgTriggerStrategies proto.InternalMessageInfo

func (m *MsgTriggerStrategies) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *MsgTriggerStrategies) GetIds() []string {
	if m != nil {
		return m.Ids
	}
	return nil
}

func (m *MsgTriggerStrategies) GetInputs() [][]byte {
	if m != nil {
		return m.Inputs
	}
	return nil
}

func (m *MsgTriggerStrategies) GetQueries() []*types.FISQueryRequest {
	if m != nil {
		return m.Queries
	}
	return nil
}

type StrategyResponse struct {
	Id          string                          `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Ixs         []*types.FISInstruction         `protobuf:"bytes,2,rep,name=ixs,proto3" json:"ixs,omitempty"`
	IxResponses []*types.FISInstructionResponse `protobuf:"bytes,3,rep,name=ix_responses,json=ixResponses,proto3" json:"ix_responses,omitempty"`
	Result      string                          `protobuf:"bytes,4,opt,name=result,proto3" json:"result,omitempty"`
}

func (m *StrategyResponse) Reset()         { *m = StrategyResponse{} }
func (m *StrategyResponse) String() string { return proto.CompactTextString(m) }
func (*StrategyResponse) ProtoMessage()    {}
func (*StrategyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd40292536fdda88, []int{3}
}
func (m *StrategyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StrategyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StrategyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StrategyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StrategyResponse.Merge(m, src)
}
func (m *StrategyResponse) XXX_Size() int {
	return m.Size()
}
func (m *StrategyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_StrategyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_StrategyResponse proto.InternalMessageInfo

func (m *StrategyResponse) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *StrategyResponse) GetIxs() []*types.FISInstruction {
	if m != nil {
		return m.Ixs
	}
	return nil
}

func (m *StrategyResponse) GetIxResponses() []*types.FISInstructionResponse {
	if m != nil {
		return m.IxResponses
	}
	return nil
}

func (m *StrategyResponse) GetResult() string {
	if m != nil {
		return m.Result
	}
	return ""
}

type MsgTriggerStrategiesResponse struct {
	StrategyTriggerResponses []*StrategyResponse `protobuf:"bytes,1,rep,name=strategy_trigger_responses,json=strategyTriggerResponses,proto3" json:"strategy_trigger_responses,omitempty"`
}

func (m *MsgTriggerStrategiesResponse) Reset()         { *m = MsgTriggerStrategiesResponse{} }
func (m *MsgTriggerStrategiesResponse) String() string { return proto.CompactTextString(m) }
func (*MsgTriggerStrategiesResponse) ProtoMessage()    {}
func (*MsgTriggerStrategiesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd40292536fdda88, []int{4}
}
func (m *MsgTriggerStrategiesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgTriggerStrategiesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgTriggerStrategiesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgTriggerStrategiesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgTriggerStrategiesResponse.Merge(m, src)
}
func (m *MsgTriggerStrategiesResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgTriggerStrategiesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgTriggerStrategiesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgTriggerStrategiesResponse proto.InternalMessageInfo

func (m *MsgTriggerStrategiesResponse) GetStrategyTriggerResponses() []*StrategyResponse {
	if m != nil {
		return m.StrategyTriggerResponses
	}
	return nil
}

type MsgVerifyStrategy struct {
	// The address of the sender who is verifying the Nexus Bot
	Sender string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	// The contract address of the dApp or entity being verified
	ContractAddress string `protobuf:"bytes,2,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`
	// Contract plane
	Plane types.Plane `protobuf:"varint,3,opt,name=plane,proto3,enum=flux.astromesh.v1beta1.Plane" json:"plane,omitempty"`
	// Strategy ID
	StrategyId string `protobuf:"bytes,4,opt,name=strategy_id,json=strategyId,proto3" json:"strategy_id,omitempty"`
}

func (m *MsgVerifyStrategy) Reset()         { *m = MsgVerifyStrategy{} }
func (m *MsgVerifyStrategy) String() string { return proto.CompactTextString(m) }
func (*MsgVerifyStrategy) ProtoMessage()    {}
func (*MsgVerifyStrategy) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd40292536fdda88, []int{5}
}
func (m *MsgVerifyStrategy) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgVerifyStrategy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgVerifyStrategy.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgVerifyStrategy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgVerifyStrategy.Merge(m, src)
}
func (m *MsgVerifyStrategy) XXX_Size() int {
	return m.Size()
}
func (m *MsgVerifyStrategy) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgVerifyStrategy.DiscardUnknown(m)
}

var xxx_messageInfo_MsgVerifyStrategy proto.InternalMessageInfo

func (m *MsgVerifyStrategy) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *MsgVerifyStrategy) GetContractAddress() string {
	if m != nil {
		return m.ContractAddress
	}
	return ""
}

func (m *MsgVerifyStrategy) GetPlane() types.Plane {
	if m != nil {
		return m.Plane
	}
	return types.Plane_COSMOS
}

func (m *MsgVerifyStrategy) GetStrategyId() string {
	if m != nil {
		return m.StrategyId
	}
	return ""
}

type MsgVerifyStrategyResponse struct {
}

func (m *MsgVerifyStrategyResponse) Reset()         { *m = MsgVerifyStrategyResponse{} }
func (m *MsgVerifyStrategyResponse) String() string { return proto.CompactTextString(m) }
func (*MsgVerifyStrategyResponse) ProtoMessage()    {}
func (*MsgVerifyStrategyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd40292536fdda88, []int{6}
}
func (m *MsgVerifyStrategyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgVerifyStrategyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgVerifyStrategyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgVerifyStrategyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgVerifyStrategyResponse.Merge(m, src)
}
func (m *MsgVerifyStrategyResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgVerifyStrategyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgVerifyStrategyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgVerifyStrategyResponse proto.InternalMessageInfo

type MsgSetVerifier struct {
	Sender      string      `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	Contract    string      `protobuf:"bytes,2,opt,name=contract,proto3" json:"contract,omitempty"`
	Plane       types.Plane `protobuf:"varint,3,opt,name=plane,proto3,enum=flux.astromesh.v1beta1.Plane" json:"plane,omitempty"`
	NewVerifier string      `protobuf:"bytes,4,opt,name=new_verifier,json=newVerifier,proto3" json:"new_verifier,omitempty"`
}

func (m *MsgSetVerifier) Reset()         { *m = MsgSetVerifier{} }
func (m *MsgSetVerifier) String() string { return proto.CompactTextString(m) }
func (*MsgSetVerifier) ProtoMessage()    {}
func (*MsgSetVerifier) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd40292536fdda88, []int{7}
}
func (m *MsgSetVerifier) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetVerifier) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetVerifier.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetVerifier) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetVerifier.Merge(m, src)
}
func (m *MsgSetVerifier) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetVerifier) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetVerifier.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetVerifier proto.InternalMessageInfo

func (m *MsgSetVerifier) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *MsgSetVerifier) GetContract() string {
	if m != nil {
		return m.Contract
	}
	return ""
}

func (m *MsgSetVerifier) GetPlane() types.Plane {
	if m != nil {
		return m.Plane
	}
	return types.Plane_COSMOS
}

func (m *MsgSetVerifier) GetNewVerifier() string {
	if m != nil {
		return m.NewVerifier
	}
	return ""
}

type MsgSetVerifierResponse struct {
}

func (m *MsgSetVerifierResponse) Reset()         { *m = MsgSetVerifierResponse{} }
func (m *MsgSetVerifierResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSetVerifierResponse) ProtoMessage()    {}
func (*MsgSetVerifierResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd40292536fdda88, []int{8}
}
func (m *MsgSetVerifierResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetVerifierResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetVerifierResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetVerifierResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetVerifierResponse.Merge(m, src)
}
func (m *MsgSetVerifierResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetVerifierResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetVerifierResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetVerifierResponse proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("flux.strategy.v1beta1.Config", Config_name, Config_value)
	proto.RegisterType((*MsgConfigStrategy)(nil), "flux.strategy.v1beta1.MsgConfigStrategy")
	proto.RegisterType((*MsgConfigStrategyResponse)(nil), "flux.strategy.v1beta1.MsgConfigStrategyResponse")
	proto.RegisterType((*MsgTriggerStrategies)(nil), "flux.strategy.v1beta1.MsgTriggerStrategies")
	proto.RegisterType((*StrategyResponse)(nil), "flux.strategy.v1beta1.StrategyResponse")
	proto.RegisterType((*MsgTriggerStrategiesResponse)(nil), "flux.strategy.v1beta1.MsgTriggerStrategiesResponse")
	proto.RegisterType((*MsgVerifyStrategy)(nil), "flux.strategy.v1beta1.MsgVerifyStrategy")
	proto.RegisterType((*MsgVerifyStrategyResponse)(nil), "flux.strategy.v1beta1.MsgVerifyStrategyResponse")
	proto.RegisterType((*MsgSetVerifier)(nil), "flux.strategy.v1beta1.MsgSetVerifier")
	proto.RegisterType((*MsgSetVerifierResponse)(nil), "flux.strategy.v1beta1.MsgSetVerifierResponse")
}

func init() { proto.RegisterFile("flux/strategy/v1beta1/tx.proto", fileDescriptor_cd40292536fdda88) }

var fileDescriptor_cd40292536fdda88 = []byte{
	// 939 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x56, 0x4f, 0x6f, 0x1b, 0x45,
	0x14, 0xcf, 0x78, 0x13, 0x27, 0x79, 0x8e, 0x8c, 0x33, 0x0a, 0xe9, 0x76, 0xa1, 0x8e, 0x59, 0x01,
	0x35, 0xae, 0xe2, 0x6d, 0x1c, 0x21, 0x41, 0x24, 0x0e, 0xa4, 0x22, 0x28, 0x12, 0x46, 0xed, 0xba,
	0xea, 0x81, 0x8b, 0xb5, 0xde, 0x9d, 0x6c, 0x46, 0xac, 0x77, 0xdc, 0x9d, 0xd9, 0xd4, 0xbe, 0x21,
	0x24, 0x2e, 0x9c, 0xf8, 0x28, 0x39, 0xf0, 0x11, 0x40, 0xf4, 0x58, 0x71, 0xea, 0x09, 0xa1, 0xe4,
	0x10, 0x89, 0x4f, 0x81, 0x76, 0x77, 0x76, 0x62, 0xc7, 0x7f, 0x9a, 0xf6, 0x92, 0xcc, 0xcc, 0xfb,
	0xbd, 0x3f, 0xbf, 0xdf, 0xbc, 0x79, 0x5e, 0xa8, 0x9e, 0x04, 0xf1, 0xd0, 0xe2, 0x22, 0x72, 0x04,
	0xf1, 0x47, 0xd6, 0xd9, 0x5e, 0x8f, 0x08, 0x67, 0xcf, 0x12, 0xc3, 0xe6, 0x20, 0x62, 0x82, 0xe1,
	0xf7, 0x13, 0x7b, 0x33, 0xb7, 0x37, 0xa5, 0xdd, 0xd8, 0x74, 0xfa, 0x34, 0x64, 0x56, 0xfa, 0x37,
	0x43, 0x1a, 0x55, 0x97, 0xf1, 0x3e, 0xe3, 0x56, 0xcf, 0xe1, 0x44, 0xc5, 0x71, 0x19, 0x0d, 0xa5,
	0xfd, 0x8e, 0xb4, 0xf7, 0xb9, 0x6f, 0x9d, 0xed, 0x25, 0xff, 0xa4, 0xe1, 0x6e, 0x66, 0xe8, 0xa6,
	0x3b, 0x2b, 0xdb, 0x48, 0x93, 0x99, 0x56, 0xe7, 0x70, 0x11, 0xb1, 0x3e, 0xe1, 0xa7, 0x2a, 0xec,
	0xf3, 0x98, 0x44, 0x23, 0x89, 0xd9, 0x99, 0x83, 0xc9, 0x29, 0x18, 0x1f, 0xcf, 0xa6, 0xa8, 0x38,
	0x65, 0xa8, 0x2d, 0x9f, 0xf9, 0x2c, 0x2b, 0x21, 0x59, 0x65, 0xa7, 0xe6, 0xb9, 0x06, 0x9b, 0x6d,
	0xee, 0x3f, 0x62, 0xe1, 0x09, 0xf5, 0x3b, 0xd2, 0x03, 0x3f, 0x84, 0x22, 0x27, 0xa1, 0x47, 0x22,
	0x1d, 0xd5, 0x50, 0x7d, 0xfd, 0x50, 0xff, 0xfb, 0xf7, 0xdd, 0x2d, 0x59, 0xf8, 0xd7, 0x9e, 0x17,
	0x11, 0xce, 0x3b, 0x22, 0xa2, 0xa1, 0x6f, 0x4b, 0x1c, 0xfe, 0x1c, 0x8a, 0x6e, 0x1a, 0x43, 0x2f,
	0xd4, 0x50, 0xbd, 0xdc, 0xba, 0xd7, 0x9c, 0xa9, 0x6b, 0x33, 0x4b, 0x64, 0x4b, 0x30, 0x2e, 0x43,
	0x81, 0x7a, 0xba, 0x96, 0x24, 0xb1, 0x0b, 0xd4, 0xc3, 0x06, 0xac, 0xe5, 0x2e, 0xfa, 0x72, 0x0d,
	0xd5, 0x37, 0x6c, 0xb5, 0xc7, 0x5f, 0xc1, 0x4a, 0x2a, 0x8b, 0xbe, 0x52, 0x43, 0xf5, 0x52, 0xeb,
	0x7e, 0x96, 0x41, 0xe9, 0xa2, 0x52, 0x1c, 0x1d, 0x77, 0x9e, 0x24, 0x38, 0x9b, 0x3c, 0x8f, 0x09,
	0x17, 0x76, 0xe6, 0x85, 0x9f, 0x01, 0x16, 0x11, 0xf5, 0x7d, 0x12, 0x75, 0x07, 0x24, 0xea, 0x53,
	0xce, 0x29, 0x0b, 0xf5, 0xe2, 0x78, 0xac, 0xa9, 0x6a, 0x1f, 0x2b, 0xa0, 0xac, 0x7b, 0x53, 0x86,
	0xb8, 0x36, 0xe0, 0x47, 0xb0, 0xd6, 0x27, 0xc2, 0xf1, 0x1c, 0xe1, 0xe8, 0xab, 0x0b, 0xa3, 0xe5,
	0xf2, 0xb6, 0x25, 0xdc, 0x56, 0x8e, 0x07, 0x8d, 0x9f, 0xaf, 0xce, 0x1b, 0x52, 0xcb, 0x5f, 0xaf,
	0xce, 0x1b, 0x86, 0xba, 0xcd, 0xa9, 0xcb, 0x31, 0x1f, 0xc0, 0xdd, 0xa9, 0x43, 0x9b, 0xf0, 0x01,
	0x0b, 0x39, 0x91, 0x82, 0xa2, 0x5c, 0x50, 0xf3, 0x3f, 0x04, 0x5b, 0x6d, 0xee, 0x3f, 0xcd, 0xca,
	0x96, 0x70, 0x4a, 0xf8, 0x3b, 0x5c, 0x71, 0x05, 0x34, 0xea, 0x71, 0xbd, 0x50, 0xd3, 0xea, 0xeb,
	0x76, 0xb2, 0xc4, 0xdb, 0x50, 0xa4, 0xe1, 0x20, 0x16, 0x5c, 0xd7, 0x6a, 0x5a, 0x7d, 0xc3, 0x96,
	0x3b, 0xfc, 0x2d, 0xac, 0x26, 0x9a, 0x53, 0xc2, 0xf5, 0xe5, 0x9a, 0xf6, 0x16, 0x77, 0x75, 0xb8,
	0xfc, 0xf2, 0x9f, 0x1d, 0x64, 0xe7, 0xde, 0x07, 0xbb, 0x37, 0x64, 0xb9, 0x37, 0x2e, 0xcb, 0x14,
	0x27, 0xf3, 0x2f, 0x04, 0x95, 0x37, 0x29, 0x82, 0xbf, 0x00, 0x8d, 0x0e, 0x33, 0x1a, 0xa5, 0xd6,
	0xa7, 0x0b, 0x0a, 0x3b, 0x0e, 0xb9, 0x88, 0x62, 0x57, 0x50, 0x16, 0xda, 0x89, 0x0b, 0x7e, 0x02,
	0x1b, 0x74, 0xd8, 0x8d, 0x64, 0xe0, 0x8c, 0x74, 0xa9, 0xd5, 0xbc, 0x65, 0x08, 0xe9, 0x66, 0x97,
	0xe8, 0x30, 0x5f, 0xa7, 0x0a, 0x46, 0x84, 0xc7, 0x81, 0x48, 0xbb, 0x7d, 0xdd, 0x96, 0x3b, 0xf3,
	0x17, 0x04, 0x1f, 0xce, 0xa2, 0xa8, 0x58, 0x11, 0x50, 0x2d, 0xd2, 0xcd, 0xdb, 0xfa, 0xba, 0x32,
	0x34, 0xae, 0xfa, 0xdc, 0x3e, 0x54, 0x25, 0xe9, 0x39, 0x44, 0xe6, 0x53, 0xf5, 0x99, 0xaf, 0x51,
	0x3a, 0x1e, 0x9e, 0x91, 0x88, 0x9e, 0x8c, 0xd4, 0x78, 0xd8, 0x9e, 0xec, 0x1d, 0xd5, 0x21, 0x9f,
	0x41, 0xc5, 0x65, 0xa1, 0x88, 0x1c, 0x57, 0x74, 0x9d, 0xac, 0x87, 0xd2, 0x71, 0xb0, 0x6e, 0xbf,
	0x97, 0x9f, 0xcb, 0xd6, 0xc2, 0xfb, 0xb0, 0x32, 0x08, 0x9c, 0x90, 0xa4, 0x6f, 0x5f, 0x8d, 0x8b,
	0x69, 0x11, 0x1f, 0x27, 0x20, 0x3b, 0xc3, 0xe2, 0x1d, 0x28, 0x29, 0xd2, 0xd4, 0x93, 0x92, 0x41,
	0x7e, 0x74, 0xec, 0x2d, 0x7e, 0x46, 0x93, 0x24, 0xcc, 0x0f, 0xd2, 0x67, 0x34, 0x79, 0x98, 0x13,
	0x37, 0xff, 0x44, 0x50, 0x6e, 0x73, 0xbf, 0x43, 0x44, 0x0a, 0xa0, 0x24, 0x9a, 0x4b, 0xda, 0x80,
	0xb5, 0x9c, 0x9c, 0x24, 0xab, 0xf6, 0xef, 0xc6, 0xf2, 0x23, 0xd8, 0x08, 0xc9, 0x8b, 0xee, 0x99,
	0x4c, 0x2c, 0x69, 0x96, 0x42, 0xf2, 0x22, 0xaf, 0xe5, 0xe0, 0xfe, 0x0d, 0x9e, 0x77, 0xc6, 0x79,
	0x8e, 0x15, 0x6d, 0xea, 0xb0, 0x3d, 0x79, 0x92, 0x33, 0x6c, 0x7c, 0x03, 0xc5, 0x6c, 0x84, 0x60,
	0x80, 0xa2, 0x47, 0x06, 0x01, 0x1b, 0x55, 0x96, 0x92, 0x75, 0x3c, 0xf0, 0x1c, 0x41, 0x2a, 0x08,
	0x97, 0x60, 0xd5, 0xa3, 0xdc, 0xe9, 0x05, 0xa4, 0x52, 0x48, 0x0c, 0x24, 0x4c, 0xd7, 0x5a, 0xb2,
	0x8e, 0xc8, 0x19, 0xfb, 0x91, 0x54, 0x96, 0x5b, 0x7f, 0x68, 0xa0, 0xb5, 0xb9, 0x8f, 0x03, 0x28,
	0xdf, 0xf8, 0x0d, 0xa9, 0xcf, 0xe9, 0xbe, 0xa9, 0xd9, 0x65, 0x3c, 0xbc, 0x2d, 0x52, 0x75, 0x7f,
	0x0c, 0x9b, 0xd3, 0x13, 0xed, 0xc1, 0xfc, 0x30, 0x53, 0x60, 0x63, 0xff, 0x2d, 0xc0, 0x2a, 0x6d,
	0x00, 0xe5, 0x1b, 0x2f, 0x61, 0x01, 0xc9, 0x49, 0xe4, 0x22, 0x92, 0xb3, 0x7b, 0x10, 0xbb, 0x50,
	0x1a, 0xef, 0xbf, 0x4f, 0xe6, 0x07, 0x18, 0x83, 0x19, 0xbb, 0xb7, 0x82, 0xe5, 0x49, 0x8c, 0x95,
	0x9f, 0xae, 0xce, 0x1b, 0xe8, 0xb0, 0xf3, 0xf2, 0xa2, 0x8a, 0x5e, 0x5d, 0x54, 0xd1, 0xbf, 0x17,
	0x55, 0xf4, 0xdb, 0x65, 0x75, 0xe9, 0xd5, 0x65, 0x75, 0xe9, 0xf5, 0x65, 0x75, 0xe9, 0x87, 0x2f,
	0x7d, 0x2a, 0x4e, 0xe3, 0x5e, 0xd3, 0x65, 0x7d, 0xeb, 0x28, 0x88, 0x87, 0xdf, 0x1f, 0x3d, 0xfd,
	0xce, 0xe9, 0x71, 0x2b, 0xc9, 0xe2, 0x59, 0xee, 0xa9, 0x43, 0x43, 0xab, 0xcf, 0xbc, 0x38, 0x20,
	0xfc, 0xfa, 0x13, 0x44, 0x8c, 0x06, 0x84, 0xf7, 0x8a, 0xe9, 0x27, 0xc6, 0xfe, 0xff, 0x01, 0x00,
	0x00, 0xff, 0xff, 0x4a, 0xe0, 0x3e, 0x9c, 0x83, 0x09, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	ConfigStrategy(ctx context.Context, in *MsgConfigStrategy, opts ...grpc.CallOption) (*MsgConfigStrategyResponse, error)
	TriggerStrategies(ctx context.Context, in *MsgTriggerStrategies, opts ...grpc.CallOption) (*MsgTriggerStrategiesResponse, error)
	VerifyStrategy(ctx context.Context, in *MsgVerifyStrategy, opts ...grpc.CallOption) (*MsgVerifyStrategyResponse, error)
	SetVerifier(ctx context.Context, in *MsgSetVerifier, opts ...grpc.CallOption) (*MsgSetVerifierResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) ConfigStrategy(ctx context.Context, in *MsgConfigStrategy, opts ...grpc.CallOption) (*MsgConfigStrategyResponse, error) {
	out := new(MsgConfigStrategyResponse)
	err := c.cc.Invoke(ctx, "/flux.strategy.v1beta1.Msg/ConfigStrategy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) TriggerStrategies(ctx context.Context, in *MsgTriggerStrategies, opts ...grpc.CallOption) (*MsgTriggerStrategiesResponse, error) {
	out := new(MsgTriggerStrategiesResponse)
	err := c.cc.Invoke(ctx, "/flux.strategy.v1beta1.Msg/TriggerStrategies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) VerifyStrategy(ctx context.Context, in *MsgVerifyStrategy, opts ...grpc.CallOption) (*MsgVerifyStrategyResponse, error) {
	out := new(MsgVerifyStrategyResponse)
	err := c.cc.Invoke(ctx, "/flux.strategy.v1beta1.Msg/VerifyStrategy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SetVerifier(ctx context.Context, in *MsgSetVerifier, opts ...grpc.CallOption) (*MsgSetVerifierResponse, error) {
	out := new(MsgSetVerifierResponse)
	err := c.cc.Invoke(ctx, "/flux.strategy.v1beta1.Msg/SetVerifier", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	ConfigStrategy(context.Context, *MsgConfigStrategy) (*MsgConfigStrategyResponse, error)
	TriggerStrategies(context.Context, *MsgTriggerStrategies) (*MsgTriggerStrategiesResponse, error)
	VerifyStrategy(context.Context, *MsgVerifyStrategy) (*MsgVerifyStrategyResponse, error)
	SetVerifier(context.Context, *MsgSetVerifier) (*MsgSetVerifierResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) ConfigStrategy(ctx context.Context, req *MsgConfigStrategy) (*MsgConfigStrategyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigStrategy not implemented")
}
func (*UnimplementedMsgServer) TriggerStrategies(ctx context.Context, req *MsgTriggerStrategies) (*MsgTriggerStrategiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TriggerStrategies not implemented")
}
func (*UnimplementedMsgServer) VerifyStrategy(ctx context.Context, req *MsgVerifyStrategy) (*MsgVerifyStrategyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyStrategy not implemented")
}
func (*UnimplementedMsgServer) SetVerifier(ctx context.Context, req *MsgSetVerifier) (*MsgSetVerifierResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetVerifier not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_ConfigStrategy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgConfigStrategy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ConfigStrategy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flux.strategy.v1beta1.Msg/ConfigStrategy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ConfigStrategy(ctx, req.(*MsgConfigStrategy))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_TriggerStrategies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgTriggerStrategies)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).TriggerStrategies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flux.strategy.v1beta1.Msg/TriggerStrategies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).TriggerStrategies(ctx, req.(*MsgTriggerStrategies))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_VerifyStrategy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgVerifyStrategy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).VerifyStrategy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flux.strategy.v1beta1.Msg/VerifyStrategy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).VerifyStrategy(ctx, req.(*MsgVerifyStrategy))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SetVerifier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSetVerifier)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SetVerifier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flux.strategy.v1beta1.Msg/SetVerifier",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SetVerifier(ctx, req.(*MsgSetVerifier))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "flux.strategy.v1beta1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ConfigStrategy",
			Handler:    _Msg_ConfigStrategy_Handler,
		},
		{
			MethodName: "TriggerStrategies",
			Handler:    _Msg_TriggerStrategies_Handler,
		},
		{
			MethodName: "VerifyStrategy",
			Handler:    _Msg_VerifyStrategy_Handler,
		},
		{
			MethodName: "SetVerifier",
			Handler:    _Msg_SetVerifier_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "flux/strategy/v1beta1/tx.proto",
}

func (m *MsgConfigStrategy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgConfigStrategy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgConfigStrategy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Metadata != nil {
		{
			size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.TriggerPermission != nil {
		{
			size, err := m.TriggerPermission.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.Query != nil {
		{
			size, err := m.Query.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Strategy) > 0 {
		i -= len(m.Strategy)
		copy(dAtA[i:], m.Strategy)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Strategy)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Config != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Config))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgConfigStrategyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgConfigStrategyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgConfigStrategyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgTriggerStrategies) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgTriggerStrategies) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgTriggerStrategies) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Queries) > 0 {
		for iNdEx := len(m.Queries) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Queries[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Inputs) > 0 {
		for iNdEx := len(m.Inputs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Inputs[iNdEx])
			copy(dAtA[i:], m.Inputs[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.Inputs[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Ids) > 0 {
		for iNdEx := len(m.Ids) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Ids[iNdEx])
			copy(dAtA[i:], m.Ids[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.Ids[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StrategyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StrategyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StrategyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Result) > 0 {
		i -= len(m.Result)
		copy(dAtA[i:], m.Result)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Result)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.IxResponses) > 0 {
		for iNdEx := len(m.IxResponses) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.IxResponses[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Ixs) > 0 {
		for iNdEx := len(m.Ixs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Ixs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgTriggerStrategiesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgTriggerStrategiesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgTriggerStrategiesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.StrategyTriggerResponses) > 0 {
		for iNdEx := len(m.StrategyTriggerResponses) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.StrategyTriggerResponses[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *MsgVerifyStrategy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgVerifyStrategy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgVerifyStrategy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.StrategyId) > 0 {
		i -= len(m.StrategyId)
		copy(dAtA[i:], m.StrategyId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.StrategyId)))
		i--
		dAtA[i] = 0x22
	}
	if m.Plane != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Plane))
		i--
		dAtA[i] = 0x18
	}
	if len(m.ContractAddress) > 0 {
		i -= len(m.ContractAddress)
		copy(dAtA[i:], m.ContractAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ContractAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgVerifyStrategyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgVerifyStrategyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgVerifyStrategyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSetVerifier) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetVerifier) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetVerifier) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NewVerifier) > 0 {
		i -= len(m.NewVerifier)
		copy(dAtA[i:], m.NewVerifier)
		i = encodeVarintTx(dAtA, i, uint64(len(m.NewVerifier)))
		i--
		dAtA[i] = 0x22
	}
	if m.Plane != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Plane))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Contract) > 0 {
		i -= len(m.Contract)
		copy(dAtA[i:], m.Contract)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Contract)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSetVerifierResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetVerifierResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetVerifierResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgConfigStrategy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Config != 0 {
		n += 1 + sovTx(uint64(m.Config))
	}
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Strategy)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Query != nil {
		l = m.Query.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	if m.TriggerPermission != nil {
		l = m.TriggerPermission.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgConfigStrategyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgTriggerStrategies) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.Ids) > 0 {
		for _, s := range m.Ids {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if len(m.Inputs) > 0 {
		for _, b := range m.Inputs {
			l = len(b)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if len(m.Queries) > 0 {
		for _, e := range m.Queries {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *StrategyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.Ixs) > 0 {
		for _, e := range m.Ixs {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if len(m.IxResponses) > 0 {
		for _, e := range m.IxResponses {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	l = len(m.Result)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgTriggerStrategiesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.StrategyTriggerResponses) > 0 {
		for _, e := range m.StrategyTriggerResponses {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgVerifyStrategy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ContractAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Plane != 0 {
		n += 1 + sovTx(uint64(m.Plane))
	}
	l = len(m.StrategyId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgVerifyStrategyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSetVerifier) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Contract)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Plane != 0 {
		n += 1 + sovTx(uint64(m.Plane))
	}
	l = len(m.NewVerifier)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgSetVerifierResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgConfigStrategy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgConfigStrategy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgConfigStrategy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Config", wireType)
			}
			m.Config = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Config |= Config(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Strategy", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Strategy = append(m.Strategy[:0], dAtA[iNdEx:postIndex]...)
			if m.Strategy == nil {
				m.Strategy = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Query", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Query == nil {
				m.Query = &types.FISQueryRequest{}
			}
			if err := m.Query.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TriggerPermission", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TriggerPermission == nil {
				m.TriggerPermission = &PermissionConfig{}
			}
			if err := m.TriggerPermission.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &StrategyMetadata{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgConfigStrategyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgConfigStrategyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgConfigStrategyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgTriggerStrategies) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgTriggerStrategies: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgTriggerStrategies: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ids", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ids = append(m.Ids, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Inputs", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Inputs = append(m.Inputs, make([]byte, postIndex-iNdEx))
			copy(m.Inputs[len(m.Inputs)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Queries", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Queries = append(m.Queries, &types.FISQueryRequest{})
			if err := m.Queries[len(m.Queries)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StrategyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StrategyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StrategyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ixs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ixs = append(m.Ixs, &types.FISInstruction{})
			if err := m.Ixs[len(m.Ixs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IxResponses", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IxResponses = append(m.IxResponses, &types.FISInstructionResponse{})
			if err := m.IxResponses[len(m.IxResponses)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Result = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgTriggerStrategiesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgTriggerStrategiesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgTriggerStrategiesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StrategyTriggerResponses", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StrategyTriggerResponses = append(m.StrategyTriggerResponses, &StrategyResponse{})
			if err := m.StrategyTriggerResponses[len(m.StrategyTriggerResponses)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgVerifyStrategy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgVerifyStrategy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgVerifyStrategy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Plane", wireType)
			}
			m.Plane = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Plane |= types.Plane(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StrategyId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StrategyId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgVerifyStrategyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgVerifyStrategyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgVerifyStrategyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetVerifier) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetVerifier: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetVerifier: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contract", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Contract = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Plane", wireType)
			}
			m.Plane = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Plane |= types.Plane(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewVerifier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewVerifier = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetVerifierResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetVerifierResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetVerifierResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
