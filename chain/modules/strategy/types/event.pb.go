// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: flux/strategy/v1beta1/event.proto

package types

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	types "github.com/FluxNFTLabs/sdk-go/chain/eventstream/types"
	types2 "github.com/FluxNFTLabs/sdk-go/chain/modules/astromesh/types"
	github_com_cometbft_cometbft_libs_bytes "github.com/cometbft/cometbft/libs/bytes"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	types1 "github.com/cosmos/gogoproto/types"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type StrategyUpdateEvent struct {
	Op                types.Op                `protobuf:"varint,1,opt,name=op,proto3,enum=flux.eventstream.v1beta1.Op" json:"op,omitempty"`
	Id                []byte                  `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	IsEnabled         *types1.BoolValue       `protobuf:"bytes,3,opt,name=is_enabled,json=isEnabled,proto3" json:"is_enabled,omitempty" bson:"is_enabled"`
	TriggerPermission *PermissionConfig       `protobuf:"bytes,4,opt,name=trigger_permission,json=triggerPermission,proto3" json:"trigger_permission,omitempty" bson:"trigger_permission"`
	Query             *types2.FISQueryRequest `protobuf:"bytes,5,opt,name=query,proto3" json:"query,omitempty"`
	QueryHash         []byte                  `protobuf:"bytes,6,opt,name=query_hash,json=queryHash,proto3" json:"query_hash,omitempty" bson:"query_hash"`
	Metadata          *StrategyMetadata       `protobuf:"bytes,7,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (m *StrategyUpdateEvent) Reset()         { *m = StrategyUpdateEvent{} }
func (m *StrategyUpdateEvent) String() string { return proto.CompactTextString(m) }
func (*StrategyUpdateEvent) ProtoMessage()    {}
func (*StrategyUpdateEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_c72759cbd5b43ae0, []int{0}
}
func (m *StrategyUpdateEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StrategyUpdateEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StrategyUpdateEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StrategyUpdateEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StrategyUpdateEvent.Merge(m, src)
}
func (m *StrategyUpdateEvent) XXX_Size() int {
	return m.Size()
}
func (m *StrategyUpdateEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_StrategyUpdateEvent.DiscardUnknown(m)
}

var xxx_messageInfo_StrategyUpdateEvent proto.InternalMessageInfo

func (m *StrategyUpdateEvent) GetOp() types.Op {
	if m != nil {
		return m.Op
	}
	return types.Op_COSMOS_SET
}

func (m *StrategyUpdateEvent) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *StrategyUpdateEvent) GetIsEnabled() *types1.BoolValue {
	if m != nil {
		return m.IsEnabled
	}
	return nil
}

func (m *StrategyUpdateEvent) GetTriggerPermission() *PermissionConfig {
	if m != nil {
		return m.TriggerPermission
	}
	return nil
}

func (m *StrategyUpdateEvent) GetQuery() *types2.FISQueryRequest {
	if m != nil {
		return m.Query
	}
	return nil
}

func (m *StrategyUpdateEvent) GetQueryHash() []byte {
	if m != nil {
		return m.QueryHash
	}
	return nil
}

func (m *StrategyUpdateEvent) GetMetadata() *StrategyMetadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

type StrategyTriggerEvent struct {
	Op       types.Op                                         `protobuf:"varint,1,opt,name=op,proto3,enum=flux.eventstream.v1beta1.Op" json:"op,omitempty"`
	Id       github_com_cometbft_cometbft_libs_bytes.HexBytes `protobuf:"bytes,2,opt,name=id,proto3,casttype=github.com/cometbft/cometbft/libs/bytes.HexBytes" json:"id,omitempty"`
	Executor string                                           `protobuf:"bytes,3,opt,name=executor,proto3" json:"executor,omitempty"`
	// output (instructions) after fiswasm run
	Instructions []byte `protobuf:"bytes,4,opt,name=instructions,proto3" json:"instructions,omitempty" bson:"instructions"`
	// output after fis executed (proto bytes)
	FisTransactionOutput []byte `protobuf:"bytes,5,opt,name=fis_transaction_output,json=fisTransactionOutput,proto3" json:"fis_transaction_output,omitempty" bson:"fis_transaction_output"`
	// error after fis execution (proto bytes)
	Error       string                `protobuf:"bytes,6,opt,name=error,proto3" json:"error,omitempty" bson:"error"`
	GasConsumed uint64                `protobuf:"varint,7,opt,name=gas_consumed,json=gasConsumed,proto3" json:"gas_consumed,omitempty" bson:"gas_consumed"`
	Fee         cosmossdk_io_math.Int `protobuf:"bytes,8,opt,name=fee,proto3,customtype=cosmossdk.io/math.Int" json:"fee"`
	Height      int64                 `protobuf:"varint,9,opt,name=height,proto3" json:"height,omitempty"`
	Time        int64                 `protobuf:"varint,10,opt,name=time,proto3" json:"time,omitempty"`
}

func (m *StrategyTriggerEvent) Reset()         { *m = StrategyTriggerEvent{} }
func (m *StrategyTriggerEvent) String() string { return proto.CompactTextString(m) }
func (*StrategyTriggerEvent) ProtoMessage()    {}
func (*StrategyTriggerEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_c72759cbd5b43ae0, []int{1}
}
func (m *StrategyTriggerEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StrategyTriggerEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StrategyTriggerEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StrategyTriggerEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StrategyTriggerEvent.Merge(m, src)
}
func (m *StrategyTriggerEvent) XXX_Size() int {
	return m.Size()
}
func (m *StrategyTriggerEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_StrategyTriggerEvent.DiscardUnknown(m)
}

var xxx_messageInfo_StrategyTriggerEvent proto.InternalMessageInfo

func (m *StrategyTriggerEvent) GetOp() types.Op {
	if m != nil {
		return m.Op
	}
	return types.Op_COSMOS_SET
}

func (m *StrategyTriggerEvent) GetId() github_com_cometbft_cometbft_libs_bytes.HexBytes {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *StrategyTriggerEvent) GetExecutor() string {
	if m != nil {
		return m.Executor
	}
	return ""
}

func (m *StrategyTriggerEvent) GetInstructions() []byte {
	if m != nil {
		return m.Instructions
	}
	return nil
}

func (m *StrategyTriggerEvent) GetFisTransactionOutput() []byte {
	if m != nil {
		return m.FisTransactionOutput
	}
	return nil
}

func (m *StrategyTriggerEvent) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *StrategyTriggerEvent) GetGasConsumed() uint64 {
	if m != nil {
		return m.GasConsumed
	}
	return 0
}

func (m *StrategyTriggerEvent) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *StrategyTriggerEvent) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func init() {
	proto.RegisterType((*StrategyUpdateEvent)(nil), "flux.strategy.v1beta1.StrategyUpdateEvent")
	proto.RegisterType((*StrategyTriggerEvent)(nil), "flux.strategy.v1beta1.StrategyTriggerEvent")
}

func init() { proto.RegisterFile("flux/strategy/v1beta1/event.proto", fileDescriptor_c72759cbd5b43ae0) }

var fileDescriptor_c72759cbd5b43ae0 = []byte{
	// 745 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x94, 0x41, 0x6f, 0xeb, 0x44,
	0x10, 0xc7, 0xe3, 0x24, 0x2d, 0xcd, 0xbe, 0xe8, 0x89, 0xb7, 0x2f, 0x7d, 0xb8, 0x15, 0x8d, 0xf3,
	0x2c, 0x04, 0x39, 0x80, 0xcd, 0x2b, 0xbd, 0x50, 0xc4, 0x01, 0x97, 0x56, 0xad, 0x04, 0x14, 0x9c,
	0x00, 0x12, 0x97, 0x68, 0x1d, 0x4f, 0xec, 0x15, 0xb6, 0xd7, 0xdd, 0x5d, 0x97, 0xf4, 0x5b, 0x70,
	0xe3, 0x8b, 0xf0, 0x21, 0x7a, 0xac, 0x38, 0xa1, 0x1e, 0x2c, 0xd4, 0x7e, 0x83, 0x1c, 0x39, 0x21,
	0xaf, 0x9d, 0x38, 0x15, 0x11, 0x07, 0x6e, 0xb3, 0x33, 0xbf, 0x99, 0xc9, 0xcc, 0x7f, 0x62, 0xf4,
	0x7a, 0x16, 0x65, 0x73, 0x5b, 0x48, 0x4e, 0x24, 0x04, 0x37, 0xf6, 0xf5, 0x1b, 0x0f, 0x24, 0x79,
	0x63, 0xc3, 0x35, 0x24, 0xd2, 0x4a, 0x39, 0x93, 0x0c, 0xef, 0x16, 0x88, 0xb5, 0x44, 0xac, 0x0a,
	0xd9, 0xef, 0x07, 0x8c, 0x05, 0x11, 0xd8, 0x0a, 0xf2, 0xb2, 0x99, 0xfd, 0x0b, 0x27, 0x69, 0x0a,
	0x5c, 0x94, 0x69, 0xfb, 0xbd, 0x80, 0x05, 0x4c, 0x99, 0x76, 0x61, 0x55, 0xde, 0xf7, 0x36, 0xf7,
	0x5b, 0x55, 0x2f, 0x29, 0x53, 0x51, 0x44, 0x48, 0xce, 0x62, 0x10, 0xe1, 0x0a, 0xbb, 0xca, 0x80,
	0x2f, 0x99, 0xbd, 0x29, 0x13, 0x31, 0x13, 0x93, 0xb2, 0x45, 0xf9, 0x78, 0xd2, 0x44, 0xcd, 0x20,
	0x24, 0x07, 0x12, 0x6f, 0x2a, 0x60, 0xde, 0xb7, 0xd0, 0xcb, 0x51, 0xd5, 0xf7, 0xfb, 0xd4, 0x27,
	0x12, 0x4e, 0x8b, 0x0c, 0xfc, 0x21, 0x6a, 0xb2, 0x54, 0xd7, 0x06, 0xda, 0xf0, 0xf9, 0xe1, 0xbb,
	0x96, 0x1a, 0x7e, 0xad, 0xd4, 0x72, 0x7e, 0xeb, 0x32, 0x75, 0x9b, 0x2c, 0xc5, 0xcf, 0x51, 0x93,
	0xfa, 0x7a, 0x73, 0xa0, 0x0d, 0xbb, 0x6e, 0x93, 0xfa, 0x78, 0x8c, 0x10, 0x15, 0x13, 0x48, 0x88,
	0x17, 0x81, 0xaf, 0xb7, 0x06, 0xda, 0xf0, 0xd9, 0xe1, 0xbe, 0x55, 0xee, 0xca, 0x5a, 0xee, 0xca,
	0x72, 0x18, 0x8b, 0x7e, 0x20, 0x51, 0x06, 0xce, 0xde, 0x6d, 0x6e, 0x68, 0x8b, 0xdc, 0x78, 0xe1,
	0x09, 0x96, 0x1c, 0x9b, 0x75, 0xae, 0xe9, 0x76, 0xa8, 0x38, 0x2d, 0x6d, 0x9c, 0x21, 0x2c, 0x39,
	0x0d, 0x02, 0xe0, 0x93, 0x14, 0x78, 0x4c, 0x85, 0xa0, 0x2c, 0xd1, 0xdb, 0xaa, 0xfa, 0x07, 0xd6,
	0x46, 0x81, 0xac, 0x6f, 0x57, 0xe0, 0x09, 0x4b, 0x66, 0x34, 0x70, 0x0e, 0x16, 0xb9, 0xb1, 0x57,
	0xb6, 0xf9, 0x77, 0x31, 0xd3, 0x7d, 0x51, 0x39, 0xeb, 0x3c, 0xfc, 0x39, 0xda, 0x52, 0x1b, 0xd3,
	0xb7, 0xd6, 0x3b, 0xad, 0x74, 0x59, 0xb5, 0x3a, 0xbb, 0x18, 0x7d, 0x57, 0x70, 0x2e, 0x5c, 0x65,
	0x20, 0xa4, 0x5b, 0x66, 0xe1, 0x23, 0x84, 0x94, 0x31, 0x09, 0x89, 0x08, 0xf5, 0xed, 0x62, 0x47,
	0xce, 0x6e, 0x3d, 0x6b, 0x1d, 0x33, 0xdd, 0x8e, 0x7a, 0x9c, 0x13, 0x11, 0xe2, 0x13, 0xb4, 0x13,
	0x83, 0x24, 0x3e, 0x91, 0x44, 0x7f, 0xeb, 0x3f, 0x27, 0x5c, 0xaa, 0xf7, 0x75, 0x85, 0xbb, 0xab,
	0x44, 0xf3, 0xb7, 0x36, 0xea, 0x2d, 0xc3, 0xe3, 0x72, 0xae, 0xff, 0xa3, 0xee, 0x97, 0xb5, 0xba,
	0xce, 0xd1, 0xdf, 0xb9, 0xf1, 0x71, 0x40, 0x65, 0x98, 0x79, 0xd6, 0x94, 0xc5, 0xf6, 0x94, 0xc5,
	0x20, 0xbd, 0x99, 0xac, 0x8d, 0x88, 0x7a, 0xc2, 0xf6, 0x6e, 0x24, 0x08, 0xeb, 0x1c, 0xe6, 0x4e,
	0x61, 0xa8, 0x9b, 0x38, 0x42, 0x3b, 0x30, 0x87, 0x69, 0x26, 0x19, 0x57, 0x17, 0xd1, 0x71, 0xf4,
	0x3f, 0x7e, 0xff, 0xa8, 0x57, 0xdd, 0xec, 0x17, 0xbe, 0xcf, 0x41, 0x88, 0x91, 0xe4, 0x34, 0x09,
	0xdc, 0x15, 0x89, 0x3f, 0x43, 0x5d, 0x9a, 0x08, 0xc9, 0xb3, 0xa9, 0xa4, 0x2c, 0x11, 0x4a, 0xed,
	0xae, 0xf3, 0xce, 0x22, 0x37, 0x5e, 0x56, 0xb7, 0xb2, 0x16, 0x35, 0xdd, 0x27, 0x30, 0xfe, 0x11,
	0xbd, 0x9a, 0x51, 0x31, 0x91, 0x9c, 0x24, 0x82, 0x28, 0xdf, 0x84, 0x65, 0x32, 0xcd, 0xa4, 0x92,
	0xb2, 0xeb, 0xbc, 0x5e, 0xe4, 0xc6, 0x41, 0x59, 0x66, 0x33, 0x67, 0xba, 0xbd, 0x19, 0x15, 0xe3,
	0xda, 0x7f, 0xa9, 0xdc, 0xf8, 0x7d, 0xb4, 0x05, 0x9c, 0x33, 0xae, 0xe4, 0xec, 0x38, 0x6f, 0x2f,
	0x72, 0xa3, 0x5b, 0xd6, 0x51, 0x6e, 0xd3, 0x2d, 0xc3, 0xf8, 0x18, 0x75, 0x03, 0x22, 0x26, 0x53,
	0x96, 0x88, 0x2c, 0x06, 0x5f, 0x29, 0xd9, 0x5e, 0xff, 0xf5, 0xeb, 0x51, 0xd3, 0x7d, 0x16, 0x10,
	0x71, 0x52, 0xbd, 0xb0, 0x8d, 0x5a, 0x33, 0x00, 0x7d, 0x47, 0x75, 0x38, 0xb8, 0xcd, 0x8d, 0xc6,
	0x7d, 0x6e, 0xec, 0x96, 0xeb, 0x12, 0xfe, 0xcf, 0x16, 0x65, 0x76, 0x4c, 0x64, 0x68, 0x5d, 0x24,
	0xd2, 0x2d, 0x48, 0xfc, 0x0a, 0x6d, 0x87, 0x40, 0x83, 0x50, 0xea, 0x9d, 0x81, 0x36, 0x6c, 0xb9,
	0xd5, 0x0b, 0x63, 0xd4, 0x96, 0x34, 0x06, 0x1d, 0x29, 0xaf, 0xb2, 0x9d, 0xd1, 0xed, 0x43, 0x5f,
	0xbb, 0x7b, 0xe8, 0x6b, 0x7f, 0x3d, 0xf4, 0xb5, 0x5f, 0x1f, 0xfb, 0x8d, 0xbb, 0xc7, 0x7e, 0xe3,
	0xcf, 0xc7, 0x7e, 0xe3, 0xa7, 0x4f, 0xd7, 0xc4, 0x3d, 0x8b, 0xb2, 0xf9, 0x37, 0x67, 0xe3, 0xaf,
	0x88, 0x27, 0xec, 0xe2, 0x48, 0x7c, 0x7b, 0x1a, 0x12, 0x9a, 0xd8, 0x31, 0xf3, 0xb3, 0x08, 0x44,
	0xfd, 0x05, 0x93, 0x37, 0x29, 0x08, 0x6f, 0x5b, 0xfd, 0xb3, 0x3f, 0xf9, 0x27, 0x00, 0x00, 0xff,
	0xff, 0xc4, 0x11, 0x97, 0x4c, 0x4f, 0x05, 0x00, 0x00,
}

func (m *StrategyUpdateEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StrategyUpdateEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StrategyUpdateEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Metadata != nil {
		{
			size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if len(m.QueryHash) > 0 {
		i -= len(m.QueryHash)
		copy(dAtA[i:], m.QueryHash)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.QueryHash)))
		i--
		dAtA[i] = 0x32
	}
	if m.Query != nil {
		{
			size, err := m.Query.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.TriggerPermission != nil {
		{
			size, err := m.TriggerPermission.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.IsEnabled != nil {
		{
			size, err := m.IsEnabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0x12
	}
	if m.Op != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.Op))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *StrategyTriggerEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StrategyTriggerEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StrategyTriggerEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Time != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.Time))
		i--
		dAtA[i] = 0x50
	}
	if m.Height != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x48
	}
	{
		size := m.Fee.Size()
		i -= size
		if _, err := m.Fee.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvent(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	if m.GasConsumed != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.GasConsumed))
		i--
		dAtA[i] = 0x38
	}
	if len(m.Error) > 0 {
		i -= len(m.Error)
		copy(dAtA[i:], m.Error)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Error)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.FisTransactionOutput) > 0 {
		i -= len(m.FisTransactionOutput)
		copy(dAtA[i:], m.FisTransactionOutput)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.FisTransactionOutput)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Instructions) > 0 {
		i -= len(m.Instructions)
		copy(dAtA[i:], m.Instructions)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Instructions)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Executor) > 0 {
		i -= len(m.Executor)
		copy(dAtA[i:], m.Executor)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Executor)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0x12
	}
	if m.Op != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.Op))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintEvent(dAtA []byte, offset int, v uint64) int {
	offset -= sovEvent(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *StrategyUpdateEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Op != 0 {
		n += 1 + sovEvent(uint64(m.Op))
	}
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	if m.IsEnabled != nil {
		l = m.IsEnabled.Size()
		n += 1 + l + sovEvent(uint64(l))
	}
	if m.TriggerPermission != nil {
		l = m.TriggerPermission.Size()
		n += 1 + l + sovEvent(uint64(l))
	}
	if m.Query != nil {
		l = m.Query.Size()
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.QueryHash)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func (m *StrategyTriggerEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Op != 0 {
		n += 1 + sovEvent(uint64(m.Op))
	}
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.Executor)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.Instructions)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.FisTransactionOutput)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	if m.GasConsumed != 0 {
		n += 1 + sovEvent(uint64(m.GasConsumed))
	}
	l = m.Fee.Size()
	n += 1 + l + sovEvent(uint64(l))
	if m.Height != 0 {
		n += 1 + sovEvent(uint64(m.Height))
	}
	if m.Time != 0 {
		n += 1 + sovEvent(uint64(m.Time))
	}
	return n
}

func sovEvent(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEvent(x uint64) (n int) {
	return sovEvent(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *StrategyUpdateEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StrategyUpdateEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StrategyUpdateEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Op", wireType)
			}
			m.Op = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Op |= types.Op(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id[:0], dAtA[iNdEx:postIndex]...)
			if m.Id == nil {
				m.Id = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsEnabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IsEnabled == nil {
				m.IsEnabled = &types1.BoolValue{}
			}
			if err := m.IsEnabled.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TriggerPermission", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TriggerPermission == nil {
				m.TriggerPermission = &PermissionConfig{}
			}
			if err := m.TriggerPermission.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Query", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Query == nil {
				m.Query = &types2.FISQueryRequest{}
			}
			if err := m.Query.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueryHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QueryHash = append(m.QueryHash[:0], dAtA[iNdEx:postIndex]...)
			if m.QueryHash == nil {
				m.QueryHash = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &StrategyMetadata{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StrategyTriggerEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StrategyTriggerEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StrategyTriggerEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Op", wireType)
			}
			m.Op = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Op |= types.Op(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id[:0], dAtA[iNdEx:postIndex]...)
			if m.Id == nil {
				m.Id = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Executor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Executor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Instructions", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Instructions = append(m.Instructions[:0], dAtA[iNdEx:postIndex]...)
			if m.Instructions == nil {
				m.Instructions = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FisTransactionOutput", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FisTransactionOutput = append(m.FisTransactionOutput[:0], dAtA[iNdEx:postIndex]...)
			if m.FisTransactionOutput == nil {
				m.FisTransactionOutput = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasConsumed", wireType)
			}
			m.GasConsumed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GasConsumed |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Fee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEvent(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEvent
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEvent
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEvent
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEvent        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEvent          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEvent = fmt.Errorf("proto: unexpected end of group")
)
