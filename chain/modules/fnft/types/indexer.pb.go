// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: flux/fnft/v1beta1/indexer.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types/query"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ListFNFTRequest struct {
	ClassId string `protobuf:"bytes,1,opt,name=class_id,json=classId,proto3" json:"class_id,omitempty"`
	Id      string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Owner   string `protobuf:"bytes,3,opt,name=owner,proto3" json:"owner,omitempty"`
}

func (m *ListFNFTRequest) Reset()         { *m = ListFNFTRequest{} }
func (m *ListFNFTRequest) String() string { return proto.CompactTextString(m) }
func (*ListFNFTRequest) ProtoMessage()    {}
func (*ListFNFTRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_90c9907ab2e457a8, []int{0}
}
func (m *ListFNFTRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListFNFTRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListFNFTRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListFNFTRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListFNFTRequest.Merge(m, src)
}
func (m *ListFNFTRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListFNFTRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListFNFTRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListFNFTRequest proto.InternalMessageInfo

func (m *ListFNFTRequest) GetClassId() string {
	if m != nil {
		return m.ClassId
	}
	return ""
}

func (m *ListFNFTRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ListFNFTRequest) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

type ListFNFTResponse struct {
	Nft []*NFT `protobuf:"bytes,1,rep,name=nft,proto3" json:"nft,omitempty"`
}

func (m *ListFNFTResponse) Reset()         { *m = ListFNFTResponse{} }
func (m *ListFNFTResponse) String() string { return proto.CompactTextString(m) }
func (*ListFNFTResponse) ProtoMessage()    {}
func (*ListFNFTResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_90c9907ab2e457a8, []int{1}
}
func (m *ListFNFTResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListFNFTResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListFNFTResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListFNFTResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListFNFTResponse.Merge(m, src)
}
func (m *ListFNFTResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListFNFTResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListFNFTResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListFNFTResponse proto.InternalMessageInfo

func (m *ListFNFTResponse) GetNft() []*NFT {
	if m != nil {
		return m.Nft
	}
	return nil
}

func init() {
	proto.RegisterType((*ListFNFTRequest)(nil), "flux.fnft.v1beta1.ListFNFTRequest")
	proto.RegisterType((*ListFNFTResponse)(nil), "flux.fnft.v1beta1.ListFNFTResponse")
}

func init() { proto.RegisterFile("flux/fnft/v1beta1/indexer.proto", fileDescriptor_90c9907ab2e457a8) }

var fileDescriptor_90c9907ab2e457a8 = []byte{
	// 335 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x90, 0x4f, 0x4b, 0xc3, 0x30,
	0x18, 0xc6, 0xd7, 0x0d, 0xdd, 0x8c, 0xe0, 0x9f, 0x20, 0x52, 0xa7, 0xd4, 0x31, 0x2f, 0xc3, 0x43,
	0xc3, 0x26, 0xde, 0x3c, 0x79, 0x28, 0x0c, 0xc6, 0x84, 0xb9, 0x93, 0x07, 0x25, 0x6d, 0xd2, 0x2e,
	0xd0, 0x25, 0x5d, 0xdf, 0x54, 0xb7, 0x6f, 0xe1, 0xc7, 0xf2, 0xb8, 0xa3, 0x47, 0x59, 0xbf, 0x88,
	0x34, 0x9d, 0x0a, 0x4e, 0x3c, 0xe6, 0x7d, 0x7e, 0xcf, 0xf3, 0xbe, 0x79, 0xd0, 0x79, 0x18, 0x67,
	0x73, 0x12, 0xca, 0x50, 0x93, 0xe7, 0xae, 0xcf, 0x35, 0xed, 0x12, 0x21, 0x19, 0x9f, 0xf3, 0xd4,
	0x4d, 0x52, 0xa5, 0x15, 0x3e, 0x2c, 0x00, 0xb7, 0x00, 0xdc, 0x35, 0xd0, 0xbc, 0x0c, 0x14, 0x4c,
	0x15, 0x10, 0x9f, 0x02, 0x27, 0xb3, 0x8c, 0xa7, 0x8b, 0x6f, 0x6f, 0x42, 0x23, 0x21, 0xa9, 0x16,
	0x4a, 0x96, 0xf6, 0xe6, 0x59, 0xa4, 0x54, 0x14, 0x73, 0x42, 0x13, 0x41, 0xa8, 0x94, 0x4a, 0x1b,
	0x11, 0xd6, 0xea, 0xe9, 0xe6, 0xf6, 0x62, 0x91, 0x11, 0xdb, 0x23, 0xb4, 0x3f, 0x10, 0xa0, 0xbd,
	0xa1, 0x37, 0x1e, 0xf1, 0x59, 0xc6, 0x41, 0xe3, 0x13, 0xd4, 0x08, 0x62, 0x0a, 0xf0, 0x24, 0x98,
	0x6d, 0xb5, 0xac, 0xce, 0xce, 0xa8, 0x6e, 0xde, 0x7d, 0x86, 0xf7, 0x50, 0x55, 0x30, 0xbb, 0x6a,
	0x86, 0x55, 0xc1, 0xf0, 0x11, 0xda, 0x52, 0x2f, 0x92, 0xa7, 0x76, 0xcd, 0x8c, 0xca, 0x47, 0xfb,
	0x06, 0x1d, 0xfc, 0x64, 0x42, 0xa2, 0x24, 0x70, 0xdc, 0x41, 0x35, 0x19, 0x6a, 0xdb, 0x6a, 0xd5,
	0x3a, 0xbb, 0xbd, 0x63, 0x77, 0xe3, 0xbf, 0x6e, 0x01, 0x17, 0x48, 0xef, 0x11, 0xd5, 0xfb, 0x65,
	0x39, 0xf8, 0x1e, 0x35, 0xbe, 0x82, 0x70, 0xfb, 0x0f, 0xcf, 0xaf, 0xcb, 0x9b, 0x17, 0xff, 0x32,
	0xe5, 0x25, 0xb7, 0x77, 0x6f, 0x2b, 0xc7, 0x5a, 0xae, 0x1c, 0xeb, 0x63, 0xe5, 0x58, 0xaf, 0xb9,
	0x53, 0x59, 0xe6, 0x4e, 0xe5, 0x3d, 0x77, 0x2a, 0x0f, 0xd7, 0x91, 0xd0, 0x93, 0xcc, 0x77, 0x03,
	0x35, 0x25, 0x5e, 0x9c, 0xcd, 0x87, 0xde, 0x78, 0x40, 0x7d, 0x20, 0x45, 0x28, 0x23, 0xc1, 0x84,
	0x0a, 0x49, 0xa6, 0x8a, 0x65, 0x31, 0x87, 0xb2, 0x4e, 0xbd, 0x48, 0x38, 0xf8, 0xdb, 0xa6, 0xc9,
	0xab, 0xcf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x3d, 0x22, 0xf8, 0xdc, 0xe6, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// IndexerClient is the client API for Indexer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type IndexerClient interface {
	ListFNFT(ctx context.Context, in *ListFNFTRequest, opts ...grpc.CallOption) (*ListFNFTResponse, error)
}

type indexerClient struct {
	cc grpc1.ClientConn
}

func NewIndexerClient(cc grpc1.ClientConn) IndexerClient {
	return &indexerClient{cc}
}

func (c *indexerClient) ListFNFT(ctx context.Context, in *ListFNFTRequest, opts ...grpc.CallOption) (*ListFNFTResponse, error) {
	out := new(ListFNFTResponse)
	err := c.cc.Invoke(ctx, "/flux.fnft.v1beta1.Indexer/ListFNFT", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IndexerServer is the server API for Indexer service.
type IndexerServer interface {
	ListFNFT(context.Context, *ListFNFTRequest) (*ListFNFTResponse, error)
}

// UnimplementedIndexerServer can be embedded to have forward compatible implementations.
type UnimplementedIndexerServer struct {
}

func (*UnimplementedIndexerServer) ListFNFT(ctx context.Context, req *ListFNFTRequest) (*ListFNFTResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFNFT not implemented")
}

func RegisterIndexerServer(s grpc1.Server, srv IndexerServer) {
	s.RegisterService(&_Indexer_serviceDesc, srv)
}

func _Indexer_ListFNFT_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFNFTRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexerServer).ListFNFT(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flux.fnft.v1beta1.Indexer/ListFNFT",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexerServer).ListFNFT(ctx, req.(*ListFNFTRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Indexer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "flux.fnft.v1beta1.Indexer",
	HandlerType: (*IndexerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListFNFT",
			Handler:    _Indexer_ListFNFT_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "flux/fnft/v1beta1/indexer.proto",
}

func (m *ListFNFTRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListFNFTRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListFNFTRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintIndexer(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintIndexer(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ClassId) > 0 {
		i -= len(m.ClassId)
		copy(dAtA[i:], m.ClassId)
		i = encodeVarintIndexer(dAtA, i, uint64(len(m.ClassId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListFNFTResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListFNFTResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListFNFTResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Nft) > 0 {
		for iNdEx := len(m.Nft) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Nft[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintIndexer(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintIndexer(dAtA []byte, offset int, v uint64) int {
	offset -= sovIndexer(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ListFNFTRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ClassId)
	if l > 0 {
		n += 1 + l + sovIndexer(uint64(l))
	}
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovIndexer(uint64(l))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovIndexer(uint64(l))
	}
	return n
}

func (m *ListFNFTResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Nft) > 0 {
		for _, e := range m.Nft {
			l = e.Size()
			n += 1 + l + sovIndexer(uint64(l))
		}
	}
	return n
}

func sovIndexer(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozIndexer(x uint64) (n int) {
	return sovIndexer(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ListFNFTRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIndexer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListFNFTRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListFNFTRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndexer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIndexer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIndexer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClassId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndexer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIndexer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIndexer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndexer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIndexer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIndexer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIndexer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthIndexer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListFNFTResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIndexer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListFNFTResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListFNFTResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nft", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndexer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIndexer
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIndexer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nft = append(m.Nft, &NFT{})
			if err := m.Nft[len(m.Nft)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIndexer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthIndexer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipIndexer(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowIndexer
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIndexer
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIndexer
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthIndexer
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupIndexer
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthIndexer
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthIndexer        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowIndexer          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupIndexer = fmt.Errorf("proto: unexpected end of group")
)
