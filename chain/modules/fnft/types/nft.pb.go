// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: flux/fnft/v1beta1/nft.proto

package types

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	types "github.com/cosmos/cosmos-sdk/codec/types"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types1 "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type NFTStatus int32

const (
	NFTStatus_ISO    NFTStatus = 0
	NFTStatus_Failed NFTStatus = 1
	NFTStatus_Active NFTStatus = 2
)

var NFTStatus_name = map[int32]string{
	0: "ISO",
	1: "Failed",
	2: "Active",
}

var NFTStatus_value = map[string]int32{
	"ISO":    0,
	"Failed": 1,
	"Active": 2,
}

func (x NFTStatus) String() string {
	return proto.EnumName(NFTStatus_name, int32(x))
}

func (NFTStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_293fbd88035f93df, []int{0}
}

// Class defines the class of the nft type.
type Class struct {
	// id defines the unique identifier of the NFT classification, similar to the
	// contract address of ERC721
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// name defines the human-readable name of the NFT classification. Optional
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// symbol is an abbreviated name for nft classification. Optional
	Symbol string `protobuf:"bytes,3,opt,name=symbol,proto3" json:"symbol,omitempty"`
	// description is a brief description of nft classification. Optional
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// url for the class metadata stored off chain. It can define schema for Class
	// and NFT `Data` attributes. Optional
	Url string `protobuf:"bytes,5,opt,name=url,proto3" json:"url,omitempty"`
	// data is the app specific metadata of the NFT class. Optional
	Data *types.Any `protobuf:"bytes,6,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *Class) Reset()         { *m = Class{} }
func (m *Class) String() string { return proto.CompactTextString(m) }
func (*Class) ProtoMessage()    {}
func (*Class) Descriptor() ([]byte, []int) {
	return fileDescriptor_293fbd88035f93df, []int{0}
}
func (m *Class) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Class) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Class.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Class) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Class.Merge(m, src)
}
func (m *Class) XXX_Size() int {
	return m.Size()
}
func (m *Class) XXX_DiscardUnknown() {
	xxx_messageInfo_Class.DiscardUnknown(m)
}

var xxx_messageInfo_Class proto.InternalMessageInfo

func (m *Class) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Class) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Class) GetSymbol() string {
	if m != nil {
		return m.Symbol
	}
	return ""
}

func (m *Class) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Class) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *Class) GetData() *types.Any {
	if m != nil {
		return m.Data
	}
	return nil
}

// NFT defines the NFT.
type NFT struct {
	// class_id associated with the NFT, similar to the contract address of ERC721
	ClassId string `protobuf:"bytes,1,opt,name=class_id,json=classId,proto3" json:"class_id,omitempty" bson:"classId"`
	// id is a unique identifier of the NFT
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty" bson:"id"`
	// url for the NFT metadata stored off chain
	Url string `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty" bson:"url"`
	// supply is shares supply for this nft
	Supply cosmossdk_io_math.Int `protobuf:"bytes,4,opt,name=supply,proto3,customtype=cosmossdk.io/math.Int" json:"supply" bson:"supply"`
	// owner equity is the percentage of shares owner will receive via vesting
	OwnerEquityPercent cosmossdk_io_math.Int `protobuf:"bytes,5,opt,name=owner_equity_percent,json=ownerEquityPercent,proto3,customtype=cosmossdk.io/math.Int" json:"owner_equity_percent" bson:"ownerEquityPercent"`
	// available shares to purchase within iso period
	AvailableShares cosmossdk_io_math.Int `protobuf:"bytes,6,opt,name=available_shares,json=availableShares,proto3,customtype=cosmossdk.io/math.Int" json:"available_shares" bson:"availableShares"`
	// iso price per share
	InitialPrice github_com_cosmos_cosmos_sdk_types.Coin `protobuf:"bytes,7,opt,name=initial_price,json=initialPrice,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Coin" json:"initial_price" bson:"initialPrice"`
	// timestamp when iso period is over
	ISOTimestamp      uint64 `protobuf:"varint,8,opt,name=ISO_timestamp,json=ISOTimestamp,proto3" json:"ISO_timestamp,omitempty" bson:"isoTimestamp"`
	ISOSuccessPercent uint64 `protobuf:"varint,9,opt,name=ISO_success_percent,json=ISOSuccessPercent,proto3" json:"ISO_success_percent,omitempty"`
	// sponsorships must use this denom
	AcceptedPaymentDenom string `protobuf:"bytes,10,opt,name=accepted_payment_denom,json=acceptedPaymentDenom,proto3" json:"accepted_payment_denom,omitempty" bson:"acceptedPaymentDenom"`
	// array of sponsorship in this dividend period
	Sponsorships []*Sponsorship `protobuf:"bytes,11,rep,name=sponsorships,proto3" json:"sponsorships,omitempty" bson:"sponsorships"`
	// sponsorship coins will be accumulated in revenue
	Revenue *types1.Coin `protobuf:"bytes,12,opt,name=revenue,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coin" json:"revenue,omitempty" bson:"revenue"`
	// interval to distribute dividend to users
	DividendInterval uint64 `protobuf:"varint,13,opt,name=dividend_interval,json=dividendInterval,proto3" json:"dividend_interval,omitempty" bson:"dividendInterval"`
	// last dividend timestamp
	LastDividendTimestamp uint64 `protobuf:"varint,14,opt,name=last_dividend_timestamp,json=lastDividendTimestamp,proto3" json:"last_dividend_timestamp,omitempty" bson:"lastDividendTimestamp"`
	// nft owner
	Owner string `protobuf:"bytes,15,opt,name=owner,proto3" json:"owner,omitempty" bson:"owner"`
	// indicate if nft passes iso or not
	Status NFTStatus `protobuf:"varint,16,opt,name=status,proto3,enum=flux.fnft.v1beta1.NFTStatus" json:"status,omitempty" bson:"status"`
	// data is an app specific data of the NFT. Optional
	Data *types.Any `protobuf:"bytes,17,opt,name=data,proto3" json:"data,omitempty" bson:"data"`
}

func (m *NFT) Reset()         { *m = NFT{} }
func (m *NFT) String() string { return proto.CompactTextString(m) }
func (*NFT) ProtoMessage()    {}
func (*NFT) Descriptor() ([]byte, []int) {
	return fileDescriptor_293fbd88035f93df, []int{1}
}
func (m *NFT) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NFT) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NFT.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NFT) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NFT.Merge(m, src)
}
func (m *NFT) XXX_Size() int {
	return m.Size()
}
func (m *NFT) XXX_DiscardUnknown() {
	xxx_messageInfo_NFT.DiscardUnknown(m)
}

var xxx_messageInfo_NFT proto.InternalMessageInfo

func (m *NFT) GetClassId() string {
	if m != nil {
		return m.ClassId
	}
	return ""
}

func (m *NFT) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *NFT) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *NFT) GetISOTimestamp() uint64 {
	if m != nil {
		return m.ISOTimestamp
	}
	return 0
}

func (m *NFT) GetISOSuccessPercent() uint64 {
	if m != nil {
		return m.ISOSuccessPercent
	}
	return 0
}

func (m *NFT) GetAcceptedPaymentDenom() string {
	if m != nil {
		return m.AcceptedPaymentDenom
	}
	return ""
}

func (m *NFT) GetSponsorships() []*Sponsorship {
	if m != nil {
		return m.Sponsorships
	}
	return nil
}

func (m *NFT) GetRevenue() *types1.Coin {
	if m != nil {
		return m.Revenue
	}
	return nil
}

func (m *NFT) GetDividendInterval() uint64 {
	if m != nil {
		return m.DividendInterval
	}
	return 0
}

func (m *NFT) GetLastDividendTimestamp() uint64 {
	if m != nil {
		return m.LastDividendTimestamp
	}
	return 0
}

func (m *NFT) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *NFT) GetStatus() NFTStatus {
	if m != nil {
		return m.Status
	}
	return NFTStatus_ISO
}

func (m *NFT) GetData() *types.Any {
	if m != nil {
		return m.Data
	}
	return nil
}

type Sponsorship struct {
	Description string `protobuf:"bytes,1,opt,name=description,proto3" json:"description,omitempty"`
	Url         string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
}

func (m *Sponsorship) Reset()         { *m = Sponsorship{} }
func (m *Sponsorship) String() string { return proto.CompactTextString(m) }
func (*Sponsorship) ProtoMessage()    {}
func (*Sponsorship) Descriptor() ([]byte, []int) {
	return fileDescriptor_293fbd88035f93df, []int{2}
}
func (m *Sponsorship) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Sponsorship) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Sponsorship.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Sponsorship) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Sponsorship.Merge(m, src)
}
func (m *Sponsorship) XXX_Size() int {
	return m.Size()
}
func (m *Sponsorship) XXX_DiscardUnknown() {
	xxx_messageInfo_Sponsorship.DiscardUnknown(m)
}

var xxx_messageInfo_Sponsorship proto.InternalMessageInfo

func (m *Sponsorship) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Sponsorship) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

type Holder struct {
	ClassId string                `protobuf:"bytes,1,opt,name=class_id,json=classId,proto3" json:"class_id,omitempty" bson:"classId"`
	Id      string                `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty" bson:"id"`
	Address string                `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty" bson:"address"`
	Shares  cosmossdk_io_math.Int `protobuf:"bytes,4,opt,name=shares,proto3,customtype=cosmossdk.io/math.Int" json:"shares" bson:"shares"`
}

func (m *Holder) Reset()         { *m = Holder{} }
func (m *Holder) String() string { return proto.CompactTextString(m) }
func (*Holder) ProtoMessage()    {}
func (*Holder) Descriptor() ([]byte, []int) {
	return fileDescriptor_293fbd88035f93df, []int{3}
}
func (m *Holder) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Holder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Holder.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Holder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Holder.Merge(m, src)
}
func (m *Holder) XXX_Size() int {
	return m.Size()
}
func (m *Holder) XXX_DiscardUnknown() {
	xxx_messageInfo_Holder.DiscardUnknown(m)
}

var xxx_messageInfo_Holder proto.InternalMessageInfo

func (m *Holder) GetClassId() string {
	if m != nil {
		return m.ClassId
	}
	return ""
}

func (m *Holder) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Holder) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func init() {
	proto.RegisterEnum("flux.fnft.v1beta1.NFTStatus", NFTStatus_name, NFTStatus_value)
	proto.RegisterType((*Class)(nil), "flux.fnft.v1beta1.Class")
	proto.RegisterType((*NFT)(nil), "flux.fnft.v1beta1.NFT")
	proto.RegisterType((*Sponsorship)(nil), "flux.fnft.v1beta1.Sponsorship")
	proto.RegisterType((*Holder)(nil), "flux.fnft.v1beta1.Holder")
}

func init() { proto.RegisterFile("flux/fnft/v1beta1/nft.proto", fileDescriptor_293fbd88035f93df) }

var fileDescriptor_293fbd88035f93df = []byte{
	// 991 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x55, 0x4f, 0x6f, 0xe3, 0x44,
	0x14, 0xaf, 0xfb, 0x27, 0xdd, 0x4e, 0xfa, 0x27, 0x9d, 0xed, 0xb6, 0xee, 0x76, 0x89, 0x23, 0x5f,
	0x88, 0x56, 0xd4, 0xd6, 0x16, 0x21, 0xc4, 0x0a, 0x21, 0xd5, 0x5b, 0xc2, 0x46, 0x42, 0x6d, 0xe5,
	0x14, 0x09, 0xc1, 0xc1, 0x9a, 0xd8, 0xd3, 0x64, 0xb4, 0xce, 0x8c, 0xf1, 0x8c, 0xc3, 0xe6, 0x0b,
	0x70, 0xe6, 0xcc, 0x8d, 0x2b, 0x67, 0x3e, 0x44, 0x8f, 0x2b, 0x4e, 0x88, 0x83, 0x41, 0x2d, 0x9f,
	0xc0, 0x9f, 0x00, 0x79, 0x66, 0x92, 0x9a, 0x6e, 0xab, 0x82, 0xb4, 0xa7, 0x3c, 0xbf, 0xf7, 0x7b,
	0xef, 0xcd, 0x7b, 0xbf, 0x99, 0x5f, 0xc0, 0xde, 0x79, 0x9c, 0xbd, 0x76, 0xcf, 0xe9, 0xb9, 0x70,
	0xc7, 0xcf, 0xfa, 0x58, 0xa0, 0x67, 0x2e, 0x3d, 0x17, 0x4e, 0x92, 0x32, 0xc1, 0xe0, 0x66, 0x19,
	0x74, 0xca, 0xa0, 0xa3, 0x83, 0x8f, 0x77, 0x07, 0x8c, 0x0d, 0x62, 0xec, 0x4a, 0x40, 0x3f, 0x3b,
	0x77, 0x11, 0x9d, 0x28, 0xf4, 0xe3, 0xad, 0x01, 0x1b, 0x30, 0x69, 0xba, 0xa5, 0xa5, 0xbd, 0xbb,
	0x21, 0xe3, 0x23, 0xc6, 0x03, 0x15, 0x50, 0x1f, 0x3a, 0xd4, 0x54, 0x5f, 0x6e, 0x1f, 0x71, 0x3c,
	0xeb, 0x1e, 0x32, 0x42, 0x55, 0xdc, 0xfe, 0xd9, 0x00, 0x4b, 0x2f, 0x62, 0xc4, 0x39, 0x5c, 0x07,
	0xf3, 0x24, 0x32, 0x8d, 0x96, 0xd1, 0x5e, 0xf1, 0xe7, 0x49, 0x04, 0x21, 0x58, 0xa4, 0x68, 0x84,
	0xcd, 0x79, 0xe9, 0x91, 0x36, 0xdc, 0x06, 0x35, 0x3e, 0x19, 0xf5, 0x59, 0x6c, 0x2e, 0x48, 0xaf,
	0xfe, 0x82, 0x2d, 0x50, 0x8f, 0x30, 0x0f, 0x53, 0x92, 0x08, 0xc2, 0xa8, 0xb9, 0x28, 0x83, 0x55,
	0x17, 0x6c, 0x80, 0x85, 0x2c, 0x8d, 0xcd, 0x25, 0x19, 0x29, 0x4d, 0xd8, 0x06, 0x8b, 0x11, 0x12,
	0xc8, 0xac, 0xb5, 0x8c, 0x76, 0xfd, 0x60, 0xcb, 0x51, 0x43, 0x3b, 0xd3, 0xa1, 0x9d, 0x43, 0x3a,
	0xf1, 0x25, 0xc2, 0xfe, 0x09, 0x80, 0x85, 0xe3, 0xce, 0x19, 0xdc, 0x07, 0x0f, 0xc2, 0xf2, 0xa8,
	0xc1, 0xf4, 0x9c, 0x1e, 0x2c, 0x72, 0x6b, 0xbd, 0xcf, 0x19, 0x7d, 0x6e, 0xcb, 0x48, 0x37, 0xb2,
	0xfd, 0x65, 0x6d, 0xc1, 0xf7, 0xe4, 0x40, 0xf2, 0xf8, 0xde, 0x5a, 0x91, 0x5b, 0x2b, 0x0a, 0x48,
	0x22, 0x5b, 0xce, 0xd7, 0x52, 0x27, 0x92, 0x83, 0x78, 0xeb, 0x45, 0x6e, 0x01, 0x15, 0xcf, 0xd2,
	0xd8, 0x56, 0x27, 0xec, 0x80, 0x1a, 0xcf, 0x92, 0x24, 0x9e, 0xa8, 0x81, 0x3c, 0xe7, 0x22, 0xb7,
	0xe6, 0xfe, 0xc8, 0xad, 0x47, 0x6a, 0xa7, 0x3c, 0x7a, 0xe5, 0x10, 0xe6, 0x8e, 0x90, 0x18, 0x3a,
	0x5d, 0x2a, 0x8a, 0xdc, 0x5a, 0x53, 0x15, 0x54, 0x92, 0xed, 0xeb, 0x6c, 0x18, 0x83, 0x2d, 0xf6,
	0x3d, 0xc5, 0x69, 0x80, 0xbf, 0xcb, 0x88, 0x98, 0x04, 0x09, 0x4e, 0x43, 0x4c, 0x85, 0x5a, 0x86,
	0xf7, 0xfc, 0xbe, 0xaa, 0xbb, 0xaa, 0xaa, 0x2c, 0xf1, 0xb9, 0xac, 0x70, 0xaa, 0x0a, 0xd8, 0x3e,
	0x7c, 0xdb, 0x09, 0xfb, 0xa0, 0x81, 0xc6, 0x88, 0xc4, 0xa8, 0x1f, 0xe3, 0x80, 0x0f, 0x51, 0x8a,
	0xb9, 0xdc, 0xf1, 0x8a, 0xf7, 0xf1, 0x7d, 0x9d, 0xb6, 0x55, 0xa7, 0x59, 0x7a, 0x4f, 0x66, 0xdb,
	0xfe, 0xc6, 0x0d, 0x0f, 0xfc, 0xc1, 0x00, 0x6b, 0x84, 0x12, 0x41, 0x50, 0x1c, 0x24, 0x29, 0x09,
	0xb1, 0xb9, 0x2c, 0x59, 0xdc, 0x75, 0xf4, 0xe5, 0x2b, 0xaf, 0xdb, 0xf4, 0x3e, 0x3b, 0x2f, 0x18,
	0xa1, 0x5e, 0x47, 0x37, 0x7f, 0x7f, 0x40, 0xc4, 0x30, 0xeb, 0x3b, 0x21, 0x1b, 0xe9, 0x9b, 0xaa,
	0x7f, 0xf6, 0x79, 0xf4, 0xca, 0x15, 0x93, 0x04, 0x73, 0x99, 0x50, 0xe4, 0xd6, 0x43, 0x4d, 0x98,
	0x6a, 0x74, 0x5a, 0xf6, 0xb1, 0xfd, 0xd5, 0xea, 0x27, 0xfc, 0x14, 0xac, 0x75, 0x7b, 0x27, 0x81,
	0x20, 0x23, 0xcc, 0x05, 0x1a, 0x25, 0xe6, 0x83, 0x96, 0xd1, 0x5e, 0xf4, 0x76, 0x2a, 0xd9, 0x9c,
	0x9d, 0x4d, 0xa3, 0xb6, 0xbf, 0xda, 0xed, 0x9d, 0xcc, 0x3e, 0xa1, 0x03, 0x1e, 0x96, 0xd9, 0x3c,
	0x0b, 0x43, 0xcc, 0xf9, 0x8c, 0x97, 0x95, 0xb2, 0x86, 0xbf, 0xd9, 0xed, 0x9d, 0xf4, 0x54, 0x64,
	0xba, 0xda, 0xaf, 0xc0, 0x36, 0x0a, 0x43, 0x9c, 0x08, 0x1c, 0x05, 0x09, 0x9a, 0x8c, 0x30, 0x15,
	0x41, 0x84, 0x29, 0x1b, 0x99, 0x40, 0x2e, 0xd8, 0x2a, 0x72, 0x6b, 0x4f, 0xef, 0x50, 0xe3, 0x4e,
	0x15, 0xec, 0xa8, 0x44, 0xd9, 0xfe, 0xd6, 0x6d, 0x6e, 0xf8, 0x2d, 0x58, 0xe5, 0x09, 0xa3, 0x9c,
	0xa5, 0x7c, 0x48, 0x12, 0x6e, 0xd6, 0x5b, 0x0b, 0xed, 0xfa, 0x41, 0xd3, 0x79, 0x4b, 0x19, 0x9c,
	0xde, 0x35, 0xac, 0x3a, 0x63, 0x35, 0xdb, 0xf6, 0xff, 0x55, 0x0c, 0x8e, 0xc1, 0x72, 0x8a, 0xc7,
	0x98, 0x66, 0xd8, 0x5c, 0xbd, 0x8f, 0xa3, 0xc3, 0x8b, 0xdc, 0x32, 0xae, 0x9f, 0x94, 0xce, 0xb3,
	0x7f, 0xf9, 0xf3, 0x3f, 0xb3, 0xe6, 0x4f, 0x9b, 0xc1, 0x97, 0x60, 0x33, 0x22, 0x63, 0x12, 0x61,
	0x1a, 0x05, 0x84, 0x0a, 0x9c, 0x8e, 0x51, 0x6c, 0xae, 0x49, 0x76, 0xf6, 0x8a, 0xdc, 0xda, 0x51,
	0x2d, 0xa6, 0x90, 0xae, 0x46, 0xd8, 0x7e, 0xe3, 0xa6, 0x0b, 0x7e, 0x0d, 0x76, 0x62, 0xc4, 0x45,
	0x30, 0x2b, 0x77, 0xcd, 0xf6, 0xba, 0xac, 0xd7, 0x2a, 0x72, 0xeb, 0x89, 0xaa, 0x57, 0x02, 0x8f,
	0x34, 0xae, 0x42, 0xfb, 0xa3, 0x5b, 0xfd, 0xf0, 0x33, 0xb0, 0x24, 0x1f, 0x90, 0xb9, 0x21, 0xe9,
	0x6b, 0x17, 0xb9, 0xb5, 0x5a, 0x79, 0x6c, 0xf6, 0x6f, 0xbf, 0xee, 0x6f, 0xe9, 0x65, 0x1d, 0x46,
	0x51, 0x8a, 0x39, 0xef, 0x89, 0x94, 0xd0, 0x81, 0xaf, 0xd2, 0xe0, 0x17, 0xa0, 0xc6, 0x05, 0x12,
	0x19, 0x37, 0x1b, 0x2d, 0xa3, 0xbd, 0x7e, 0xf0, 0xe4, 0x16, 0xca, 0x8e, 0x3b, 0x67, 0x3d, 0x89,
	0xf1, 0x36, 0x2b, 0x0a, 0x21, 0x3d, 0xa5, 0x42, 0x48, 0x03, 0x7e, 0xa2, 0xb5, 0x70, 0xf3, 0x6e,
	0x2d, 0xf4, 0x36, 0x8a, 0xdc, 0xaa, 0xeb, 0xad, 0x95, 0xaa, 0xa8, 0xc5, 0xf1, 0x10, 0xd4, 0x2b,
	0xb7, 0xe2, 0xa6, 0x12, 0x1b, 0x77, 0x2a, 0xf1, 0xfc, 0x4c, 0x89, 0xed, 0xbf, 0x0d, 0x50, 0x7b,
	0xc9, 0xe2, 0x08, 0xa7, 0xef, 0x58, 0x62, 0x8f, 0xc0, 0x32, 0x52, 0x7b, 0xd3, 0x32, 0xfb, 0xf4,
	0xba, 0x98, 0x0e, 0xdc, 0xbd, 0xe3, 0x69, 0xaa, 0x94, 0x61, 0x25, 0x63, 0xff, 0x53, 0x86, 0xb5,
	0x7a, 0xe9, 0xec, 0xa7, 0x1f, 0x80, 0x95, 0x19, 0x19, 0x70, 0x19, 0x2c, 0x74, 0x7b, 0x27, 0x8d,
	0x39, 0x08, 0x40, 0xad, 0x83, 0x48, 0x8c, 0xa3, 0x86, 0x51, 0xda, 0x87, 0xa1, 0x20, 0x63, 0xdc,
	0x98, 0xf7, 0x4e, 0x2e, 0x2e, 0x9b, 0xc6, 0x9b, 0xcb, 0xa6, 0xf1, 0xd7, 0x65, 0xd3, 0xf8, 0xf1,
	0xaa, 0x39, 0xf7, 0xe6, 0xaa, 0x39, 0xf7, 0xfb, 0x55, 0x73, 0xee, 0x9b, 0x8f, 0x2a, 0x6f, 0xa1,
	0x13, 0x67, 0xaf, 0x8f, 0x3b, 0x67, 0x5f, 0xa2, 0x3e, 0x77, 0x4b, 0xee, 0x23, 0x37, 0x1c, 0x22,
	0x42, 0xdd, 0x11, 0x8b, 0xb2, 0x18, 0x73, 0xf5, 0xa7, 0x2f, 0x9f, 0x47, 0xbf, 0x26, 0xd9, 0xfc,
	0xf0, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xaf, 0x89, 0x1d, 0x90, 0x0e, 0x08, 0x00, 0x00,
}

func (m *Class) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Class) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Class) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Data != nil {
		{
			size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNft(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if len(m.Url) > 0 {
		i -= len(m.Url)
		copy(dAtA[i:], m.Url)
		i = encodeVarintNft(dAtA, i, uint64(len(m.Url)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintNft(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Symbol) > 0 {
		i -= len(m.Symbol)
		copy(dAtA[i:], m.Symbol)
		i = encodeVarintNft(dAtA, i, uint64(len(m.Symbol)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintNft(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintNft(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NFT) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NFT) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NFT) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Data != nil {
		{
			size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNft(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if m.Status != 0 {
		i = encodeVarintNft(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintNft(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x7a
	}
	if m.LastDividendTimestamp != 0 {
		i = encodeVarintNft(dAtA, i, uint64(m.LastDividendTimestamp))
		i--
		dAtA[i] = 0x70
	}
	if m.DividendInterval != 0 {
		i = encodeVarintNft(dAtA, i, uint64(m.DividendInterval))
		i--
		dAtA[i] = 0x68
	}
	if m.Revenue != nil {
		{
			size, err := m.Revenue.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNft(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	if len(m.Sponsorships) > 0 {
		for iNdEx := len(m.Sponsorships) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Sponsorships[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintNft(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x5a
		}
	}
	if len(m.AcceptedPaymentDenom) > 0 {
		i -= len(m.AcceptedPaymentDenom)
		copy(dAtA[i:], m.AcceptedPaymentDenom)
		i = encodeVarintNft(dAtA, i, uint64(len(m.AcceptedPaymentDenom)))
		i--
		dAtA[i] = 0x52
	}
	if m.ISOSuccessPercent != 0 {
		i = encodeVarintNft(dAtA, i, uint64(m.ISOSuccessPercent))
		i--
		dAtA[i] = 0x48
	}
	if m.ISOTimestamp != 0 {
		i = encodeVarintNft(dAtA, i, uint64(m.ISOTimestamp))
		i--
		dAtA[i] = 0x40
	}
	{
		size := m.InitialPrice.Size()
		i -= size
		if _, err := m.InitialPrice.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintNft(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	{
		size := m.AvailableShares.Size()
		i -= size
		if _, err := m.AvailableShares.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintNft(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size := m.OwnerEquityPercent.Size()
		i -= size
		if _, err := m.OwnerEquityPercent.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintNft(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size := m.Supply.Size()
		i -= size
		if _, err := m.Supply.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintNft(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.Url) > 0 {
		i -= len(m.Url)
		copy(dAtA[i:], m.Url)
		i = encodeVarintNft(dAtA, i, uint64(len(m.Url)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintNft(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ClassId) > 0 {
		i -= len(m.ClassId)
		copy(dAtA[i:], m.ClassId)
		i = encodeVarintNft(dAtA, i, uint64(len(m.ClassId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Sponsorship) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Sponsorship) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Sponsorship) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Url) > 0 {
		i -= len(m.Url)
		copy(dAtA[i:], m.Url)
		i = encodeVarintNft(dAtA, i, uint64(len(m.Url)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintNft(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Holder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Holder) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Holder) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Shares.Size()
		i -= size
		if _, err := m.Shares.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintNft(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintNft(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintNft(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ClassId) > 0 {
		i -= len(m.ClassId)
		copy(dAtA[i:], m.ClassId)
		i = encodeVarintNft(dAtA, i, uint64(len(m.ClassId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintNft(dAtA []byte, offset int, v uint64) int {
	offset -= sovNft(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Class) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovNft(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovNft(uint64(l))
	}
	l = len(m.Symbol)
	if l > 0 {
		n += 1 + l + sovNft(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovNft(uint64(l))
	}
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovNft(uint64(l))
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovNft(uint64(l))
	}
	return n
}

func (m *NFT) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ClassId)
	if l > 0 {
		n += 1 + l + sovNft(uint64(l))
	}
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovNft(uint64(l))
	}
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovNft(uint64(l))
	}
	l = m.Supply.Size()
	n += 1 + l + sovNft(uint64(l))
	l = m.OwnerEquityPercent.Size()
	n += 1 + l + sovNft(uint64(l))
	l = m.AvailableShares.Size()
	n += 1 + l + sovNft(uint64(l))
	l = m.InitialPrice.Size()
	n += 1 + l + sovNft(uint64(l))
	if m.ISOTimestamp != 0 {
		n += 1 + sovNft(uint64(m.ISOTimestamp))
	}
	if m.ISOSuccessPercent != 0 {
		n += 1 + sovNft(uint64(m.ISOSuccessPercent))
	}
	l = len(m.AcceptedPaymentDenom)
	if l > 0 {
		n += 1 + l + sovNft(uint64(l))
	}
	if len(m.Sponsorships) > 0 {
		for _, e := range m.Sponsorships {
			l = e.Size()
			n += 1 + l + sovNft(uint64(l))
		}
	}
	if m.Revenue != nil {
		l = m.Revenue.Size()
		n += 1 + l + sovNft(uint64(l))
	}
	if m.DividendInterval != 0 {
		n += 1 + sovNft(uint64(m.DividendInterval))
	}
	if m.LastDividendTimestamp != 0 {
		n += 1 + sovNft(uint64(m.LastDividendTimestamp))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovNft(uint64(l))
	}
	if m.Status != 0 {
		n += 2 + sovNft(uint64(m.Status))
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 2 + l + sovNft(uint64(l))
	}
	return n
}

func (m *Sponsorship) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovNft(uint64(l))
	}
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovNft(uint64(l))
	}
	return n
}

func (m *Holder) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ClassId)
	if l > 0 {
		n += 1 + l + sovNft(uint64(l))
	}
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovNft(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovNft(uint64(l))
	}
	l = m.Shares.Size()
	n += 1 + l + sovNft(uint64(l))
	return n
}

func sovNft(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozNft(x uint64) (n int) {
	return sovNft(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Class) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNft
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Class: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Class: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNft
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNft
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Symbol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNft
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Symbol = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNft
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNft
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNft
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &types.Any{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNft(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNft
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NFT) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNft
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NFT: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NFT: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNft
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClassId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNft
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNft
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Supply", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNft
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Supply.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerEquityPercent", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNft
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.OwnerEquityPercent.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvailableShares", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNft
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AvailableShares.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitialPrice", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNft
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.InitialPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ISOTimestamp", wireType)
			}
			m.ISOTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ISOTimestamp |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ISOSuccessPercent", wireType)
			}
			m.ISOSuccessPercent = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ISOSuccessPercent |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AcceptedPaymentDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNft
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AcceptedPaymentDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sponsorships", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNft
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sponsorships = append(m.Sponsorships, &Sponsorship{})
			if err := m.Sponsorships[len(m.Sponsorships)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Revenue", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNft
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Revenue == nil {
				m.Revenue = &types1.Coin{}
			}
			if err := m.Revenue.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DividendInterval", wireType)
			}
			m.DividendInterval = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DividendInterval |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastDividendTimestamp", wireType)
			}
			m.LastDividendTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastDividendTimestamp |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNft
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= NFTStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNft
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &types.Any{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNft(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNft
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Sponsorship) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNft
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Sponsorship: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Sponsorship: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNft
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNft
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNft(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNft
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Holder) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNft
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Holder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Holder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNft
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClassId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNft
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNft
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shares", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNft
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Shares.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNft(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNft
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipNft(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowNft
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNft
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNft
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthNft
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupNft
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthNft
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthNft        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowNft          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupNft = fmt.Errorf("proto: unexpected end of group")
)
