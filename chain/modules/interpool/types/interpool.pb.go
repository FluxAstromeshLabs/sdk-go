// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: flux/interpool/v1beta1/interpool.proto

package types

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	github_com_cometbft_cometbft_libs_bytes "github.com/cometbft/cometbft/libs/bytes"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/codec/types"
	_ "github.com/cosmos/cosmos-sdk/types"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type CommissionConfig struct {
	ManagementFeeRate     int64 `protobuf:"varint,1,opt,name=management_fee_rate,json=managementFeeRate,proto3" json:"management_fee_rate,omitempty" bson:"management_fee_rate"`
	ManagementFeeInterval int64 `protobuf:"varint,2,opt,name=management_fee_interval,json=managementFeeInterval,proto3" json:"management_fee_interval,omitempty" bson:"management_fee_interval"`
	TradingFeeRate        int64 `protobuf:"varint,3,opt,name=trading_fee_rate,json=tradingFeeRate,proto3" json:"trading_fee_rate,omitempty" bson:"trading_fee_rate"`
}

func (m *CommissionConfig) Reset()         { *m = CommissionConfig{} }
func (m *CommissionConfig) String() string { return proto.CompactTextString(m) }
func (*CommissionConfig) ProtoMessage()    {}
func (*CommissionConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_2b6c51933d1d5090, []int{0}
}
func (m *CommissionConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CommissionConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CommissionConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CommissionConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommissionConfig.Merge(m, src)
}
func (m *CommissionConfig) XXX_Size() int {
	return m.Size()
}
func (m *CommissionConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_CommissionConfig.DiscardUnknown(m)
}

var xxx_messageInfo_CommissionConfig proto.InternalMessageInfo

func (m *CommissionConfig) GetManagementFeeRate() int64 {
	if m != nil {
		return m.ManagementFeeRate
	}
	return 0
}

func (m *CommissionConfig) GetManagementFeeInterval() int64 {
	if m != nil {
		return m.ManagementFeeInterval
	}
	return 0
}

func (m *CommissionConfig) GetTradingFeeRate() int64 {
	if m != nil {
		return m.TradingFeeRate
	}
	return 0
}

type CommissionFees struct {
	// commission fee coins, separated for easy tracking, tests
	ManagementFees []github_com_cosmos_cosmos_sdk_types.Coin `protobuf:"bytes,1,rep,name=management_fees,json=managementFees,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Coin" json:"management_fees" bson:"management_fee"`
	TradingFees    []github_com_cosmos_cosmos_sdk_types.Coin `protobuf:"bytes,2,rep,name=trading_fees,json=tradingFees,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Coin" json:"trading_fees" bson:"trading_fees"`
}

func (m *CommissionFees) Reset()         { *m = CommissionFees{} }
func (m *CommissionFees) String() string { return proto.CompactTextString(m) }
func (*CommissionFees) ProtoMessage()    {}
func (*CommissionFees) Descriptor() ([]byte, []int) {
	return fileDescriptor_2b6c51933d1d5090, []int{1}
}
func (m *CommissionFees) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CommissionFees) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CommissionFees.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CommissionFees) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommissionFees.Merge(m, src)
}
func (m *CommissionFees) XXX_Size() int {
	return m.Size()
}
func (m *CommissionFees) XXX_DiscardUnknown() {
	xxx_messageInfo_CommissionFees.DiscardUnknown(m)
}

var xxx_messageInfo_CommissionFees proto.InternalMessageInfo

// Interpool
type InterPool struct {
	PoolId       github_com_cometbft_cometbft_libs_bytes.HexBytes `protobuf:"bytes,1,opt,name=pool_id,json=poolId,proto3,casttype=github.com/cometbft/cometbft/libs/bytes.HexBytes" json:"pool_id,omitempty" bson:"pool_id"`
	OperatorAddr string                                           `protobuf:"bytes,2,opt,name=operator_addr,json=operatorAddr,proto3" json:"operator_addr,omitempty" bson:"operator_addr"`
	// on-going assets
	InventorySnapshot []github_com_cosmos_cosmos_sdk_types.Coin `protobuf:"bytes,3,rep,name=inventory_snapshot,json=inventorySnapshot,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Coin" json:"inventory_snapshot" bson:"inventory_snapshot"`
	// initial assets before any trades from the pool
	BaseCapital              []github_com_cosmos_cosmos_sdk_types.Coin `protobuf:"bytes,4,rep,name=base_capital,json=baseCapital,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Coin" json:"base_capital" bson:"base_capital"`
	OperatorCommissionConfig *CommissionConfig                         `protobuf:"bytes,5,opt,name=operator_commission_config,json=operatorCommissionConfig,proto3" json:"operator_commission_config,omitempty" bson:"operator_commission_config"`
	OperatorCommissionFees   *CommissionFees                           `protobuf:"bytes,6,opt,name=operator_commission_fees,json=operatorCommissionFees,proto3" json:"operator_commission_fees,omitempty" bson:"operator_commission_fees"`
	// flow control data for cron service
	InputBlob []byte `protobuf:"bytes,7,opt,name=input_blob,json=inputBlob,proto3" json:"input_blob,omitempty" bson:"input_blob"`
	// pool extra state for lp, reward tokens created by cron service
	OutputBlob []byte `protobuf:"bytes,8,opt,name=output_blob,json=outputBlob,proto3" json:"output_blob,omitempty" bson:"output_blob"`
	// cron job controlling the pool
	CronId github_com_cometbft_cometbft_libs_bytes.HexBytes `protobuf:"bytes,9,opt,name=cron_id,json=cronId,proto3,casttype=github.com/cometbft/cometbft/libs/bytes.HexBytes" json:"cron_id,omitempty" bson:"cron_id"`
	// pool account
	PoolAccount        string                                           `protobuf:"bytes,10,opt,name=pool_account,json=poolAccount,proto3" json:"pool_account,omitempty" bson:"pool_account"`
	NextCommissionTime int64                                            `protobuf:"varint,11,opt,name=next_commission_time,json=nextCommissionTime,proto3" json:"next_commission_time,omitempty" bson:"next_commission_time"`
	SolverId           github_com_cometbft_cometbft_libs_bytes.HexBytes `protobuf:"bytes,12,opt,name=solver_id,json=solverId,proto3,casttype=github.com/cometbft/cometbft/libs/bytes.HexBytes" json:"solver_id,omitempty" bson:"solver_id"`
}

func (m *InterPool) Reset()         { *m = InterPool{} }
func (m *InterPool) String() string { return proto.CompactTextString(m) }
func (*InterPool) ProtoMessage()    {}
func (*InterPool) Descriptor() ([]byte, []int) {
	return fileDescriptor_2b6c51933d1d5090, []int{2}
}
func (m *InterPool) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InterPool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InterPool.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InterPool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InterPool.Merge(m, src)
}
func (m *InterPool) XXX_Size() int {
	return m.Size()
}
func (m *InterPool) XXX_DiscardUnknown() {
	xxx_messageInfo_InterPool.DiscardUnknown(m)
}

var xxx_messageInfo_InterPool proto.InternalMessageInfo

func (m *InterPool) GetPoolId() github_com_cometbft_cometbft_libs_bytes.HexBytes {
	if m != nil {
		return m.PoolId
	}
	return nil
}

func (m *InterPool) GetOperatorAddr() string {
	if m != nil {
		return m.OperatorAddr
	}
	return ""
}

func (m *InterPool) GetOperatorCommissionConfig() *CommissionConfig {
	if m != nil {
		return m.OperatorCommissionConfig
	}
	return nil
}

func (m *InterPool) GetOperatorCommissionFees() *CommissionFees {
	if m != nil {
		return m.OperatorCommissionFees
	}
	return nil
}

func (m *InterPool) GetInputBlob() []byte {
	if m != nil {
		return m.InputBlob
	}
	return nil
}

func (m *InterPool) GetOutputBlob() []byte {
	if m != nil {
		return m.OutputBlob
	}
	return nil
}

func (m *InterPool) GetCronId() github_com_cometbft_cometbft_libs_bytes.HexBytes {
	if m != nil {
		return m.CronId
	}
	return nil
}

func (m *InterPool) GetPoolAccount() string {
	if m != nil {
		return m.PoolAccount
	}
	return ""
}

func (m *InterPool) GetNextCommissionTime() int64 {
	if m != nil {
		return m.NextCommissionTime
	}
	return 0
}

func (m *InterPool) GetSolverId() github_com_cometbft_cometbft_libs_bytes.HexBytes {
	if m != nil {
		return m.SolverId
	}
	return nil
}

type PoolShare struct {
	PoolId                github_com_cometbft_cometbft_libs_bytes.HexBytes `protobuf:"bytes,1,opt,name=pool_id,json=poolId,proto3,casttype=github.com/cometbft/cometbft/libs/bytes.HexBytes" json:"pool_id,omitempty" bson:"pool_id"`
	LiquidityProviderAddr string                                           `protobuf:"bytes,2,opt,name=liquidity_provider_addr,json=liquidityProviderAddr,proto3" json:"liquidity_provider_addr,omitempty" bson:"liquidity_provider_addr"`
	// on-going assets of users
	AssetSnapshot []github_com_cosmos_cosmos_sdk_types.Coin `protobuf:"bytes,3,rep,name=asset_snapshot,json=assetSnapshot,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Coin" json:"asset_snapshot" bson:"asset_snapshot"`
	// initial assets of users
	BaseCapital []github_com_cosmos_cosmos_sdk_types.Coin `protobuf:"bytes,4,rep,name=base_capital,json=baseCapital,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Coin" json:"base_capital" bson:"base_capital"`
	// ownership percentage
	Shares cosmossdk_io_math.Int `protobuf:"bytes,5,opt,name=shares,proto3,customtype=cosmossdk.io/math.Int" json:"shares" bson:"shares"`
}

func (m *PoolShare) Reset()         { *m = PoolShare{} }
func (m *PoolShare) String() string { return proto.CompactTextString(m) }
func (*PoolShare) ProtoMessage()    {}
func (*PoolShare) Descriptor() ([]byte, []int) {
	return fileDescriptor_2b6c51933d1d5090, []int{3}
}
func (m *PoolShare) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PoolShare) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PoolShare.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PoolShare) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PoolShare.Merge(m, src)
}
func (m *PoolShare) XXX_Size() int {
	return m.Size()
}
func (m *PoolShare) XXX_DiscardUnknown() {
	xxx_messageInfo_PoolShare.DiscardUnknown(m)
}

var xxx_messageInfo_PoolShare proto.InternalMessageInfo

func (m *PoolShare) GetPoolId() github_com_cometbft_cometbft_libs_bytes.HexBytes {
	if m != nil {
		return m.PoolId
	}
	return nil
}

func (m *PoolShare) GetLiquidityProviderAddr() string {
	if m != nil {
		return m.LiquidityProviderAddr
	}
	return ""
}

func init() {
	proto.RegisterType((*CommissionConfig)(nil), "flux.interpool.v1beta1.CommissionConfig")
	proto.RegisterType((*CommissionFees)(nil), "flux.interpool.v1beta1.CommissionFees")
	proto.RegisterType((*InterPool)(nil), "flux.interpool.v1beta1.InterPool")
	proto.RegisterType((*PoolShare)(nil), "flux.interpool.v1beta1.PoolShare")
}

func init() {
	proto.RegisterFile("flux/interpool/v1beta1/interpool.proto", fileDescriptor_2b6c51933d1d5090)
}

var fileDescriptor_2b6c51933d1d5090 = []byte{
	// 952 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x56, 0x3d, 0x6f, 0xdb, 0x46,
	0x18, 0x36, 0xed, 0xd4, 0x8e, 0x4e, 0xb2, 0x6a, 0x33, 0x96, 0xcd, 0x38, 0x80, 0xe8, 0x5e, 0xd1,
	0xd4, 0x4b, 0xc8, 0xa4, 0x2d, 0x50, 0xc0, 0x5b, 0x68, 0x54, 0xb0, 0x80, 0x20, 0x48, 0x69, 0x77,
	0xc9, 0x42, 0x1c, 0xc9, 0x93, 0x74, 0x08, 0x79, 0xa7, 0xf0, 0x8e, 0x82, 0x85, 0xae, 0xcd, 0x58,
	0xa0, 0x7f, 0xa1, 0xff, 0xa1, 0x3f, 0x22, 0x63, 0xd0, 0xa9, 0xe8, 0x40, 0x14, 0xf6, 0xde, 0x81,
	0x63, 0xa7, 0xe2, 0x8e, 0x94, 0xa8, 0x2f, 0xa3, 0xb0, 0x8b, 0xa2, 0x93, 0xf8, 0x7e, 0x3c, 0xcf,
	0xbd, 0xf7, 0x7e, 0x9d, 0xc0, 0xe3, 0x5e, 0x94, 0x5e, 0xda, 0x84, 0x0a, 0x9c, 0x0c, 0x19, 0x8b,
	0xec, 0xd1, 0x33, 0x1f, 0x0b, 0xf4, 0xac, 0xd2, 0x58, 0xc3, 0x84, 0x09, 0xa6, 0xef, 0x4b, 0x3f,
	0xab, 0xd2, 0x96, 0x7e, 0x87, 0xed, 0x80, 0xf1, 0x98, 0x71, 0xdb, 0x47, 0x1c, 0x4f, 0xc1, 0x01,
	0x23, 0xb4, 0xc0, 0x1d, 0x3e, 0x2c, 0xec, 0x9e, 0x92, 0xec, 0x42, 0x28, 0x4d, 0x7b, 0x7d, 0xd6,
	0x67, 0x85, 0x5e, 0x7e, 0x4d, 0x00, 0x7d, 0xc6, 0xfa, 0x11, 0xb6, 0x95, 0xe4, 0xa7, 0x3d, 0x1b,
	0xd1, 0x71, 0x61, 0x82, 0xef, 0xd6, 0xc1, 0xce, 0x29, 0x8b, 0x63, 0xc2, 0x39, 0x61, 0xf4, 0x94,
	0xd1, 0x1e, 0xe9, 0xeb, 0x2f, 0xc1, 0x83, 0x18, 0x51, 0xd4, 0xc7, 0x31, 0xa6, 0xc2, 0xeb, 0x61,
	0xec, 0x25, 0x48, 0x60, 0x43, 0x3b, 0xd2, 0x8e, 0x37, 0x9c, 0x76, 0x9e, 0x99, 0x87, 0x3e, 0x67,
	0xf4, 0x04, 0xae, 0x70, 0x82, 0xee, 0x6e, 0xa5, 0xed, 0x60, 0xec, 0x22, 0x81, 0xf5, 0xd7, 0xe0,
	0x60, 0xc1, 0x55, 0x5d, 0x7a, 0x84, 0x22, 0x63, 0x5d, 0x71, 0xc2, 0x3c, 0x33, 0xdb, 0x2b, 0x39,
	0x27, 0x8e, 0xd0, 0x6d, 0xcd, 0xf1, 0x76, 0x4b, 0xbd, 0xfe, 0x0d, 0xd8, 0x11, 0x09, 0x0a, 0x09,
	0xed, 0x57, 0x81, 0x6e, 0x28, 0xd2, 0x47, 0x79, 0x66, 0x1e, 0x14, 0xa4, 0x8b, 0x1e, 0xd0, 0x6d,
	0x96, 0xaa, 0x32, 0x44, 0xf8, 0xa7, 0x06, 0x9a, 0x55, 0x1e, 0x3a, 0x18, 0x73, 0xfd, 0x2d, 0xf8,
	0x78, 0x3e, 0x18, 0x6e, 0x68, 0x47, 0x1b, 0xc7, 0x35, 0xe7, 0xec, 0x7d, 0x66, 0xae, 0xfd, 0x9e,
	0x99, 0x9f, 0xf7, 0x89, 0x18, 0xa4, 0xbe, 0x15, 0xb0, 0xb8, 0xac, 0x42, 0xf9, 0xf3, 0x84, 0x87,
	0x6f, 0x6c, 0x31, 0x1e, 0x62, 0x6e, 0x9d, 0x32, 0x42, 0xf3, 0xcc, 0x6c, 0xad, 0xba, 0x1c, 0x74,
	0x9b, 0x73, 0x77, 0xe2, 0x3a, 0x01, 0x8d, 0x99, 0x50, 0xb9, 0xb1, 0xae, 0xce, 0xeb, 0xdc, 0xfe,
	0xbc, 0x07, 0x4b, 0xf7, 0xe6, 0xd0, 0xad, 0x57, 0x77, 0xe6, 0xf0, 0xe7, 0x1a, 0xa8, 0xa9, 0x24,
	0xbe, 0x62, 0x2c, 0xd2, 0x3d, 0xb0, 0x25, 0x5b, 0xd0, 0x23, 0xa1, 0xaa, 0x72, 0xc3, 0xe9, 0xe4,
	0x99, 0xd9, 0x2c, 0x48, 0x4a, 0x03, 0xfc, 0x2b, 0x33, 0x9f, 0xce, 0x45, 0x10, 0x63, 0xe1, 0xf7,
	0x44, 0xf5, 0x11, 0x11, 0x9f, 0xdb, 0xfe, 0x58, 0x60, 0x6e, 0x9d, 0xe1, 0x4b, 0x47, 0x7e, 0xb8,
	0x9b, 0x12, 0xdd, 0x0d, 0xf5, 0xef, 0xc0, 0x36, 0x1b, 0xe2, 0x04, 0x09, 0x96, 0x78, 0x28, 0x0c,
	0x13, 0x55, 0xf8, 0x9a, 0xf3, 0x34, 0xcf, 0xcc, 0xbd, 0xe2, 0x98, 0x39, 0x33, 0xfc, 0xf5, 0x97,
	0x27, 0x7b, 0x65, 0x67, 0x3f, 0x0f, 0xc3, 0x04, 0x73, 0x7e, 0x2e, 0x12, 0x42, 0xfb, 0x6e, 0x63,
	0xe2, 0x27, 0xd5, 0xfa, 0xf7, 0x40, 0x27, 0x74, 0x84, 0xa9, 0x60, 0xc9, 0xd8, 0xe3, 0x14, 0x0d,
	0xf9, 0x80, 0x09, 0x63, 0x43, 0xa5, 0xed, 0xc5, 0xed, 0xd3, 0xf6, 0xb0, 0x08, 0x65, 0x99, 0x12,
	0xba, 0xbb, 0x53, 0xe5, 0x79, 0xa9, 0x93, 0xd5, 0x92, 0x23, 0xea, 0x05, 0x68, 0x48, 0x04, 0x8a,
	0x8c, 0x7b, 0xff, 0xb2, 0x5a, 0xb3, 0x64, 0xd0, 0xad, 0x4b, 0xf1, 0xb4, 0x90, 0xf4, 0x1f, 0x35,
	0x70, 0x38, 0x4d, 0x50, 0x30, 0xed, 0x53, 0x2f, 0x50, 0x03, 0x6b, 0x7c, 0x74, 0xa4, 0x1d, 0xd7,
	0xbf, 0x38, 0xb6, 0x56, 0x2f, 0x14, 0x6b, 0x71, 0xc0, 0x9d, 0xcf, 0xf2, 0xcc, 0xfc, 0x64, 0x21,
	0xed, 0x4b, 0xac, 0xd0, 0x35, 0x26, 0xc6, 0xa5, 0x0d, 0xf1, 0x4e, 0x03, 0xc6, 0x2a, 0xa4, 0xea,
	0xda, 0x4d, 0x15, 0xcd, 0xe3, 0x7f, 0x8e, 0x46, 0x36, 0xa2, 0xf3, 0x69, 0x9e, 0x99, 0xe6, 0xcd,
	0xb1, 0x14, 0xad, 0xbb, 0xbf, 0x1c, 0x89, 0x1a, 0x98, 0xaf, 0x00, 0x20, 0x74, 0x98, 0x0a, 0xcf,
	0x8f, 0x98, 0x6f, 0x6c, 0xa9, 0xd6, 0x6d, 0xe5, 0x99, 0xb9, 0x3b, 0x29, 0xe4, 0xc4, 0x06, 0xdd,
	0x9a, 0x12, 0x9c, 0x88, 0xf9, 0xfa, 0xd7, 0xa0, 0xce, 0x52, 0x31, 0x85, 0xdd, 0x57, 0xb0, 0xfd,
	0x3c, 0x33, 0xf5, 0x32, 0x8e, 0xca, 0x08, 0x5d, 0x50, 0x48, 0x0a, 0xe8, 0x81, 0xad, 0x20, 0x61,
	0x54, 0x8e, 0x49, 0x6d, 0x71, 0x4c, 0x4a, 0xc3, 0x1d, 0xc7, 0x44, 0xa2, 0xbb, 0xa1, 0xee, 0x82,
	0x86, 0x1a, 0x37, 0x14, 0x04, 0x2c, 0xa5, 0xc2, 0x00, 0x6a, 0x4a, 0xec, 0xaa, 0x47, 0x66, 0xad,
	0x37, 0x0f, 0x49, 0x5d, 0xba, 0x3d, 0x2f, 0xbc, 0xf4, 0x6f, 0xc1, 0x1e, 0xc5, 0x97, 0x62, 0x36,
	0xa9, 0x82, 0xc4, 0xd8, 0xa8, 0xab, 0x2d, 0x69, 0xe6, 0x99, 0xf9, 0xa8, 0xe0, 0x5e, 0xe5, 0x05,
	0x5d, 0x5d, 0xaa, 0xab, 0xb4, 0x5f, 0x90, 0x18, 0xeb, 0x18, 0xd4, 0x38, 0x8b, 0x46, 0x38, 0x91,
	0x99, 0x68, 0xa8, 0x4c, 0x9c, 0xe5, 0x99, 0xb9, 0x53, 0xf0, 0x4c, 0x4d, 0x77, 0xcb, 0xc5, 0xfd,
	0x02, 0xdf, 0x0d, 0xe1, 0x0f, 0xf7, 0x40, 0x4d, 0xae, 0xa7, 0xf3, 0x01, 0x4a, 0xf0, 0x7f, 0xbf,
	0xa3, 0x12, 0x70, 0x10, 0x91, 0xb7, 0x29, 0x09, 0x89, 0x18, 0xcb, 0xc7, 0x75, 0x44, 0x42, 0x3c,
	0xb7, 0xad, 0x4e, 0xaa, 0x67, 0xea, 0x06, 0xc7, 0x9b, 0x4b, 0xd2, 0x9a, 0x22, 0x5e, 0x95, 0x00,
	0xb5, 0xc0, 0x18, 0x68, 0x22, 0xce, 0xb1, 0x58, 0x5c, 0x5e, 0x77, 0x7f, 0x63, 0xe6, 0xe9, 0xa0,
	0xbb, 0xad, 0x14, 0xff, 0xc7, 0xd2, 0xea, 0x80, 0x4d, 0x2e, 0x2b, 0xc7, 0xd5, 0x7e, 0xaa, 0x39,
	0x56, 0x79, 0x48, 0xab, 0xa0, 0xe4, 0xe1, 0x1b, 0x8b, 0x30, 0x3b, 0x46, 0x62, 0x60, 0x75, 0xa9,
	0xc8, 0x33, 0x73, 0xbb, 0xec, 0x1f, 0x05, 0x82, 0x6e, 0x89, 0x76, 0x2e, 0xde, 0x5f, 0xb5, 0xb5,
	0x0f, 0x57, 0x6d, 0xed, 0x8f, 0xab, 0xb6, 0xf6, 0xd3, 0x75, 0x7b, 0xed, 0xc3, 0x75, 0x7b, 0xed,
	0xb7, 0xeb, 0xf6, 0xda, 0xeb, 0x93, 0x99, 0x70, 0x3b, 0x51, 0x7a, 0xf9, 0xb2, 0x73, 0xf1, 0x02,
	0xf9, 0xdc, 0x96, 0x9b, 0x27, 0xb4, 0x83, 0x01, 0x22, 0xd4, 0x8e, 0x59, 0x98, 0x46, 0x98, 0xcf,
	0xfc, 0x1f, 0x53, 0xd7, 0xf0, 0x37, 0xd5, 0x1f, 0xa0, 0x2f, 0xff, 0x0e, 0x00, 0x00, 0xff, 0xff,
	0x56, 0x11, 0x18, 0xf4, 0xae, 0x09, 0x00, 0x00,
}

func (m *CommissionConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CommissionConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CommissionConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TradingFeeRate != 0 {
		i = encodeVarintInterpool(dAtA, i, uint64(m.TradingFeeRate))
		i--
		dAtA[i] = 0x18
	}
	if m.ManagementFeeInterval != 0 {
		i = encodeVarintInterpool(dAtA, i, uint64(m.ManagementFeeInterval))
		i--
		dAtA[i] = 0x10
	}
	if m.ManagementFeeRate != 0 {
		i = encodeVarintInterpool(dAtA, i, uint64(m.ManagementFeeRate))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CommissionFees) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CommissionFees) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CommissionFees) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TradingFees) > 0 {
		for iNdEx := len(m.TradingFees) - 1; iNdEx >= 0; iNdEx-- {
			{
				size := m.TradingFees[iNdEx].Size()
				i -= size
				if _, err := m.TradingFees[iNdEx].MarshalTo(dAtA[i:]); err != nil {
					return 0, err
				}
				i = encodeVarintInterpool(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.ManagementFees) > 0 {
		for iNdEx := len(m.ManagementFees) - 1; iNdEx >= 0; iNdEx-- {
			{
				size := m.ManagementFees[iNdEx].Size()
				i -= size
				if _, err := m.ManagementFees[iNdEx].MarshalTo(dAtA[i:]); err != nil {
					return 0, err
				}
				i = encodeVarintInterpool(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *InterPool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InterPool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InterPool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SolverId) > 0 {
		i -= len(m.SolverId)
		copy(dAtA[i:], m.SolverId)
		i = encodeVarintInterpool(dAtA, i, uint64(len(m.SolverId)))
		i--
		dAtA[i] = 0x62
	}
	if m.NextCommissionTime != 0 {
		i = encodeVarintInterpool(dAtA, i, uint64(m.NextCommissionTime))
		i--
		dAtA[i] = 0x58
	}
	if len(m.PoolAccount) > 0 {
		i -= len(m.PoolAccount)
		copy(dAtA[i:], m.PoolAccount)
		i = encodeVarintInterpool(dAtA, i, uint64(len(m.PoolAccount)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.CronId) > 0 {
		i -= len(m.CronId)
		copy(dAtA[i:], m.CronId)
		i = encodeVarintInterpool(dAtA, i, uint64(len(m.CronId)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.OutputBlob) > 0 {
		i -= len(m.OutputBlob)
		copy(dAtA[i:], m.OutputBlob)
		i = encodeVarintInterpool(dAtA, i, uint64(len(m.OutputBlob)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.InputBlob) > 0 {
		i -= len(m.InputBlob)
		copy(dAtA[i:], m.InputBlob)
		i = encodeVarintInterpool(dAtA, i, uint64(len(m.InputBlob)))
		i--
		dAtA[i] = 0x3a
	}
	if m.OperatorCommissionFees != nil {
		{
			size, err := m.OperatorCommissionFees.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintInterpool(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.OperatorCommissionConfig != nil {
		{
			size, err := m.OperatorCommissionConfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintInterpool(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.BaseCapital) > 0 {
		for iNdEx := len(m.BaseCapital) - 1; iNdEx >= 0; iNdEx-- {
			{
				size := m.BaseCapital[iNdEx].Size()
				i -= size
				if _, err := m.BaseCapital[iNdEx].MarshalTo(dAtA[i:]); err != nil {
					return 0, err
				}
				i = encodeVarintInterpool(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.InventorySnapshot) > 0 {
		for iNdEx := len(m.InventorySnapshot) - 1; iNdEx >= 0; iNdEx-- {
			{
				size := m.InventorySnapshot[iNdEx].Size()
				i -= size
				if _, err := m.InventorySnapshot[iNdEx].MarshalTo(dAtA[i:]); err != nil {
					return 0, err
				}
				i = encodeVarintInterpool(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.OperatorAddr) > 0 {
		i -= len(m.OperatorAddr)
		copy(dAtA[i:], m.OperatorAddr)
		i = encodeVarintInterpool(dAtA, i, uint64(len(m.OperatorAddr)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.PoolId) > 0 {
		i -= len(m.PoolId)
		copy(dAtA[i:], m.PoolId)
		i = encodeVarintInterpool(dAtA, i, uint64(len(m.PoolId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PoolShare) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PoolShare) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PoolShare) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Shares.Size()
		i -= size
		if _, err := m.Shares.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintInterpool(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if len(m.BaseCapital) > 0 {
		for iNdEx := len(m.BaseCapital) - 1; iNdEx >= 0; iNdEx-- {
			{
				size := m.BaseCapital[iNdEx].Size()
				i -= size
				if _, err := m.BaseCapital[iNdEx].MarshalTo(dAtA[i:]); err != nil {
					return 0, err
				}
				i = encodeVarintInterpool(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.AssetSnapshot) > 0 {
		for iNdEx := len(m.AssetSnapshot) - 1; iNdEx >= 0; iNdEx-- {
			{
				size := m.AssetSnapshot[iNdEx].Size()
				i -= size
				if _, err := m.AssetSnapshot[iNdEx].MarshalTo(dAtA[i:]); err != nil {
					return 0, err
				}
				i = encodeVarintInterpool(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.LiquidityProviderAddr) > 0 {
		i -= len(m.LiquidityProviderAddr)
		copy(dAtA[i:], m.LiquidityProviderAddr)
		i = encodeVarintInterpool(dAtA, i, uint64(len(m.LiquidityProviderAddr)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.PoolId) > 0 {
		i -= len(m.PoolId)
		copy(dAtA[i:], m.PoolId)
		i = encodeVarintInterpool(dAtA, i, uint64(len(m.PoolId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintInterpool(dAtA []byte, offset int, v uint64) int {
	offset -= sovInterpool(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CommissionConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ManagementFeeRate != 0 {
		n += 1 + sovInterpool(uint64(m.ManagementFeeRate))
	}
	if m.ManagementFeeInterval != 0 {
		n += 1 + sovInterpool(uint64(m.ManagementFeeInterval))
	}
	if m.TradingFeeRate != 0 {
		n += 1 + sovInterpool(uint64(m.TradingFeeRate))
	}
	return n
}

func (m *CommissionFees) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ManagementFees) > 0 {
		for _, e := range m.ManagementFees {
			l = e.Size()
			n += 1 + l + sovInterpool(uint64(l))
		}
	}
	if len(m.TradingFees) > 0 {
		for _, e := range m.TradingFees {
			l = e.Size()
			n += 1 + l + sovInterpool(uint64(l))
		}
	}
	return n
}

func (m *InterPool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PoolId)
	if l > 0 {
		n += 1 + l + sovInterpool(uint64(l))
	}
	l = len(m.OperatorAddr)
	if l > 0 {
		n += 1 + l + sovInterpool(uint64(l))
	}
	if len(m.InventorySnapshot) > 0 {
		for _, e := range m.InventorySnapshot {
			l = e.Size()
			n += 1 + l + sovInterpool(uint64(l))
		}
	}
	if len(m.BaseCapital) > 0 {
		for _, e := range m.BaseCapital {
			l = e.Size()
			n += 1 + l + sovInterpool(uint64(l))
		}
	}
	if m.OperatorCommissionConfig != nil {
		l = m.OperatorCommissionConfig.Size()
		n += 1 + l + sovInterpool(uint64(l))
	}
	if m.OperatorCommissionFees != nil {
		l = m.OperatorCommissionFees.Size()
		n += 1 + l + sovInterpool(uint64(l))
	}
	l = len(m.InputBlob)
	if l > 0 {
		n += 1 + l + sovInterpool(uint64(l))
	}
	l = len(m.OutputBlob)
	if l > 0 {
		n += 1 + l + sovInterpool(uint64(l))
	}
	l = len(m.CronId)
	if l > 0 {
		n += 1 + l + sovInterpool(uint64(l))
	}
	l = len(m.PoolAccount)
	if l > 0 {
		n += 1 + l + sovInterpool(uint64(l))
	}
	if m.NextCommissionTime != 0 {
		n += 1 + sovInterpool(uint64(m.NextCommissionTime))
	}
	l = len(m.SolverId)
	if l > 0 {
		n += 1 + l + sovInterpool(uint64(l))
	}
	return n
}

func (m *PoolShare) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PoolId)
	if l > 0 {
		n += 1 + l + sovInterpool(uint64(l))
	}
	l = len(m.LiquidityProviderAddr)
	if l > 0 {
		n += 1 + l + sovInterpool(uint64(l))
	}
	if len(m.AssetSnapshot) > 0 {
		for _, e := range m.AssetSnapshot {
			l = e.Size()
			n += 1 + l + sovInterpool(uint64(l))
		}
	}
	if len(m.BaseCapital) > 0 {
		for _, e := range m.BaseCapital {
			l = e.Size()
			n += 1 + l + sovInterpool(uint64(l))
		}
	}
	l = m.Shares.Size()
	n += 1 + l + sovInterpool(uint64(l))
	return n
}

func sovInterpool(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozInterpool(x uint64) (n int) {
	return sovInterpool(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CommissionConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInterpool
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CommissionConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CommissionConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ManagementFeeRate", wireType)
			}
			m.ManagementFeeRate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterpool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ManagementFeeRate |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ManagementFeeInterval", wireType)
			}
			m.ManagementFeeInterval = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterpool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ManagementFeeInterval |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TradingFeeRate", wireType)
			}
			m.TradingFeeRate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterpool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TradingFeeRate |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInterpool(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthInterpool
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CommissionFees) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInterpool
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CommissionFees: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CommissionFees: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ManagementFees", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterpool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInterpool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInterpool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_cosmos_cosmos_sdk_types.Coin
			m.ManagementFees = append(m.ManagementFees, v)
			if err := m.ManagementFees[len(m.ManagementFees)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TradingFees", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterpool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInterpool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInterpool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_cosmos_cosmos_sdk_types.Coin
			m.TradingFees = append(m.TradingFees, v)
			if err := m.TradingFees[len(m.TradingFees)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInterpool(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthInterpool
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InterPool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInterpool
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InterPool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InterPool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterpool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthInterpool
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthInterpool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PoolId = append(m.PoolId[:0], dAtA[iNdEx:postIndex]...)
			if m.PoolId == nil {
				m.PoolId = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterpool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInterpool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInterpool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperatorAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InventorySnapshot", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterpool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInterpool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInterpool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_cosmos_cosmos_sdk_types.Coin
			m.InventorySnapshot = append(m.InventorySnapshot, v)
			if err := m.InventorySnapshot[len(m.InventorySnapshot)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseCapital", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterpool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInterpool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInterpool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_cosmos_cosmos_sdk_types.Coin
			m.BaseCapital = append(m.BaseCapital, v)
			if err := m.BaseCapital[len(m.BaseCapital)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorCommissionConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterpool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInterpool
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthInterpool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OperatorCommissionConfig == nil {
				m.OperatorCommissionConfig = &CommissionConfig{}
			}
			if err := m.OperatorCommissionConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorCommissionFees", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterpool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInterpool
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthInterpool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OperatorCommissionFees == nil {
				m.OperatorCommissionFees = &CommissionFees{}
			}
			if err := m.OperatorCommissionFees.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InputBlob", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterpool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthInterpool
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthInterpool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InputBlob = append(m.InputBlob[:0], dAtA[iNdEx:postIndex]...)
			if m.InputBlob == nil {
				m.InputBlob = []byte{}
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutputBlob", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterpool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthInterpool
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthInterpool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OutputBlob = append(m.OutputBlob[:0], dAtA[iNdEx:postIndex]...)
			if m.OutputBlob == nil {
				m.OutputBlob = []byte{}
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CronId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterpool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthInterpool
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthInterpool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CronId = append(m.CronId[:0], dAtA[iNdEx:postIndex]...)
			if m.CronId == nil {
				m.CronId = []byte{}
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolAccount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterpool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInterpool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInterpool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PoolAccount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextCommissionTime", wireType)
			}
			m.NextCommissionTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterpool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NextCommissionTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SolverId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterpool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthInterpool
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthInterpool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SolverId = append(m.SolverId[:0], dAtA[iNdEx:postIndex]...)
			if m.SolverId == nil {
				m.SolverId = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInterpool(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthInterpool
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PoolShare) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInterpool
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PoolShare: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PoolShare: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterpool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthInterpool
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthInterpool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PoolId = append(m.PoolId[:0], dAtA[iNdEx:postIndex]...)
			if m.PoolId == nil {
				m.PoolId = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiquidityProviderAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterpool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInterpool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInterpool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LiquidityProviderAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetSnapshot", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterpool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInterpool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInterpool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_cosmos_cosmos_sdk_types.Coin
			m.AssetSnapshot = append(m.AssetSnapshot, v)
			if err := m.AssetSnapshot[len(m.AssetSnapshot)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseCapital", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterpool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInterpool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInterpool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_cosmos_cosmos_sdk_types.Coin
			m.BaseCapital = append(m.BaseCapital, v)
			if err := m.BaseCapital[len(m.BaseCapital)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shares", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterpool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInterpool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInterpool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Shares.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInterpool(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthInterpool
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipInterpool(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowInterpool
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowInterpool
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowInterpool
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthInterpool
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupInterpool
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthInterpool
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthInterpool        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowInterpool          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupInterpool = fmt.Errorf("proto: unexpected end of group")
)
