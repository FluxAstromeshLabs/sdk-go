// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: flux/bazaar/v1beta1/product.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Product struct {
	// NFT class id reference
	ClassId string `protobuf:"bytes,1,opt,name=class_id,json=classId,proto3" json:"class_id,omitempty" bson:"classId"`
	// NFT id reference
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty" bson:"id"`
	// product id
	ProductId string `protobuf:"bytes,3,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty" bson:"productId"`
	// title
	Title string `protobuf:"bytes,4,opt,name=title,proto3" json:"title,omitempty" bson:"title"`
	// description
	Description string `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty" bson:"description"`
	// content url
	ContentUrl string `protobuf:"bytes,6,opt,name=content_url,json=contentUrl,proto3" json:"content_url,omitempty" bson:"content_url"`
	// product offerings including gift, items, etc
	Offerings []*Offering `protobuf:"bytes,7,rep,name=offerings,proto3" json:"offerings,omitempty" bson:"Offerings"`
	// product revenue
	Revenue *types.Coin `protobuf:"bytes,8,opt,name=revenue,proto3" json:"revenue,omitempty" bson:"revenue"`
	// tags
	Tags []string `protobuf:"bytes,9,rep,name=tags,proto3" json:"tags,omitempty" bson:"tags"`
	// verified
	Verified bool `protobuf:"varint,10,opt,name=verified,proto3" json:"verified,omitempty"`
}

func (m *Product) Reset()         { *m = Product{} }
func (m *Product) String() string { return proto.CompactTextString(m) }
func (*Product) ProtoMessage()    {}
func (*Product) Descriptor() ([]byte, []int) {
	return fileDescriptor_1f040641385f1149, []int{0}
}
func (m *Product) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Product) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Product.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Product) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Product.Merge(m, src)
}
func (m *Product) XXX_Size() int {
	return m.Size()
}
func (m *Product) XXX_DiscardUnknown() {
	xxx_messageInfo_Product.DiscardUnknown(m)
}

var xxx_messageInfo_Product proto.InternalMessageInfo

func (m *Product) GetClassId() string {
	if m != nil {
		return m.ClassId
	}
	return ""
}

func (m *Product) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Product) GetProductId() string {
	if m != nil {
		return m.ProductId
	}
	return ""
}

func (m *Product) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Product) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Product) GetContentUrl() string {
	if m != nil {
		return m.ContentUrl
	}
	return ""
}

func (m *Product) GetOfferings() []*Offering {
	if m != nil {
		return m.Offerings
	}
	return nil
}

func (m *Product) GetRevenue() *types.Coin {
	if m != nil {
		return m.Revenue
	}
	return nil
}

func (m *Product) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *Product) GetVerified() bool {
	if m != nil {
		return m.Verified
	}
	return false
}

type Offering struct {
	Url           string                                  `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty" bson:"url"`
	Price         github_com_cosmos_cosmos_sdk_types.Coin `protobuf:"bytes,2,opt,name=price,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Coin" json:"price" bson:"initialPrice"`
	PurchaseCount uint64                                  `protobuf:"varint,3,opt,name=purchase_count,json=purchaseCount,proto3" json:"purchase_count,omitempty" bson:"purchaseCount"`
}

func (m *Offering) Reset()         { *m = Offering{} }
func (m *Offering) String() string { return proto.CompactTextString(m) }
func (*Offering) ProtoMessage()    {}
func (*Offering) Descriptor() ([]byte, []int) {
	return fileDescriptor_1f040641385f1149, []int{1}
}
func (m *Offering) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Offering) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Offering.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Offering) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Offering.Merge(m, src)
}
func (m *Offering) XXX_Size() int {
	return m.Size()
}
func (m *Offering) XXX_DiscardUnknown() {
	xxx_messageInfo_Offering.DiscardUnknown(m)
}

var xxx_messageInfo_Offering proto.InternalMessageInfo

func (m *Offering) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *Offering) GetPurchaseCount() uint64 {
	if m != nil {
		return m.PurchaseCount
	}
	return 0
}

type ClassCommission struct {
	ClassId       string `protobuf:"bytes,1,opt,name=class_id,json=classId,proto3" json:"class_id,omitempty"`
	CommissionMul uint64 `protobuf:"varint,2,opt,name=commission_mul,json=commissionMul,proto3" json:"commission_mul,omitempty"`
	CommissionDiv uint64 `protobuf:"varint,3,opt,name=commission_div,json=commissionDiv,proto3" json:"commission_div,omitempty"`
}

func (m *ClassCommission) Reset()         { *m = ClassCommission{} }
func (m *ClassCommission) String() string { return proto.CompactTextString(m) }
func (*ClassCommission) ProtoMessage()    {}
func (*ClassCommission) Descriptor() ([]byte, []int) {
	return fileDescriptor_1f040641385f1149, []int{2}
}
func (m *ClassCommission) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClassCommission) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClassCommission.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClassCommission) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClassCommission.Merge(m, src)
}
func (m *ClassCommission) XXX_Size() int {
	return m.Size()
}
func (m *ClassCommission) XXX_DiscardUnknown() {
	xxx_messageInfo_ClassCommission.DiscardUnknown(m)
}

var xxx_messageInfo_ClassCommission proto.InternalMessageInfo

func (m *ClassCommission) GetClassId() string {
	if m != nil {
		return m.ClassId
	}
	return ""
}

func (m *ClassCommission) GetCommissionMul() uint64 {
	if m != nil {
		return m.CommissionMul
	}
	return 0
}

func (m *ClassCommission) GetCommissionDiv() uint64 {
	if m != nil {
		return m.CommissionDiv
	}
	return 0
}

func init() {
	proto.RegisterType((*Product)(nil), "flux.bazaar.v1beta1.Product")
	proto.RegisterType((*Offering)(nil), "flux.bazaar.v1beta1.Offering")
	proto.RegisterType((*ClassCommission)(nil), "flux.bazaar.v1beta1.ClassCommission")
}

func init() { proto.RegisterFile("flux/bazaar/v1beta1/product.proto", fileDescriptor_1f040641385f1149) }

var fileDescriptor_1f040641385f1149 = []byte{
	// 628 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x94, 0xcd, 0x6e, 0xd3, 0x4c,
	0x14, 0x86, 0xe3, 0x26, 0x6d, 0x92, 0xc9, 0xd7, 0xb4, 0x9a, 0x56, 0x9f, 0xdc, 0x4a, 0xb5, 0x83,
	0x11, 0x90, 0x4d, 0x6d, 0xb5, 0x5d, 0x14, 0xb1, 0x41, 0x4a, 0x50, 0x11, 0x12, 0x3f, 0xad, 0x05,
	0x1b, 0x36, 0x91, 0x3d, 0x33, 0x49, 0x47, 0x38, 0x9e, 0xc8, 0x33, 0x0e, 0xa5, 0x6b, 0x2e, 0x80,
	0xcb, 0xea, 0xb2, 0x4b, 0xc4, 0xc2, 0x42, 0xad, 0xc4, 0x05, 0xf8, 0x0a, 0xd0, 0xfc, 0x24, 0x35,
	0x15, 0x62, 0x95, 0x99, 0x79, 0x9f, 0x73, 0xe6, 0xcc, 0x39, 0x6f, 0x0c, 0x1e, 0x8c, 0x93, 0xfc,
	0x22, 0x88, 0xa3, 0xcb, 0x28, 0xca, 0x82, 0xf9, 0x41, 0x4c, 0x44, 0x74, 0x10, 0xcc, 0x32, 0x86,
	0x73, 0x24, 0xfc, 0x59, 0xc6, 0x04, 0x83, 0x5b, 0x12, 0xf1, 0x35, 0xe2, 0x1b, 0x64, 0xd7, 0x41,
	0x8c, 0x4f, 0x19, 0x0f, 0xe2, 0x88, 0x93, 0x65, 0x1c, 0x62, 0x34, 0xd5, 0x41, 0xbb, 0xdb, 0x13,
	0x36, 0x61, 0x6a, 0x19, 0xc8, 0x95, 0x3e, 0xf5, 0xbe, 0x36, 0x40, 0xf3, 0x54, 0x27, 0x87, 0xfb,
	0xa0, 0x85, 0x92, 0x88, 0xf3, 0x11, 0xc5, 0xb6, 0xd5, 0xb3, 0xfa, 0xed, 0x01, 0x2c, 0x0b, 0xb7,
	0x1b, 0x73, 0x96, 0x3e, 0xf3, 0x94, 0xf2, 0x0a, 0x7b, 0x61, 0xd3, 0xac, 0xe0, 0x1e, 0x58, 0xa1,
	0xd8, 0x5e, 0x51, 0xe0, 0x7a, 0x59, 0xb8, 0x6d, 0x0d, 0x52, 0xec, 0x85, 0x2b, 0x14, 0xc3, 0x23,
	0x00, 0x4c, 0xd5, 0x32, 0x5f, 0x5d, 0x61, 0xdb, 0x65, 0xe1, 0x6e, 0x6a, 0xcc, 0x68, 0x32, 0x63,
	0x7b, 0xb9, 0x86, 0x8f, 0xc1, 0xaa, 0xa0, 0x22, 0x21, 0x76, 0x43, 0xf1, 0x9b, 0x65, 0xe1, 0xfe,
	0xa7, 0x79, 0x75, 0xec, 0x85, 0x5a, 0x86, 0x4f, 0x41, 0x07, 0x13, 0x8e, 0x32, 0x3a, 0x13, 0x94,
	0xa5, 0xf6, 0xaa, 0xa2, 0xff, 0x2f, 0x0b, 0x17, 0x6a, 0xba, 0x22, 0x7a, 0x61, 0x15, 0x85, 0xc7,
	0xa0, 0x83, 0x58, 0x2a, 0x48, 0x2a, 0x46, 0x79, 0x96, 0xd8, 0x6b, 0xf7, 0x23, 0x2b, 0xa2, 0x17,
	0x02, 0xb3, 0xfb, 0x90, 0x25, 0xf0, 0x0c, 0xb4, 0xd9, 0x78, 0x4c, 0x32, 0x9a, 0x4e, 0xb8, 0xdd,
	0xec, 0xd5, 0xfb, 0x9d, 0xc3, 0x3d, 0xff, 0x2f, 0x83, 0xf0, 0xdf, 0x19, 0xaa, 0xfa, 0xda, 0xc5,
	0x19, 0xf7, 0xc2, 0xbb, 0x2c, 0xf0, 0x25, 0x68, 0x66, 0x64, 0x4e, 0xd2, 0x9c, 0xd8, 0xad, 0x9e,
	0xd5, 0xef, 0x1c, 0xee, 0xf8, 0x7a, 0x88, 0xbe, 0x1c, 0xe2, 0x32, 0xe1, 0x90, 0xd1, 0xb4, 0x3a,
	0x0a, 0x13, 0xe3, 0x85, 0x8b, 0x68, 0xf8, 0x10, 0x34, 0x44, 0x34, 0xe1, 0x76, 0xbb, 0x57, 0xef,
	0xb7, 0x07, 0x1b, 0x65, 0xe1, 0x76, 0x4c, 0xd7, 0x22, 0x79, 0xa5, 0x12, 0xe1, 0x2e, 0x68, 0xcd,
	0x49, 0x46, 0xc7, 0x94, 0x60, 0x1b, 0xf4, 0xac, 0x7e, 0x2b, 0x5c, 0xee, 0xbd, 0x5f, 0x16, 0x68,
	0x2d, 0x6a, 0x84, 0x3d, 0x50, 0x97, 0xad, 0xd1, 0x16, 0xe8, 0x96, 0x85, 0x0b, 0x74, 0x32, 0xd5,
	0x12, 0x29, 0xc1, 0xcf, 0x60, 0x75, 0x96, 0x51, 0x44, 0xd4, 0xf4, 0xff, 0x59, 0xf6, 0xc9, 0x55,
	0xe1, 0xd6, 0x7e, 0x14, 0xee, 0x93, 0x09, 0x15, 0xe7, 0x79, 0xec, 0x23, 0x36, 0x0d, 0x8c, 0x51,
	0xf5, 0xcf, 0x3e, 0xc7, 0x9f, 0x02, 0xf1, 0x65, 0x46, 0xb8, 0x0a, 0x28, 0x0b, 0x77, 0xcb, 0xf8,
	0x28, 0xa5, 0x82, 0x46, 0xc9, 0xa9, 0xbc, 0xc7, 0x0b, 0xf5, 0x7d, 0xf0, 0x39, 0xe8, 0xce, 0xf2,
	0x0c, 0x9d, 0x47, 0x9c, 0x8c, 0x10, 0xcb, 0x53, 0xa1, 0x8c, 0xd5, 0x18, 0xd8, 0x65, 0xe1, 0x6e,
	0x1b, 0x63, 0x19, 0x7d, 0x28, 0x65, 0x2f, 0x5c, 0xff, 0x73, 0x7f, 0x09, 0x36, 0x86, 0xd2, 0xbf,
	0x43, 0x36, 0x9d, 0x52, 0xce, 0xa5, 0x23, 0x76, 0xee, 0xdb, 0xfe, 0xce, 0xe2, 0x8f, 0x40, 0x17,
	0x2d, 0xc1, 0xd1, 0x34, 0x4f, 0xd4, 0x83, 0x1b, 0xe1, 0xfa, 0xdd, 0xe9, 0x9b, 0x3c, 0xb9, 0x87,
	0x61, 0x3a, 0xd7, 0x55, 0x55, 0xb1, 0x17, 0x74, 0x3e, 0x38, 0xbb, 0xba, 0x71, 0xac, 0xeb, 0x1b,
	0xc7, 0xfa, 0x79, 0xe3, 0x58, 0xdf, 0x6e, 0x9d, 0xda, 0xf5, 0xad, 0x53, 0xfb, 0x7e, 0xeb, 0xd4,
	0x3e, 0x1e, 0x57, 0xba, 0x73, 0x92, 0xe4, 0x17, 0x6f, 0x4f, 0xde, 0xbf, 0x8e, 0x62, 0x1e, 0x48,
	0x7b, 0xe1, 0x00, 0x9d, 0x47, 0x34, 0x0d, 0xa6, 0x0c, 0xe7, 0x09, 0xe1, 0x8b, 0x2f, 0x83, 0x6a,
	0x59, 0xbc, 0xa6, 0xfe, 0xc5, 0x47, 0xbf, 0x03, 0x00, 0x00, 0xff, 0xff, 0x9c, 0x2d, 0xfc, 0x25,
	0x35, 0x04, 0x00, 0x00,
}

func (m *Product) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Product) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Product) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Verified {
		i--
		if m.Verified {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x50
	}
	if len(m.Tags) > 0 {
		for iNdEx := len(m.Tags) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Tags[iNdEx])
			copy(dAtA[i:], m.Tags[iNdEx])
			i = encodeVarintProduct(dAtA, i, uint64(len(m.Tags[iNdEx])))
			i--
			dAtA[i] = 0x4a
		}
	}
	if m.Revenue != nil {
		{
			size, err := m.Revenue.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProduct(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if len(m.Offerings) > 0 {
		for iNdEx := len(m.Offerings) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Offerings[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintProduct(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.ContentUrl) > 0 {
		i -= len(m.ContentUrl)
		copy(dAtA[i:], m.ContentUrl)
		i = encodeVarintProduct(dAtA, i, uint64(len(m.ContentUrl)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintProduct(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintProduct(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ProductId) > 0 {
		i -= len(m.ProductId)
		copy(dAtA[i:], m.ProductId)
		i = encodeVarintProduct(dAtA, i, uint64(len(m.ProductId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintProduct(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ClassId) > 0 {
		i -= len(m.ClassId)
		copy(dAtA[i:], m.ClassId)
		i = encodeVarintProduct(dAtA, i, uint64(len(m.ClassId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Offering) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Offering) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Offering) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PurchaseCount != 0 {
		i = encodeVarintProduct(dAtA, i, uint64(m.PurchaseCount))
		i--
		dAtA[i] = 0x18
	}
	{
		size := m.Price.Size()
		i -= size
		if _, err := m.Price.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintProduct(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Url) > 0 {
		i -= len(m.Url)
		copy(dAtA[i:], m.Url)
		i = encodeVarintProduct(dAtA, i, uint64(len(m.Url)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ClassCommission) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClassCommission) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClassCommission) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CommissionDiv != 0 {
		i = encodeVarintProduct(dAtA, i, uint64(m.CommissionDiv))
		i--
		dAtA[i] = 0x18
	}
	if m.CommissionMul != 0 {
		i = encodeVarintProduct(dAtA, i, uint64(m.CommissionMul))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ClassId) > 0 {
		i -= len(m.ClassId)
		copy(dAtA[i:], m.ClassId)
		i = encodeVarintProduct(dAtA, i, uint64(len(m.ClassId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintProduct(dAtA []byte, offset int, v uint64) int {
	offset -= sovProduct(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Product) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ClassId)
	if l > 0 {
		n += 1 + l + sovProduct(uint64(l))
	}
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovProduct(uint64(l))
	}
	l = len(m.ProductId)
	if l > 0 {
		n += 1 + l + sovProduct(uint64(l))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovProduct(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovProduct(uint64(l))
	}
	l = len(m.ContentUrl)
	if l > 0 {
		n += 1 + l + sovProduct(uint64(l))
	}
	if len(m.Offerings) > 0 {
		for _, e := range m.Offerings {
			l = e.Size()
			n += 1 + l + sovProduct(uint64(l))
		}
	}
	if m.Revenue != nil {
		l = m.Revenue.Size()
		n += 1 + l + sovProduct(uint64(l))
	}
	if len(m.Tags) > 0 {
		for _, s := range m.Tags {
			l = len(s)
			n += 1 + l + sovProduct(uint64(l))
		}
	}
	if m.Verified {
		n += 2
	}
	return n
}

func (m *Offering) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovProduct(uint64(l))
	}
	l = m.Price.Size()
	n += 1 + l + sovProduct(uint64(l))
	if m.PurchaseCount != 0 {
		n += 1 + sovProduct(uint64(m.PurchaseCount))
	}
	return n
}

func (m *ClassCommission) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ClassId)
	if l > 0 {
		n += 1 + l + sovProduct(uint64(l))
	}
	if m.CommissionMul != 0 {
		n += 1 + sovProduct(uint64(m.CommissionMul))
	}
	if m.CommissionDiv != 0 {
		n += 1 + sovProduct(uint64(m.CommissionDiv))
	}
	return n
}

func sovProduct(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozProduct(x uint64) (n int) {
	return sovProduct(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Product) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProduct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Product: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Product: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProduct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProduct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProduct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClassId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProduct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProduct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProduct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProduct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProduct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProduct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProductId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProduct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProduct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProduct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProduct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProduct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProduct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContentUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProduct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProduct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProduct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContentUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offerings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProduct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProduct
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProduct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Offerings = append(m.Offerings, &Offering{})
			if err := m.Offerings[len(m.Offerings)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Revenue", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProduct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProduct
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProduct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Revenue == nil {
				m.Revenue = &types.Coin{}
			}
			if err := m.Revenue.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProduct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProduct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProduct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tags = append(m.Tags, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Verified", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProduct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Verified = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipProduct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProduct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Offering) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProduct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Offering: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Offering: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProduct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProduct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProduct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProduct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProduct
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProduct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Price.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PurchaseCount", wireType)
			}
			m.PurchaseCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProduct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PurchaseCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProduct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProduct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClassCommission) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProduct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClassCommission: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClassCommission: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProduct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProduct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProduct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClassId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommissionMul", wireType)
			}
			m.CommissionMul = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProduct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CommissionMul |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommissionDiv", wireType)
			}
			m.CommissionDiv = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProduct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CommissionDiv |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProduct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProduct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipProduct(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowProduct
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProduct
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProduct
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthProduct
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupProduct
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthProduct
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthProduct        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowProduct          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupProduct = fmt.Errorf("proto: unexpected end of group")
)
