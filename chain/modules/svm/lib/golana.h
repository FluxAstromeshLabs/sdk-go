/*
 * golana is a C interface for Solana SeaLevel VM.
*/

#pragma once

/* Generated with cbindgen:0.26.0 */

/* Warning, this file is autogenerated by cbindgen. Don't modify this manually. */

#include <stdarg.h>
#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>
#include <stdlib.h>

typedef enum {
  Ok = 0,
  ErrVerifyExecutable = 1,
  ErrProcessInstruction = 2,
} ErrorCode;

typedef struct c_compute_budget c_compute_budget;

typedef struct c_instruction_account c_instruction_account;

typedef struct c_invoke_context c_invoke_context;

typedef struct c_loaded_programs_for_tx_batch c_loaded_programs_for_tx_batch;

typedef struct c_program_runtime_env c_program_runtime_env;

typedef struct c_sysvar_cache c_sysvar_cache;

typedef struct c_transaction_account c_transaction_account;

typedef struct c_transaction_context c_transaction_context;

typedef struct {
  size_t len;
  const uint8_t *data;
} bytes;

typedef struct {
  size_t len;
  c_transaction_account **accounts_ptr;
} transaction_accounts;

typedef struct {
  const uint8_t *pubkey;
  bytes return_data;
} transaction_return_data;

#ifdef __cplusplus
extern "C" {
#endif // __cplusplus

c_compute_budget *compute_budget_create(uint64_t compute_unit_limit);

void compute_budget_free(c_compute_budget *wrapper);

c_transaction_account *transaction_account_create(const uint8_t *pubkey_ptr,
                                                  const uint8_t *owner_ptr,
                                                  uint64_t lamports,
                                                  const uint8_t *data_ptr,
                                                  size_t data_len,
                                                  bool executable,
                                                  uint64_t rent_epoch);

void transaction_account_debug(const c_transaction_account *c);

void transaction_account_free(c_transaction_account *wrapper);

c_transaction_context *transaction_context_create(c_compute_budget *c_compute_budget,
                                                  c_transaction_account **c_transaction_accounts_ptr,
                                                  size_t c_transaction_accounts_len);

void transaction_context_free(c_transaction_context *wrapper);

const uint8_t *transaction_account_get_pubkey(c_transaction_account *a);

uint64_t transaction_account_get_lamports(c_transaction_account *a);

bytes transaction_account_get_data(c_transaction_account *a);

const uint8_t *transaction_account_get_owner(c_transaction_account *a);

bool transaction_account_get_executable(c_transaction_account *a);

uint64_t transaction_account_rent_epoch(c_transaction_account *a);

transaction_accounts transaction_accounts_from_context(c_transaction_context *ctx);

transaction_return_data transaction_return_data_from_context(c_transaction_context *ctx);

void transaction_accounts_free(transaction_accounts account_array);

c_sysvar_cache *sysvar_cache_create(void);

void sysvar_cache_free(c_sysvar_cache *wrapper);

c_invoke_context *invoke_context_create(c_transaction_context *c_transaction_context,
                                        c_sysvar_cache *c_sysvar_cache,
                                        c_compute_budget *c_compute_budget,
                                        c_loaded_programs_for_tx_batch *c_loaded_programs,
                                        c_loaded_programs_for_tx_batch *c_modified_programs);

ErrorCode invoke_context_process_instruction(c_invoke_context *c_invoke_context,
                                             uint8_t *instruction_data,
                                             size_t instruction_data_size,
                                             uint16_t *program_account_indexes,
                                             size_t program_account_indexes_size,
                                             c_instruction_account **instruction_accounts,
                                             size_t instruction_accounts_size,
                                             uint64_t *compute_unit_consumed);

void invoke_context_free(c_invoke_context *wrapper);

c_instruction_account *instruction_account_create(uint16_t index_in_transaction,
                                                  uint16_t index_in_caller,
                                                  uint16_t index_in_callee,
                                                  bool is_signer,
                                                  bool is_writable);

void instruction_account_free(c_instruction_account *wrapper);

c_program_runtime_env *program_runtime_create(c_compute_budget *c_compute_budget);

void program_runtime_free(c_program_runtime_env *wrapper);

c_loaded_programs_for_tx_batch *loaded_programs_for_tx_batch_create(c_program_runtime_env *c_program_runtime_env,
                                                                    c_transaction_account **c_transaction_accounts_ptr,
                                                                    size_t c_transaction_accounts_len);

c_loaded_programs_for_tx_batch *modified_programs_by_tx_batch_create(c_loaded_programs_for_tx_batch *c_loaded_programs_for_tx_batch);

void loaded_programs_for_tx_batch_free(c_loaded_programs_for_tx_batch *wrapper);

#ifdef __cplusplus
} // extern "C"
#endif // __cplusplus
