/*
 * golana is a C interface for Solana SeaLevel VM.
*/

#pragma once

/* Generated with cbindgen:0.26.0 */

/* Warning, this file is autogenerated by cbindgen. Don't modify this manually. */

#include <stdarg.h>
#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>
#include <stdlib.h>

typedef struct golana_compute_budget golana_compute_budget;

typedef struct golana_instruction_account golana_instruction_account;

typedef struct golana_ix_info golana_ix_info;

typedef struct golana_pubkeys golana_pubkeys;

typedef struct golana_result golana_result;

typedef struct golana_sysvar_cache golana_sysvar_cache;

typedef struct golana_sysvar_clock golana_sysvar_clock;

typedef struct golana_sysvar_rent golana_sysvar_rent;

typedef struct golana_transaction_account golana_transaction_account;

typedef struct golana_tx_callback golana_tx_callback;

typedef golana_compute_budget *(*getComputeBudgetFn)(void *caller, uint64_t tx_id);

typedef golana_pubkeys *(*getPubkeysFn)(void *caller, uint64_t tx_id);

typedef uint64_t (*getIxLenFn)(void *caller, uint64_t tx_id);

typedef golana_ix_info *(*getIxInfoFn)(void *caller, uint64_t tx_id, uint64_t ix_id);

typedef golana_transaction_account *(*getAccountSharedDataFn)(void *caller, uint8_t *pubkey);

typedef bool (*setAccountSharedDataFn)(void *caller, golana_transaction_account *account);

typedef struct {
  size_t len;
  const uint8_t *data;
} bytes;

#ifdef __cplusplus
extern "C" {
#endif // __cplusplus

golana_tx_callback *golana_tx_callback_create(getComputeBudgetFn get_compute_budget_fn,
                                              getPubkeysFn get_pubkeys_fn,
                                              getIxLenFn get_ix_len_fn,
                                              getIxInfoFn get_ix_info_fn,
                                              getAccountSharedDataFn get_account_shared_data_fn,
                                              setAccountSharedDataFn set_account_shared_data_fn);

void golana_tx_callback_free(golana_tx_callback *c_tx_callback);

golana_result *golana_execute(golana_tx_callback *cb,
                              uint64_t tx_id,
                              uint64_t *total_unit_consumed,
                              golana_sysvar_cache *sysvar_cache);

bytes golana_get_builtins_program_keys(void);

void golana_bytes_free(bytes b);

golana_transaction_account *golana_transaction_account_create(const uint8_t *pubkey_ptr,
                                                              const uint8_t *owner_ptr,
                                                              uint64_t lamports,
                                                              const uint8_t *data_ptr,
                                                              size_t data_len,
                                                              bool executable,
                                                              uint64_t rent_epoch);

void golana_transaction_account_debug(const golana_transaction_account *c);

const uint8_t *golana_transaction_account_get_pubkey(golana_transaction_account *a);

uint64_t golana_transaction_account_get_lamports(golana_transaction_account *a);

bytes golana_transaction_account_get_data(golana_transaction_account *a);

const uint8_t *golana_transaction_account_get_owner(golana_transaction_account *a);

bool golana_transaction_account_get_executable(golana_transaction_account *a);

uint64_t golana_transaction_account_rent_epoch(golana_transaction_account *a);

golana_compute_budget *golana_compute_budget_create(uint64_t compute_unit_limit,
                                                    size_t max_instruction_trace_length,
                                                    size_t max_invoke_stack_height,
                                                    size_t stack_frame_size,
                                                    uint32_t heap_size);

golana_pubkeys *golana_pubkeys_create(const uint8_t *const *ptr, size_t len);

golana_instruction_account *golana_instruction_account_create(uint16_t index_in_transaction,
                                                              uint16_t index_in_caller,
                                                              uint16_t index_in_callee,
                                                              bool is_signer,
                                                              bool is_writable);

golana_ix_info *golana_ix_info_create(golana_instruction_account **accounts_ptr,
                                      size_t accounts_len,
                                      uint16_t *program_accounts_ptr,
                                      size_t program_accounts_len,
                                      uint8_t *data_ptr,
                                      size_t data_len);

void golana_result_free(golana_result *wrapper);

const char *golana_result_error(golana_result *result);

const char *const *golana_result_log_ptr(golana_result *result);

size_t golana_result_log_len(golana_result *result);

golana_sysvar_clock *golana_sysvar_clock_new(uint64_t slot,
                                             int64_t epoch_start_timestamp,
                                             uint64_t epoch,
                                             uint64_t leader_schedule_epoch,
                                             int64_t unix_timestamp);

void golana_sysvar_clock_free(golana_sysvar_clock *clock);

golana_sysvar_rent *golana_sysvar_rent_new(uint64_t lamports_per_byte_year,
                                           double exemption_threshold,
                                           uint8_t burn_percent);

void golana_sysvar_rent_free(golana_sysvar_rent *rent);

golana_sysvar_cache *golana_sysvar_cache_new(void);

void golana_sysvar_cache_free(golana_sysvar_cache *sysvar_cache);

void golana_sysvar_cache_set_clock(golana_sysvar_cache *sysvar_cache, golana_sysvar_clock *clock);

void golana_sysvar_cache_set_rent(golana_sysvar_cache *sysvar_cache, golana_sysvar_rent *rent);

#ifdef __cplusplus
} // extern "C"
#endif // __cplusplus
