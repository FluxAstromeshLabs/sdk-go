// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: flux/svm/v1beta1/event.proto

package types

import (
	fmt "fmt"
	types "github.com/FluxNFTLabs/sdk-go/chain/eventstream/types"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ExecuteEvent struct {
	Op    types.Op `protobuf:"varint,1,opt,name=op,proto3,enum=flux.eventstream.v1beta1.Op" json:"op,omitempty"`
	Error string   `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	Logs  []string `protobuf:"bytes,3,rep,name=logs,proto3" json:"logs,omitempty"`
}

func (m *ExecuteEvent) Reset()         { *m = ExecuteEvent{} }
func (m *ExecuteEvent) String() string { return proto.CompactTextString(m) }
func (*ExecuteEvent) ProtoMessage()    {}
func (*ExecuteEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_acc1608d1027520d, []int{0}
}
func (m *ExecuteEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExecuteEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExecuteEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExecuteEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExecuteEvent.Merge(m, src)
}
func (m *ExecuteEvent) XXX_Size() int {
	return m.Size()
}
func (m *ExecuteEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_ExecuteEvent.DiscardUnknown(m)
}

var xxx_messageInfo_ExecuteEvent proto.InternalMessageInfo

func (m *ExecuteEvent) GetOp() types.Op {
	if m != nil {
		return m.Op
	}
	return types.Op_COSMOS_SET
}

func (m *ExecuteEvent) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *ExecuteEvent) GetLogs() []string {
	if m != nil {
		return m.Logs
	}
	return nil
}

type AccUpdateEvent struct {
	Op   types.Op `protobuf:"varint,1,opt,name=op,proto3,enum=flux.eventstream.v1beta1.Op" json:"op,omitempty"`
	Accs [][]byte `protobuf:"bytes,2,rep,name=accs,proto3" json:"accs,omitempty"`
}

func (m *AccUpdateEvent) Reset()         { *m = AccUpdateEvent{} }
func (m *AccUpdateEvent) String() string { return proto.CompactTextString(m) }
func (*AccUpdateEvent) ProtoMessage()    {}
func (*AccUpdateEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_acc1608d1027520d, []int{1}
}
func (m *AccUpdateEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AccUpdateEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AccUpdateEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AccUpdateEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccUpdateEvent.Merge(m, src)
}
func (m *AccUpdateEvent) XXX_Size() int {
	return m.Size()
}
func (m *AccUpdateEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_AccUpdateEvent.DiscardUnknown(m)
}

var xxx_messageInfo_AccUpdateEvent proto.InternalMessageInfo

func (m *AccUpdateEvent) GetOp() types.Op {
	if m != nil {
		return m.Op
	}
	return types.Op_COSMOS_SET
}

func (m *AccUpdateEvent) GetAccs() [][]byte {
	if m != nil {
		return m.Accs
	}
	return nil
}

func init() {
	proto.RegisterType((*ExecuteEvent)(nil), "flux.svm.v1beta1.ExecuteEvent")
	proto.RegisterType((*AccUpdateEvent)(nil), "flux.svm.v1beta1.AccUpdateEvent")
}

func init() { proto.RegisterFile("flux/svm/v1beta1/event.proto", fileDescriptor_acc1608d1027520d) }

var fileDescriptor_acc1608d1027520d = []byte{
	// 273 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x90, 0xcd, 0x4a, 0xc3, 0x40,
	0x1c, 0xc4, 0xb3, 0x49, 0x15, 0xba, 0x94, 0x22, 0x8b, 0x87, 0x20, 0x65, 0x09, 0xc5, 0x43, 0x0e,
	0xb2, 0x4b, 0xd5, 0x17, 0x50, 0x68, 0x4f, 0x52, 0x21, 0xe8, 0xc5, 0xdb, 0x66, 0xb3, 0xfd, 0x80,
	0xa4, 0xbb, 0xee, 0x47, 0x48, 0xdf, 0xc2, 0xc7, 0xf2, 0xd8, 0xa3, 0x47, 0x49, 0x5e, 0x44, 0xb2,
	0x55, 0xf4, 0xec, 0xed, 0xff, 0x67, 0x66, 0x7e, 0x03, 0x03, 0x27, 0xab, 0xd2, 0x35, 0xd4, 0xd4,
	0x15, 0xad, 0x67, 0xb9, 0xb0, 0x6c, 0x46, 0x45, 0x2d, 0x76, 0x96, 0x28, 0x2d, 0xad, 0x44, 0x67,
	0xbd, 0x4a, 0x4c, 0x5d, 0x91, 0x6f, 0xf5, 0xe2, 0xd2, 0xfb, 0xbd, 0xc7, 0x58, 0x2d, 0xd8, 0x6f,
	0xee, 0xd5, 0x09, 0xbd, 0x3f, 0xe6, 0xa6, 0x2b, 0x38, 0x9a, 0x37, 0x82, 0x3b, 0x2b, 0xe6, 0xbd,
	0x13, 0x5d, 0xc1, 0x50, 0xaa, 0x18, 0x24, 0x20, 0x1d, 0x5f, 0x4f, 0x88, 0x87, 0xfe, 0x41, 0xfc,
	0xc0, 0xc9, 0xa3, 0xca, 0x42, 0xa9, 0xd0, 0x39, 0x3c, 0x11, 0x5a, 0x4b, 0x1d, 0x87, 0x09, 0x48,
	0x87, 0xd9, 0xf1, 0x41, 0x08, 0x0e, 0x4a, 0xb9, 0x36, 0x71, 0x94, 0x44, 0xe9, 0x30, 0xf3, 0xf7,
	0x34, 0x83, 0xe3, 0x3b, 0xce, 0x9f, 0x55, 0xc1, 0xfe, 0xd7, 0x84, 0xe0, 0x80, 0x71, 0x6e, 0xe2,
	0x30, 0x89, 0xd2, 0x51, 0xe6, 0xef, 0xfb, 0xe5, 0x7b, 0x8b, 0xc1, 0xa1, 0xc5, 0xe0, 0xb3, 0xc5,
	0xe0, 0xad, 0xc3, 0xc1, 0xa1, 0xc3, 0xc1, 0x47, 0x87, 0x83, 0x97, 0xdb, 0xf5, 0xd6, 0x6e, 0x5c,
	0x4e, 0xb8, 0xac, 0xe8, 0xa2, 0x74, 0xcd, 0x72, 0xf1, 0xf4, 0xc0, 0x72, 0x43, 0xfb, 0x96, 0x82,
	0xf2, 0x0d, 0xdb, 0xee, 0x68, 0x25, 0x0b, 0x57, 0x0a, 0xe3, 0x17, 0xb5, 0x7b, 0x25, 0x4c, 0x7e,
	0xea, 0x27, 0xb9, 0xf9, 0x0a, 0x00, 0x00, 0xff, 0xff, 0xdd, 0xce, 0x24, 0x56, 0x6a, 0x01, 0x00,
	0x00,
}

func (m *ExecuteEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExecuteEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExecuteEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Logs) > 0 {
		for iNdEx := len(m.Logs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Logs[iNdEx])
			copy(dAtA[i:], m.Logs[iNdEx])
			i = encodeVarintEvent(dAtA, i, uint64(len(m.Logs[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Error) > 0 {
		i -= len(m.Error)
		copy(dAtA[i:], m.Error)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Error)))
		i--
		dAtA[i] = 0x12
	}
	if m.Op != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.Op))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AccUpdateEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccUpdateEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AccUpdateEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Accs) > 0 {
		for iNdEx := len(m.Accs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Accs[iNdEx])
			copy(dAtA[i:], m.Accs[iNdEx])
			i = encodeVarintEvent(dAtA, i, uint64(len(m.Accs[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Op != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.Op))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintEvent(dAtA []byte, offset int, v uint64) int {
	offset -= sovEvent(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ExecuteEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Op != 0 {
		n += 1 + sovEvent(uint64(m.Op))
	}
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	if len(m.Logs) > 0 {
		for _, s := range m.Logs {
			l = len(s)
			n += 1 + l + sovEvent(uint64(l))
		}
	}
	return n
}

func (m *AccUpdateEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Op != 0 {
		n += 1 + sovEvent(uint64(m.Op))
	}
	if len(m.Accs) > 0 {
		for _, b := range m.Accs {
			l = len(b)
			n += 1 + l + sovEvent(uint64(l))
		}
	}
	return n
}

func sovEvent(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEvent(x uint64) (n int) {
	return sovEvent(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ExecuteEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExecuteEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExecuteEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Op", wireType)
			}
			m.Op = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Op |= types.Op(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Logs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Logs = append(m.Logs, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AccUpdateEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AccUpdateEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AccUpdateEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Op", wireType)
			}
			m.Op = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Op |= types.Op(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Accs", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Accs = append(m.Accs, make([]byte, postIndex-iNdEx))
			copy(m.Accs[len(m.Accs)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEvent(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEvent
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEvent
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEvent
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEvent        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEvent          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEvent = fmt.Errorf("proto: unexpected end of group")
)
