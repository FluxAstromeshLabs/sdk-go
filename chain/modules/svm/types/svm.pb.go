// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: flux/svm/v1beta1/svm.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/codec/types"
	_ "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Account struct {
	Pubkey     []byte `protobuf:"bytes,1,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
	Owner      []byte `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
	Lamports   uint64 `protobuf:"varint,3,opt,name=lamports,proto3" json:"lamports,omitempty"`
	Data       []byte `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	Executable bool   `protobuf:"varint,5,opt,name=executable,proto3" json:"executable,omitempty"`
	RentEpoch  uint64 `protobuf:"varint,6,opt,name=rent_epoch,json=rentEpoch,proto3" json:"rent_epoch,omitempty"`
}

func (m *Account) Reset()         { *m = Account{} }
func (m *Account) String() string { return proto.CompactTextString(m) }
func (*Account) ProtoMessage()    {}
func (*Account) Descriptor() ([]byte, []int) {
	return fileDescriptor_cfd81eab24888058, []int{0}
}
func (m *Account) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Account) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Account.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Account) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Account.Merge(m, src)
}
func (m *Account) XXX_Size() int {
	return m.Size()
}
func (m *Account) XXX_DiscardUnknown() {
	xxx_messageInfo_Account.DiscardUnknown(m)
}

var xxx_messageInfo_Account proto.InternalMessageInfo

func (m *Account) GetPubkey() []byte {
	if m != nil {
		return m.Pubkey
	}
	return nil
}

func (m *Account) GetOwner() []byte {
	if m != nil {
		return m.Owner
	}
	return nil
}

func (m *Account) GetLamports() uint64 {
	if m != nil {
		return m.Lamports
	}
	return 0
}

func (m *Account) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *Account) GetExecutable() bool {
	if m != nil {
		return m.Executable
	}
	return false
}

func (m *Account) GetRentEpoch() uint64 {
	if m != nil {
		return m.RentEpoch
	}
	return 0
}

type InstructionAccount struct {
	IdIndex     uint32 `protobuf:"varint,1,opt,name=id_index,json=idIndex,proto3" json:"id_index,omitempty"`
	CallerIndex uint32 `protobuf:"varint,2,opt,name=caller_index,json=callerIndex,proto3" json:"caller_index,omitempty"`
	CalleeIndex uint32 `protobuf:"varint,3,opt,name=callee_index,json=calleeIndex,proto3" json:"callee_index,omitempty"`
	IsSigner    bool   `protobuf:"varint,4,opt,name=is_signer,json=isSigner,proto3" json:"is_signer,omitempty"`
	IsWritable  bool   `protobuf:"varint,5,opt,name=is_writable,json=isWritable,proto3" json:"is_writable,omitempty"`
}

func (m *InstructionAccount) Reset()         { *m = InstructionAccount{} }
func (m *InstructionAccount) String() string { return proto.CompactTextString(m) }
func (*InstructionAccount) ProtoMessage()    {}
func (*InstructionAccount) Descriptor() ([]byte, []int) {
	return fileDescriptor_cfd81eab24888058, []int{1}
}
func (m *InstructionAccount) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InstructionAccount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InstructionAccount.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InstructionAccount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InstructionAccount.Merge(m, src)
}
func (m *InstructionAccount) XXX_Size() int {
	return m.Size()
}
func (m *InstructionAccount) XXX_DiscardUnknown() {
	xxx_messageInfo_InstructionAccount.DiscardUnknown(m)
}

var xxx_messageInfo_InstructionAccount proto.InternalMessageInfo

func (m *InstructionAccount) GetIdIndex() uint32 {
	if m != nil {
		return m.IdIndex
	}
	return 0
}

func (m *InstructionAccount) GetCallerIndex() uint32 {
	if m != nil {
		return m.CallerIndex
	}
	return 0
}

func (m *InstructionAccount) GetCalleeIndex() uint32 {
	if m != nil {
		return m.CalleeIndex
	}
	return 0
}

func (m *InstructionAccount) GetIsSigner() bool {
	if m != nil {
		return m.IsSigner
	}
	return false
}

func (m *InstructionAccount) GetIsWritable() bool {
	if m != nil {
		return m.IsWritable
	}
	return false
}

type Instruction struct {
	ProgramIndex []uint32              `protobuf:"varint,1,rep,packed,name=program_index,json=programIndex,proto3" json:"program_index,omitempty"`
	Accounts     []*InstructionAccount `protobuf:"bytes,2,rep,name=accounts,proto3" json:"accounts,omitempty"`
	Data         []byte                `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *Instruction) Reset()         { *m = Instruction{} }
func (m *Instruction) String() string { return proto.CompactTextString(m) }
func (*Instruction) ProtoMessage()    {}
func (*Instruction) Descriptor() ([]byte, []int) {
	return fileDescriptor_cfd81eab24888058, []int{2}
}
func (m *Instruction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Instruction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Instruction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Instruction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Instruction.Merge(m, src)
}
func (m *Instruction) XXX_Size() int {
	return m.Size()
}
func (m *Instruction) XXX_DiscardUnknown() {
	xxx_messageInfo_Instruction.DiscardUnknown(m)
}

var xxx_messageInfo_Instruction proto.InternalMessageInfo

func (m *Instruction) GetProgramIndex() []uint32 {
	if m != nil {
		return m.ProgramIndex
	}
	return nil
}

func (m *Instruction) GetAccounts() []*InstructionAccount {
	if m != nil {
		return m.Accounts
	}
	return nil
}

func (m *Instruction) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*Account)(nil), "flux.svm.v1beta1.Account")
	proto.RegisterType((*InstructionAccount)(nil), "flux.svm.v1beta1.InstructionAccount")
	proto.RegisterType((*Instruction)(nil), "flux.svm.v1beta1.Instruction")
}

func init() { proto.RegisterFile("flux/svm/v1beta1/svm.proto", fileDescriptor_cfd81eab24888058) }

var fileDescriptor_cfd81eab24888058 = []byte{
	// 462 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x52, 0x4d, 0x6e, 0xd3, 0x40,
	0x14, 0xce, 0xc4, 0x69, 0xea, 0xbe, 0x24, 0x12, 0x1a, 0x55, 0xc8, 0x09, 0xc2, 0x84, 0xc0, 0xc2,
	0x2b, 0x8f, 0x0a, 0x1c, 0x00, 0x90, 0xa8, 0x54, 0x09, 0x75, 0x61, 0x90, 0x90, 0xd8, 0x58, 0xe3,
	0xf1, 0xd4, 0x19, 0x61, 0x7b, 0x2c, 0xcf, 0xb8, 0x4d, 0x6e, 0xc0, 0x92, 0x53, 0x70, 0x01, 0x2e,
	0xc1, 0xb2, 0x4b, 0x96, 0x28, 0xb9, 0x08, 0xf2, 0x8c, 0x31, 0x29, 0xdd, 0xbd, 0xef, 0x67, 0xe6,
	0x7d, 0xef, 0xe9, 0xc1, 0xe2, 0x2a, 0x6f, 0x36, 0x44, 0x5d, 0x17, 0xe4, 0xfa, 0x2c, 0xe1, 0x9a,
	0x9e, 0xb5, 0x75, 0x58, 0xd5, 0x52, 0x4b, 0xfc, 0xa0, 0xd5, 0xc2, 0x16, 0x77, 0xda, 0x62, 0x9e,
	0x49, 0x99, 0xe5, 0x9c, 0x18, 0x3d, 0x69, 0xae, 0x08, 0x2d, 0xb7, 0xd6, 0xbc, 0x38, 0xcd, 0x64,
	0x26, 0x4d, 0x49, 0xda, 0xaa, 0x63, 0xe7, 0x4c, 0xaa, 0x42, 0xaa, 0xd8, 0x0a, 0x16, 0x74, 0x92,
	0x6f, 0x11, 0x49, 0xa8, 0xe2, 0x7d, 0x73, 0x26, 0x45, 0x69, 0xf5, 0xd5, 0x77, 0x04, 0xc7, 0x6f,
	0x18, 0x93, 0x4d, 0xa9, 0xf1, 0x43, 0x18, 0x57, 0x4d, 0xf2, 0x85, 0x6f, 0x3d, 0xb4, 0x44, 0xc1,
	0x34, 0xea, 0x10, 0x3e, 0x85, 0x23, 0x79, 0x53, 0xf2, 0xda, 0x1b, 0x1a, 0xda, 0x02, 0xbc, 0x00,
	0x37, 0xa7, 0x45, 0x25, 0x6b, 0xad, 0x3c, 0x67, 0x89, 0x82, 0x51, 0xd4, 0x63, 0x8c, 0x61, 0x94,
	0x52, 0x4d, 0xbd, 0x91, 0x79, 0x60, 0x6a, 0xec, 0x03, 0xf0, 0x0d, 0x67, 0x8d, 0xa6, 0x49, 0xce,
	0xbd, 0xa3, 0x25, 0x0a, 0xdc, 0xe8, 0x80, 0xc1, 0x8f, 0x01, 0x6a, 0x5e, 0xea, 0x98, 0x57, 0x92,
	0xad, 0xbd, 0xb1, 0xf9, 0xf1, 0xa4, 0x65, 0xde, 0xb5, 0xc4, 0xea, 0x07, 0x02, 0x7c, 0x51, 0x2a,
	0x5d, 0x37, 0x4c, 0x0b, 0x59, 0xfe, 0xcd, 0x3c, 0x07, 0x57, 0xa4, 0xb1, 0x28, 0x53, 0xbe, 0x31,
	0xa9, 0x67, 0xd1, 0xb1, 0x48, 0x2f, 0x5a, 0x88, 0x9f, 0xc2, 0x94, 0xd1, 0x3c, 0xe7, 0x75, 0x27,
	0x0f, 0x8d, 0x3c, 0xb1, 0xdc, 0x5d, 0x0b, 0xef, 0x2c, 0xce, 0x81, 0x85, 0x5b, 0xcb, 0x23, 0x38,
	0x11, 0x2a, 0x56, 0x22, 0x6b, 0x17, 0x30, 0x32, 0xa9, 0x5d, 0xa1, 0x3e, 0x18, 0x8c, 0x9f, 0xc0,
	0x44, 0xa8, 0xf8, 0xa6, 0x16, 0x77, 0x86, 0x12, 0xea, 0x53, 0xc7, 0xac, 0xbe, 0x22, 0x98, 0x1c,
	0xa4, 0xc6, 0xcf, 0x60, 0x56, 0xd5, 0x32, 0xab, 0x69, 0xd1, 0x67, 0x76, 0x82, 0x59, 0x34, 0xed,
	0x48, 0xdb, 0xf2, 0x35, 0xb8, 0xd4, 0x8e, 0xa7, 0xbc, 0xe1, 0xd2, 0x09, 0x26, 0x2f, 0x9e, 0x87,
	0xff, 0x1f, 0x49, 0x78, 0x7f, 0x17, 0x51, 0xff, 0xaa, 0xdf, 0xbf, 0xf3, 0x6f, 0xff, 0x6f, 0x2f,
	0x7f, 0xee, 0x7c, 0x74, 0xbb, 0xf3, 0xd1, 0xef, 0x9d, 0x8f, 0xbe, 0xed, 0xfd, 0xc1, 0xed, 0xde,
	0x1f, 0xfc, 0xda, 0xfb, 0x83, 0xcf, 0xaf, 0x32, 0xa1, 0xd7, 0x4d, 0x12, 0x32, 0x59, 0x90, 0xf3,
	0xbc, 0xd9, 0x5c, 0x9e, 0x7f, 0x7c, 0x4f, 0x13, 0x45, 0xda, 0x9e, 0x29, 0x61, 0x6b, 0x2a, 0x4a,
	0x52, 0xc8, 0xb4, 0xc9, 0xb9, 0x32, 0x37, 0xac, 0xb7, 0x15, 0x57, 0xc9, 0xd8, 0x1c, 0xd0, 0xcb,
	0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x5b, 0x9f, 0xa7, 0xe9, 0xdc, 0x02, 0x00, 0x00,
}

func (m *Account) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Account) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Account) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RentEpoch != 0 {
		i = encodeVarintSvm(dAtA, i, uint64(m.RentEpoch))
		i--
		dAtA[i] = 0x30
	}
	if m.Executable {
		i--
		if m.Executable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintSvm(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x22
	}
	if m.Lamports != 0 {
		i = encodeVarintSvm(dAtA, i, uint64(m.Lamports))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintSvm(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Pubkey) > 0 {
		i -= len(m.Pubkey)
		copy(dAtA[i:], m.Pubkey)
		i = encodeVarintSvm(dAtA, i, uint64(len(m.Pubkey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *InstructionAccount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InstructionAccount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InstructionAccount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsWritable {
		i--
		if m.IsWritable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.IsSigner {
		i--
		if m.IsSigner {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.CalleeIndex != 0 {
		i = encodeVarintSvm(dAtA, i, uint64(m.CalleeIndex))
		i--
		dAtA[i] = 0x18
	}
	if m.CallerIndex != 0 {
		i = encodeVarintSvm(dAtA, i, uint64(m.CallerIndex))
		i--
		dAtA[i] = 0x10
	}
	if m.IdIndex != 0 {
		i = encodeVarintSvm(dAtA, i, uint64(m.IdIndex))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Instruction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Instruction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Instruction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintSvm(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Accounts) > 0 {
		for iNdEx := len(m.Accounts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Accounts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSvm(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.ProgramIndex) > 0 {
		dAtA2 := make([]byte, len(m.ProgramIndex)*10)
		var j1 int
		for _, num := range m.ProgramIndex {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintSvm(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintSvm(dAtA []byte, offset int, v uint64) int {
	offset -= sovSvm(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Account) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Pubkey)
	if l > 0 {
		n += 1 + l + sovSvm(uint64(l))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovSvm(uint64(l))
	}
	if m.Lamports != 0 {
		n += 1 + sovSvm(uint64(m.Lamports))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovSvm(uint64(l))
	}
	if m.Executable {
		n += 2
	}
	if m.RentEpoch != 0 {
		n += 1 + sovSvm(uint64(m.RentEpoch))
	}
	return n
}

func (m *InstructionAccount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IdIndex != 0 {
		n += 1 + sovSvm(uint64(m.IdIndex))
	}
	if m.CallerIndex != 0 {
		n += 1 + sovSvm(uint64(m.CallerIndex))
	}
	if m.CalleeIndex != 0 {
		n += 1 + sovSvm(uint64(m.CalleeIndex))
	}
	if m.IsSigner {
		n += 2
	}
	if m.IsWritable {
		n += 2
	}
	return n
}

func (m *Instruction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ProgramIndex) > 0 {
		l = 0
		for _, e := range m.ProgramIndex {
			l += sovSvm(uint64(e))
		}
		n += 1 + sovSvm(uint64(l)) + l
	}
	if len(m.Accounts) > 0 {
		for _, e := range m.Accounts {
			l = e.Size()
			n += 1 + l + sovSvm(uint64(l))
		}
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovSvm(uint64(l))
	}
	return n
}

func sovSvm(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSvm(x uint64) (n int) {
	return sovSvm(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Account) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Account: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Account: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pubkey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSvm
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSvm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pubkey = append(m.Pubkey[:0], dAtA[iNdEx:postIndex]...)
			if m.Pubkey == nil {
				m.Pubkey = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSvm
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSvm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = append(m.Owner[:0], dAtA[iNdEx:postIndex]...)
			if m.Owner == nil {
				m.Owner = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lamports", wireType)
			}
			m.Lamports = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Lamports |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSvm
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSvm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Executable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Executable = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RentEpoch", wireType)
			}
			m.RentEpoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RentEpoch |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSvm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSvm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InstructionAccount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InstructionAccount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InstructionAccount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdIndex", wireType)
			}
			m.IdIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IdIndex |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallerIndex", wireType)
			}
			m.CallerIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CallerIndex |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CalleeIndex", wireType)
			}
			m.CalleeIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CalleeIndex |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsSigner", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsSigner = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsWritable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsWritable = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipSvm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSvm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Instruction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Instruction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Instruction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSvm
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ProgramIndex = append(m.ProgramIndex, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSvm
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthSvm
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthSvm
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.ProgramIndex) == 0 {
					m.ProgramIndex = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSvm
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ProgramIndex = append(m.ProgramIndex, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ProgramIndex", wireType)
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Accounts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSvm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Accounts = append(m.Accounts, &InstructionAccount{})
			if err := m.Accounts[len(m.Accounts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSvm
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSvm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSvm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSvm(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSvm
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSvm
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSvm
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSvm
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSvm
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSvm
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSvm        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSvm          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSvm = fmt.Errorf("proto: unexpected end of group")
)
