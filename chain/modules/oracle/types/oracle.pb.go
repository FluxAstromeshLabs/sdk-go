// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: flux/oracle/v1beta1/oracle.proto

package types

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/codec/types"
	_ "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type SimpleEntry struct {
	Symbol    string                `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Decimal   uint64                `protobuf:"varint,2,opt,name=decimal,proto3" json:"decimal,omitempty"`
	Value     cosmossdk_io_math.Int `protobuf:"bytes,3,opt,name=value,proto3,customtype=cosmossdk.io/math.Int" json:"value"`
	Timestamp uint64                `protobuf:"varint,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (m *SimpleEntry) Reset()         { *m = SimpleEntry{} }
func (m *SimpleEntry) String() string { return proto.CompactTextString(m) }
func (*SimpleEntry) ProtoMessage()    {}
func (*SimpleEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_882c49196197b27a, []int{0}
}
func (m *SimpleEntry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SimpleEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SimpleEntry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SimpleEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SimpleEntry.Merge(m, src)
}
func (m *SimpleEntry) XXX_Size() int {
	return m.Size()
}
func (m *SimpleEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_SimpleEntry.DiscardUnknown(m)
}

var xxx_messageInfo_SimpleEntry proto.InternalMessageInfo

func (m *SimpleEntry) GetSymbol() string {
	if m != nil {
		return m.Symbol
	}
	return ""
}

func (m *SimpleEntry) GetDecimal() uint64 {
	if m != nil {
		return m.Decimal
	}
	return 0
}

func (m *SimpleEntry) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func init() {
	proto.RegisterType((*SimpleEntry)(nil), "flux.oracle.v1beta1.SimpleEntry")
}

func init() { proto.RegisterFile("flux/oracle/v1beta1/oracle.proto", fileDescriptor_882c49196197b27a) }

var fileDescriptor_882c49196197b27a = []byte{
	// 311 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x44, 0x90, 0x4f, 0x4b, 0xfb, 0x30,
	0x18, 0xc7, 0x9b, 0xdf, 0x6f, 0x4e, 0x56, 0x6f, 0xf5, 0x0f, 0xdd, 0xd0, 0x6c, 0x78, 0xda, 0xa9,
	0x61, 0xec, 0xe0, 0x7d, 0xe0, 0x40, 0x10, 0xc1, 0xe9, 0xc9, 0x8b, 0x24, 0x6d, 0xd6, 0x05, 0x93,
	0x3e, 0x65, 0x49, 0xc7, 0xfa, 0x2e, 0xc4, 0x57, 0xb5, 0xe3, 0x8e, 0xe2, 0x61, 0xc8, 0xfa, 0x46,
	0xa4, 0x4d, 0xc6, 0x6e, 0xcf, 0xe7, 0xfb, 0xfd, 0xb4, 0x49, 0x1e, 0x7f, 0x30, 0x97, 0xc5, 0x9a,
	0xc0, 0x92, 0xc6, 0x92, 0x93, 0xd5, 0x88, 0x71, 0x43, 0x47, 0x0e, 0xa3, 0x7c, 0x09, 0x06, 0x82,
	0xf3, 0xda, 0x88, 0x5c, 0xe4, 0x8c, 0x5e, 0x37, 0x05, 0x48, 0x25, 0x27, 0x8d, 0xc2, 0x8a, 0x39,
	0xa1, 0x59, 0x69, 0xfd, 0xde, 0x45, 0x0a, 0x29, 0x34, 0x23, 0xa9, 0x27, 0x97, 0x76, 0x63, 0xd0,
	0x0a, 0xf4, 0xbb, 0x2d, 0x2c, 0xb8, 0x0a, 0x5b, 0x22, 0x8c, 0xea, 0xe3, 0x15, 0x62, 0x10, 0x99,
	0xed, 0x6f, 0xbf, 0x90, 0x7f, 0xf6, 0x22, 0x54, 0x2e, 0xf9, 0x7d, 0x66, 0x96, 0x65, 0x70, 0xe5,
	0xb7, 0x75, 0xa9, 0x18, 0xc8, 0x10, 0x0d, 0xd0, 0xb0, 0x33, 0x73, 0x14, 0x84, 0xfe, 0x69, 0xc2,
	0x63, 0xa1, 0xa8, 0x0c, 0xff, 0x0d, 0xd0, 0xb0, 0x35, 0x3b, 0x60, 0x30, 0xf6, 0x4f, 0x56, 0x54,
	0x16, 0x3c, 0xfc, 0x5f, 0x7f, 0x30, 0xb9, 0xd9, 0xec, 0xfa, 0xde, 0xcf, 0xae, 0x7f, 0x69, 0x0f,
	0xd6, 0xc9, 0x47, 0x24, 0x80, 0x28, 0x6a, 0x16, 0xd1, 0x43, 0x66, 0x66, 0xd6, 0x0d, 0xae, 0xfd,
	0x8e, 0x11, 0x8a, 0x6b, 0x43, 0x55, 0x1e, 0xb6, 0x9a, 0x1f, 0x1e, 0x83, 0xc9, 0xf3, 0x66, 0x8f,
	0xd1, 0x76, 0x8f, 0xd1, 0xef, 0x1e, 0xa3, 0xcf, 0x0a, 0x7b, 0xdb, 0x0a, 0x7b, 0xdf, 0x15, 0xf6,
	0xde, 0xee, 0x52, 0x61, 0x16, 0x05, 0x8b, 0x62, 0x50, 0x64, 0x2a, 0x8b, 0xf5, 0xd3, 0xf4, 0xf5,
	0x91, 0x32, 0x4d, 0xea, 0x35, 0x26, 0x24, 0x5e, 0x50, 0x91, 0x11, 0x05, 0x49, 0x21, 0xb9, 0x3e,
	0xec, 0xdd, 0x94, 0x39, 0xd7, 0xac, 0xdd, 0x3c, 0x77, 0xfc, 0x17, 0x00, 0x00, 0xff, 0xff, 0xf9,
	0x73, 0x2b, 0x61, 0x93, 0x01, 0x00, 0x00,
}

func (m *SimpleEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SimpleEntry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SimpleEntry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Timestamp != 0 {
		i = encodeVarintOracle(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x20
	}
	{
		size := m.Value.Size()
		i -= size
		if _, err := m.Value.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintOracle(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.Decimal != 0 {
		i = encodeVarintOracle(dAtA, i, uint64(m.Decimal))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Symbol) > 0 {
		i -= len(m.Symbol)
		copy(dAtA[i:], m.Symbol)
		i = encodeVarintOracle(dAtA, i, uint64(len(m.Symbol)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintOracle(dAtA []byte, offset int, v uint64) int {
	offset -= sovOracle(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SimpleEntry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Symbol)
	if l > 0 {
		n += 1 + l + sovOracle(uint64(l))
	}
	if m.Decimal != 0 {
		n += 1 + sovOracle(uint64(m.Decimal))
	}
	l = m.Value.Size()
	n += 1 + l + sovOracle(uint64(l))
	if m.Timestamp != 0 {
		n += 1 + sovOracle(uint64(m.Timestamp))
	}
	return n
}

func sovOracle(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozOracle(x uint64) (n int) {
	return sovOracle(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SimpleEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOracle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SimpleEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SimpleEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Symbol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOracle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Symbol = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Decimal", wireType)
			}
			m.Decimal = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Decimal |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOracle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Value.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOracle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOracle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipOracle(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowOracle
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthOracle
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupOracle
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthOracle
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthOracle        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowOracle          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupOracle = fmt.Errorf("proto: unexpected end of group")
)
