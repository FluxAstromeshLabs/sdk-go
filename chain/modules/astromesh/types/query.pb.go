// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: flux/astromesh/v1beta1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type QueryAction int32

const (
	QueryAction_VM_QUERY                 QueryAction = 0
	QueryAction_COSMOS_BANK_BALANCE      QueryAction = 1
	QueryAction_COSMOS_ASTROMESH_BALANCE QueryAction = 2
)

var QueryAction_name = map[int32]string{
	0: "VM_QUERY",
	1: "COSMOS_BANK_BALANCE",
	2: "COSMOS_ASTROMESH_BALANCE",
}

var QueryAction_value = map[string]int32{
	"VM_QUERY":                 0,
	"COSMOS_BANK_BALANCE":      1,
	"COSMOS_ASTROMESH_BALANCE": 2,
}

func (x QueryAction) String() string {
	return proto.EnumName(QueryAction_name, int32(x))
}

func (QueryAction) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f40df128bda15e7e, []int{0}
}

type QueryDenomLinkRequest struct {
	SrcPlane Plane  `protobuf:"varint,1,opt,name=src_plane,json=srcPlane,proto3,enum=flux.astromesh.v1beta1.Plane" json:"src_plane,omitempty"`
	DstPlane Plane  `protobuf:"varint,2,opt,name=dst_plane,json=dstPlane,proto3,enum=flux.astromesh.v1beta1.Plane" json:"dst_plane,omitempty"`
	SrcAddr  string `protobuf:"bytes,3,opt,name=src_addr,json=srcAddr,proto3" json:"src_addr,omitempty"`
}

func (m *QueryDenomLinkRequest) Reset()         { *m = QueryDenomLinkRequest{} }
func (m *QueryDenomLinkRequest) String() string { return proto.CompactTextString(m) }
func (*QueryDenomLinkRequest) ProtoMessage()    {}
func (*QueryDenomLinkRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f40df128bda15e7e, []int{0}
}
func (m *QueryDenomLinkRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDenomLinkRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDenomLinkRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDenomLinkRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDenomLinkRequest.Merge(m, src)
}
func (m *QueryDenomLinkRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryDenomLinkRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDenomLinkRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDenomLinkRequest proto.InternalMessageInfo

func (m *QueryDenomLinkRequest) GetSrcPlane() Plane {
	if m != nil {
		return m.SrcPlane
	}
	return Plane_COSMOS
}

func (m *QueryDenomLinkRequest) GetDstPlane() Plane {
	if m != nil {
		return m.DstPlane
	}
	return Plane_COSMOS
}

func (m *QueryDenomLinkRequest) GetSrcAddr() string {
	if m != nil {
		return m.SrcAddr
	}
	return ""
}

type QueryDenomLinkResponse struct {
	DstAddr     string `protobuf:"bytes,1,opt,name=dst_addr,json=dstAddr,proto3" json:"dst_addr,omitempty"`
	SrcDecimals int32  `protobuf:"varint,2,opt,name=src_decimals,json=srcDecimals,proto3" json:"src_decimals,omitempty"`
	DstDecimals int32  `protobuf:"varint,3,opt,name=dst_decimals,json=dstDecimals,proto3" json:"dst_decimals,omitempty"`
}

func (m *QueryDenomLinkResponse) Reset()         { *m = QueryDenomLinkResponse{} }
func (m *QueryDenomLinkResponse) String() string { return proto.CompactTextString(m) }
func (*QueryDenomLinkResponse) ProtoMessage()    {}
func (*QueryDenomLinkResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f40df128bda15e7e, []int{1}
}
func (m *QueryDenomLinkResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDenomLinkResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDenomLinkResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDenomLinkResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDenomLinkResponse.Merge(m, src)
}
func (m *QueryDenomLinkResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDenomLinkResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDenomLinkResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDenomLinkResponse proto.InternalMessageInfo

func (m *QueryDenomLinkResponse) GetDstAddr() string {
	if m != nil {
		return m.DstAddr
	}
	return ""
}

func (m *QueryDenomLinkResponse) GetSrcDecimals() int32 {
	if m != nil {
		return m.SrcDecimals
	}
	return 0
}

func (m *QueryDenomLinkResponse) GetDstDecimals() int32 {
	if m != nil {
		return m.DstDecimals
	}
	return 0
}

type BalanceRequest struct {
	Plane   string `protobuf:"bytes,1,opt,name=plane,proto3" json:"plane,omitempty"`
	Denom   string `protobuf:"bytes,2,opt,name=denom,proto3" json:"denom,omitempty"`
	Address string `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *BalanceRequest) Reset()         { *m = BalanceRequest{} }
func (m *BalanceRequest) String() string { return proto.CompactTextString(m) }
func (*BalanceRequest) ProtoMessage()    {}
func (*BalanceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f40df128bda15e7e, []int{2}
}
func (m *BalanceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BalanceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BalanceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BalanceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BalanceRequest.Merge(m, src)
}
func (m *BalanceRequest) XXX_Size() int {
	return m.Size()
}
func (m *BalanceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BalanceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BalanceRequest proto.InternalMessageInfo

func (m *BalanceRequest) GetPlane() string {
	if m != nil {
		return m.Plane
	}
	return ""
}

func (m *BalanceRequest) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *BalanceRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type BalanceResponse struct {
	Denom  string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
	Amount string `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (m *BalanceResponse) Reset()         { *m = BalanceResponse{} }
func (m *BalanceResponse) String() string { return proto.CompactTextString(m) }
func (*BalanceResponse) ProtoMessage()    {}
func (*BalanceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f40df128bda15e7e, []int{3}
}
func (m *BalanceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BalanceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BalanceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BalanceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BalanceResponse.Merge(m, src)
}
func (m *BalanceResponse) XXX_Size() int {
	return m.Size()
}
func (m *BalanceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_BalanceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_BalanceResponse proto.InternalMessageInfo

func (m *BalanceResponse) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *BalanceResponse) GetAmount() string {
	if m != nil {
		return m.Amount
	}
	return ""
}

type FISQueryInstruction struct {
	Plane   Plane       `protobuf:"varint,1,opt,name=plane,proto3,enum=flux.astromesh.v1beta1.Plane" json:"plane,omitempty"`
	Action  QueryAction `protobuf:"varint,2,opt,name=action,proto3,enum=flux.astromesh.v1beta1.QueryAction" json:"action,omitempty"`
	Address []byte      `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
	Input   [][]byte    `protobuf:"bytes,4,rep,name=input,proto3" json:"input,omitempty"`
}

func (m *FISQueryInstruction) Reset()         { *m = FISQueryInstruction{} }
func (m *FISQueryInstruction) String() string { return proto.CompactTextString(m) }
func (*FISQueryInstruction) ProtoMessage()    {}
func (*FISQueryInstruction) Descriptor() ([]byte, []int) {
	return fileDescriptor_f40df128bda15e7e, []int{4}
}
func (m *FISQueryInstruction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FISQueryInstruction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FISQueryInstruction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FISQueryInstruction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FISQueryInstruction.Merge(m, src)
}
func (m *FISQueryInstruction) XXX_Size() int {
	return m.Size()
}
func (m *FISQueryInstruction) XXX_DiscardUnknown() {
	xxx_messageInfo_FISQueryInstruction.DiscardUnknown(m)
}

var xxx_messageInfo_FISQueryInstruction proto.InternalMessageInfo

func (m *FISQueryInstruction) GetPlane() Plane {
	if m != nil {
		return m.Plane
	}
	return Plane_COSMOS
}

func (m *FISQueryInstruction) GetAction() QueryAction {
	if m != nil {
		return m.Action
	}
	return QueryAction_VM_QUERY
}

func (m *FISQueryInstruction) GetAddress() []byte {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *FISQueryInstruction) GetInput() [][]byte {
	if m != nil {
		return m.Input
	}
	return nil
}

type FISQueryInstructionResponse struct {
	Plane  Plane    `protobuf:"varint,1,opt,name=plane,proto3,enum=flux.astromesh.v1beta1.Plane" json:"plane,omitempty"`
	Output [][]byte `protobuf:"bytes,2,rep,name=output,proto3" json:"output,omitempty"`
}

func (m *FISQueryInstructionResponse) Reset()         { *m = FISQueryInstructionResponse{} }
func (m *FISQueryInstructionResponse) String() string { return proto.CompactTextString(m) }
func (*FISQueryInstructionResponse) ProtoMessage()    {}
func (*FISQueryInstructionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f40df128bda15e7e, []int{5}
}
func (m *FISQueryInstructionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FISQueryInstructionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FISQueryInstructionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FISQueryInstructionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FISQueryInstructionResponse.Merge(m, src)
}
func (m *FISQueryInstructionResponse) XXX_Size() int {
	return m.Size()
}
func (m *FISQueryInstructionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_FISQueryInstructionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_FISQueryInstructionResponse proto.InternalMessageInfo

func (m *FISQueryInstructionResponse) GetPlane() Plane {
	if m != nil {
		return m.Plane
	}
	return Plane_COSMOS
}

func (m *FISQueryInstructionResponse) GetOutput() [][]byte {
	if m != nil {
		return m.Output
	}
	return nil
}

type FISQueryRequest struct {
	Instructions []*FISQueryInstruction `protobuf:"bytes,2,rep,name=instructions,proto3" json:"instructions,omitempty"`
}

func (m *FISQueryRequest) Reset()         { *m = FISQueryRequest{} }
func (m *FISQueryRequest) String() string { return proto.CompactTextString(m) }
func (*FISQueryRequest) ProtoMessage()    {}
func (*FISQueryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f40df128bda15e7e, []int{6}
}
func (m *FISQueryRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FISQueryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FISQueryRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FISQueryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FISQueryRequest.Merge(m, src)
}
func (m *FISQueryRequest) XXX_Size() int {
	return m.Size()
}
func (m *FISQueryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FISQueryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FISQueryRequest proto.InternalMessageInfo

func (m *FISQueryRequest) GetInstructions() []*FISQueryInstruction {
	if m != nil {
		return m.Instructions
	}
	return nil
}

type FISQueryResponse struct {
	InstructionResponses []*FISQueryInstructionResponse `protobuf:"bytes,1,rep,name=instruction_responses,json=instructionResponses,proto3" json:"instruction_responses,omitempty"`
}

func (m *FISQueryResponse) Reset()         { *m = FISQueryResponse{} }
func (m *FISQueryResponse) String() string { return proto.CompactTextString(m) }
func (*FISQueryResponse) ProtoMessage()    {}
func (*FISQueryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f40df128bda15e7e, []int{7}
}
func (m *FISQueryResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FISQueryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FISQueryResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FISQueryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FISQueryResponse.Merge(m, src)
}
func (m *FISQueryResponse) XXX_Size() int {
	return m.Size()
}
func (m *FISQueryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_FISQueryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_FISQueryResponse proto.InternalMessageInfo

func (m *FISQueryResponse) GetInstructionResponses() []*FISQueryInstructionResponse {
	if m != nil {
		return m.InstructionResponses
	}
	return nil
}

func init() {
	proto.RegisterEnum("flux.astromesh.v1beta1.QueryAction", QueryAction_name, QueryAction_value)
	proto.RegisterType((*QueryDenomLinkRequest)(nil), "flux.astromesh.v1beta1.QueryDenomLinkRequest")
	proto.RegisterType((*QueryDenomLinkResponse)(nil), "flux.astromesh.v1beta1.QueryDenomLinkResponse")
	proto.RegisterType((*BalanceRequest)(nil), "flux.astromesh.v1beta1.BalanceRequest")
	proto.RegisterType((*BalanceResponse)(nil), "flux.astromesh.v1beta1.BalanceResponse")
	proto.RegisterType((*FISQueryInstruction)(nil), "flux.astromesh.v1beta1.FISQueryInstruction")
	proto.RegisterType((*FISQueryInstructionResponse)(nil), "flux.astromesh.v1beta1.FISQueryInstructionResponse")
	proto.RegisterType((*FISQueryRequest)(nil), "flux.astromesh.v1beta1.FISQueryRequest")
	proto.RegisterType((*FISQueryResponse)(nil), "flux.astromesh.v1beta1.FISQueryResponse")
}

func init() {
	proto.RegisterFile("flux/astromesh/v1beta1/query.proto", fileDescriptor_f40df128bda15e7e)
}

var fileDescriptor_f40df128bda15e7e = []byte{
	// 783 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x55, 0x4f, 0x4f, 0x13, 0x41,
	0x14, 0xef, 0xb6, 0x52, 0xe8, 0xd0, 0x00, 0x19, 0xa0, 0xd6, 0x8a, 0x15, 0x57, 0x23, 0x0d, 0xc6,
	0x6e, 0x80, 0x93, 0x70, 0x30, 0x2d, 0x14, 0x25, 0x52, 0x2a, 0x5b, 0x24, 0xd1, 0xc4, 0x34, 0xd3,
	0xdd, 0xb1, 0x5d, 0xd9, 0xee, 0x94, 0x9d, 0x59, 0x03, 0xa9, 0xbd, 0xf8, 0x09, 0x4c, 0x3c, 0xfb,
	0x05, 0xfc, 0x02, 0xc6, 0xab, 0x27, 0x8f, 0x24, 0x5e, 0x3c, 0x1a, 0xf0, 0x83, 0x98, 0x99, 0x9d,
	0x5d, 0x0a, 0x52, 0x8b, 0xde, 0xf6, 0xcd, 0xfb, 0xfd, 0xde, 0xef, 0xf7, 0xde, 0xfc, 0x59, 0xa0,
	0xbe, 0xb2, 0xbd, 0x03, 0x0d, 0x51, 0xe6, 0x92, 0x16, 0xa6, 0x4d, 0xed, 0xcd, 0x42, 0x1d, 0x33,
	0xb4, 0xa0, 0xed, 0x7b, 0xd8, 0x3d, 0xcc, 0xb7, 0x5d, 0xc2, 0x08, 0x4c, 0x71, 0x4c, 0x3e, 0xc4,
	0xe4, 0x25, 0x26, 0x33, 0xd5, 0x20, 0x0d, 0x22, 0x20, 0x1a, 0xff, 0xf2, 0xd1, 0x99, 0xac, 0x41,
	0x68, 0x8b, 0x50, 0xad, 0x8e, 0x28, 0x0e, 0xcb, 0x19, 0xc4, 0x72, 0x64, 0x7e, 0xbe, 0x37, 0x2f,
	0x64, 0x42, 0x54, 0x1b, 0x35, 0x2c, 0x07, 0x31, 0x8b, 0x04, 0xd8, 0x99, 0x06, 0x21, 0x0d, 0x1b,
	0x6b, 0xa8, 0x6d, 0x69, 0xc8, 0x71, 0x08, 0x13, 0x49, 0x2a, 0xb3, 0x37, 0xfb, 0x78, 0x67, 0x07,
	0x12, 0x70, 0xa7, 0x0f, 0xa0, 0x81, 0x1d, 0x4c, 0x2d, 0x59, 0x46, 0xfd, 0xa4, 0x80, 0xe9, 0x6d,
	0xee, 0x63, 0x0d, 0x3b, 0xa4, 0xb5, 0x69, 0x39, 0x7b, 0x3a, 0xde, 0xf7, 0x30, 0x65, 0x70, 0x19,
	0x24, 0xa8, 0x6b, 0xd4, 0xda, 0x36, 0x72, 0x70, 0x5a, 0x99, 0x55, 0x72, 0x63, 0x8b, 0x37, 0xf2,
	0x17, 0x0f, 0x23, 0xff, 0x94, 0x83, 0xf4, 0x11, 0xea, 0x1a, 0xe2, 0x8b, 0x73, 0x4d, 0xca, 0x24,
	0x37, 0x7a, 0x29, 0xae, 0x49, 0x99, 0xcf, 0xbd, 0x06, 0x78, 0x9d, 0x1a, 0x32, 0x4d, 0x37, 0x1d,
	0x9b, 0x55, 0x72, 0x09, 0x7d, 0x98, 0xba, 0x46, 0xc1, 0x34, 0x5d, 0xf5, 0x10, 0xa4, 0xce, 0x7b,
	0xa5, 0x6d, 0xe2, 0x50, 0x41, 0xe2, 0x82, 0x82, 0xa4, 0xf8, 0x24, 0x93, 0x32, 0x4e, 0x82, 0xb7,
	0x40, 0x92, 0xd7, 0x33, 0xb1, 0x61, 0xb5, 0x90, 0x4d, 0x85, 0x9d, 0x21, 0x7d, 0x94, 0xba, 0xc6,
	0x9a, 0x5c, 0xe2, 0x10, 0xce, 0x0e, 0x21, 0x31, 0x1f, 0x62, 0x52, 0x16, 0x40, 0xd4, 0x5d, 0x30,
	0x56, 0x44, 0x36, 0x72, 0x0c, 0x1c, 0xcc, 0x67, 0x0a, 0x0c, 0x9d, 0xce, 0x26, 0xa1, 0xfb, 0x01,
	0x5f, 0x35, 0xb9, 0x3b, 0x21, 0x93, 0xd0, 0xfd, 0x00, 0xa6, 0xc1, 0x30, 0xb7, 0x86, 0x29, 0x0d,
	0x5a, 0x92, 0xa1, 0xfa, 0x10, 0x8c, 0x87, 0x75, 0x65, 0x2f, 0x61, 0x09, 0xa5, 0xb7, 0x44, 0x0a,
	0xc4, 0x51, 0x8b, 0x78, 0x0e, 0x93, 0x95, 0x65, 0xa4, 0x7e, 0x56, 0xc0, 0xe4, 0xfa, 0x46, 0x55,
	0xcc, 0x65, 0xc3, 0xa1, 0xcc, 0xf5, 0x0c, 0x7e, 0x4c, 0xe0, 0x52, 0xaf, 0xbd, 0x81, 0xe3, 0x97,
	0xee, 0x57, 0x40, 0x1c, 0x09, 0xba, 0xdc, 0xb4, 0xdb, 0xfd, 0x58, 0x42, 0xae, 0x20, 0xa0, 0xba,
	0xa4, 0x9c, 0x6f, 0x32, 0x19, 0x36, 0xc9, 0x3b, 0xb2, 0x9c, 0xb6, 0xc7, 0xd2, 0x57, 0x66, 0x63,
	0xb9, 0xa4, 0xee, 0x07, 0xea, 0x6b, 0x70, 0xfd, 0x02, 0xe3, 0xe1, 0x18, 0xfe, 0xab, 0x81, 0x14,
	0x88, 0x13, 0x8f, 0x71, 0xa9, 0xa8, 0x90, 0x92, 0x91, 0x5a, 0x07, 0xe3, 0x81, 0x56, 0xb0, 0x7f,
	0x15, 0x90, 0xb4, 0x4e, 0x65, 0xa9, 0x20, 0x8c, 0x2e, 0xde, 0xeb, 0x27, 0x73, 0x91, 0xd5, 0x33,
	0x05, 0xd4, 0xb7, 0x60, 0xe2, 0x54, 0x43, 0x36, 0xd1, 0x04, 0xd3, 0x3d, 0x98, 0x9a, 0x2b, 0xd7,
	0x69, 0x5a, 0x11, 0x6a, 0x4b, 0xff, 0xa2, 0x26, 0xb9, 0xfa, 0x94, 0xf5, 0xe7, 0x22, 0x9d, 0xd7,
	0xc1, 0x68, 0xcf, 0xa6, 0xc0, 0x24, 0x18, 0xd9, 0x2d, 0xd7, 0xb6, 0x9f, 0x95, 0xf4, 0xe7, 0x13,
	0x11, 0x78, 0x15, 0x4c, 0xae, 0x56, 0xaa, 0xe5, 0x4a, 0xb5, 0x56, 0x2c, 0x6c, 0x3d, 0xa9, 0x15,
	0x0b, 0x9b, 0x85, 0xad, 0xd5, 0xd2, 0x84, 0x02, 0x67, 0x40, 0x5a, 0x26, 0x0a, 0xd5, 0x1d, 0xbd,
	0x52, 0x2e, 0x55, 0x1f, 0x87, 0xd9, 0xe8, 0xe2, 0xd7, 0x18, 0x18, 0x12, 0x45, 0xe1, 0x17, 0x05,
	0x24, 0xc2, 0x5b, 0x07, 0xef, 0xff, 0xf5, 0x58, 0x9c, 0x7f, 0x49, 0x32, 0xf9, 0xcb, 0xc2, 0xfd,
	0x5e, 0xd4, 0xf2, 0xbb, 0xef, 0xbf, 0x3e, 0x44, 0x1f, 0xc1, 0x92, 0xd6, 0xe7, 0x09, 0x13, 0x37,
	0xa2, 0x66, 0x5b, 0xce, 0x9e, 0xd6, 0x09, 0xdf, 0xa8, 0xae, 0xd6, 0x09, 0xdf, 0x9c, 0xae, 0xbf,
	0xce, 0xcf, 0x5f, 0x17, 0x7e, 0x54, 0xc0, 0xb0, 0xbc, 0x63, 0xf0, 0x6e, 0x3f, 0x2b, 0x67, 0x2f,
	0x77, 0x66, 0x6e, 0x20, 0x4e, 0x7a, 0x2d, 0x08, 0xaf, 0x2b, 0xf0, 0x41, 0x3f, 0xaf, 0x75, 0x9f,
	0xa0, 0x75, 0x42, 0x93, 0xdc, 0x7c, 0x57, 0xeb, 0xc8, 0xcb, 0xd1, 0x85, 0x2f, 0xc1, 0x48, 0xb0,
	0xdd, 0x70, 0x6e, 0xd0, 0x81, 0x08, 0x0c, 0xe6, 0x06, 0x03, 0x7d, 0x87, 0xc5, 0x9d, 0x6f, 0xc7,
	0x59, 0xe5, 0xe8, 0x38, 0xab, 0xfc, 0x3c, 0xce, 0x2a, 0xef, 0x4f, 0xb2, 0x91, 0xa3, 0x93, 0x6c,
	0xe4, 0xc7, 0x49, 0x36, 0xf2, 0x62, 0xb9, 0x61, 0xb1, 0xa6, 0x57, 0xcf, 0x1b, 0xa4, 0xa5, 0xad,
	0xdb, 0xde, 0xc1, 0xd6, 0xfa, 0xce, 0x26, 0xaa, 0x53, 0xd1, 0x89, 0xa9, 0x19, 0x4d, 0x64, 0x39,
	0x5a, 0x8b, 0x98, 0x9e, 0x8d, 0x69, 0x4f, 0x63, 0xec, 0xb0, 0x8d, 0x69, 0x3d, 0x2e, 0x7e, 0x1f,
	0x4b, 0xbf, 0x03, 0x00, 0x00, 0xff, 0xff, 0xc3, 0x6a, 0x4c, 0x0d, 0x43, 0x07, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	DenomLink(ctx context.Context, in *QueryDenomLinkRequest, opts ...grpc.CallOption) (*QueryDenomLinkResponse, error)
	Balance(ctx context.Context, in *BalanceRequest, opts ...grpc.CallOption) (*BalanceResponse, error)
	FISQuery(ctx context.Context, in *FISQueryRequest, opts ...grpc.CallOption) (*FISQueryResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) DenomLink(ctx context.Context, in *QueryDenomLinkRequest, opts ...grpc.CallOption) (*QueryDenomLinkResponse, error) {
	out := new(QueryDenomLinkResponse)
	err := c.cc.Invoke(ctx, "/flux.astromesh.v1beta1.Query/DenomLink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Balance(ctx context.Context, in *BalanceRequest, opts ...grpc.CallOption) (*BalanceResponse, error) {
	out := new(BalanceResponse)
	err := c.cc.Invoke(ctx, "/flux.astromesh.v1beta1.Query/Balance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) FISQuery(ctx context.Context, in *FISQueryRequest, opts ...grpc.CallOption) (*FISQueryResponse, error) {
	out := new(FISQueryResponse)
	err := c.cc.Invoke(ctx, "/flux.astromesh.v1beta1.Query/FISQuery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	DenomLink(context.Context, *QueryDenomLinkRequest) (*QueryDenomLinkResponse, error)
	Balance(context.Context, *BalanceRequest) (*BalanceResponse, error)
	FISQuery(context.Context, *FISQueryRequest) (*FISQueryResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) DenomLink(ctx context.Context, req *QueryDenomLinkRequest) (*QueryDenomLinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DenomLink not implemented")
}
func (*UnimplementedQueryServer) Balance(ctx context.Context, req *BalanceRequest) (*BalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Balance not implemented")
}
func (*UnimplementedQueryServer) FISQuery(ctx context.Context, req *FISQueryRequest) (*FISQueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FISQuery not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_DenomLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDenomLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DenomLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flux.astromesh.v1beta1.Query/DenomLink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DenomLink(ctx, req.(*QueryDenomLinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Balance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Balance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flux.astromesh.v1beta1.Query/Balance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Balance(ctx, req.(*BalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_FISQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FISQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).FISQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flux.astromesh.v1beta1.Query/FISQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).FISQuery(ctx, req.(*FISQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "flux.astromesh.v1beta1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DenomLink",
			Handler:    _Query_DenomLink_Handler,
		},
		{
			MethodName: "Balance",
			Handler:    _Query_Balance_Handler,
		},
		{
			MethodName: "FISQuery",
			Handler:    _Query_FISQuery_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "flux/astromesh/v1beta1/query.proto",
}

func (m *QueryDenomLinkRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDenomLinkRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDenomLinkRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SrcAddr) > 0 {
		i -= len(m.SrcAddr)
		copy(dAtA[i:], m.SrcAddr)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SrcAddr)))
		i--
		dAtA[i] = 0x1a
	}
	if m.DstPlane != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.DstPlane))
		i--
		dAtA[i] = 0x10
	}
	if m.SrcPlane != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.SrcPlane))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryDenomLinkResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDenomLinkResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDenomLinkResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DstDecimals != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.DstDecimals))
		i--
		dAtA[i] = 0x18
	}
	if m.SrcDecimals != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.SrcDecimals))
		i--
		dAtA[i] = 0x10
	}
	if len(m.DstAddr) > 0 {
		i -= len(m.DstAddr)
		copy(dAtA[i:], m.DstAddr)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.DstAddr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BalanceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BalanceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BalanceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Plane) > 0 {
		i -= len(m.Plane)
		copy(dAtA[i:], m.Plane)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Plane)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BalanceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BalanceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BalanceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Amount) > 0 {
		i -= len(m.Amount)
		copy(dAtA[i:], m.Amount)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Amount)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FISQueryInstruction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FISQueryInstruction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FISQueryInstruction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Input) > 0 {
		for iNdEx := len(m.Input) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Input[iNdEx])
			copy(dAtA[i:], m.Input[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.Input[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Action != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Action))
		i--
		dAtA[i] = 0x10
	}
	if m.Plane != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Plane))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *FISQueryInstructionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FISQueryInstructionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FISQueryInstructionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Output) > 0 {
		for iNdEx := len(m.Output) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Output[iNdEx])
			copy(dAtA[i:], m.Output[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.Output[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Plane != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Plane))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *FISQueryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FISQueryRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FISQueryRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Instructions) > 0 {
		for iNdEx := len(m.Instructions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Instructions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	return len(dAtA) - i, nil
}

func (m *FISQueryResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FISQueryResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FISQueryResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.InstructionResponses) > 0 {
		for iNdEx := len(m.InstructionResponses) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.InstructionResponses[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryDenomLinkRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SrcPlane != 0 {
		n += 1 + sovQuery(uint64(m.SrcPlane))
	}
	if m.DstPlane != 0 {
		n += 1 + sovQuery(uint64(m.DstPlane))
	}
	l = len(m.SrcAddr)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDenomLinkResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DstAddr)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.SrcDecimals != 0 {
		n += 1 + sovQuery(uint64(m.SrcDecimals))
	}
	if m.DstDecimals != 0 {
		n += 1 + sovQuery(uint64(m.DstDecimals))
	}
	return n
}

func (m *BalanceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Plane)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *BalanceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Amount)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *FISQueryInstruction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Plane != 0 {
		n += 1 + sovQuery(uint64(m.Plane))
	}
	if m.Action != 0 {
		n += 1 + sovQuery(uint64(m.Action))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if len(m.Input) > 0 {
		for _, b := range m.Input {
			l = len(b)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *FISQueryInstructionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Plane != 0 {
		n += 1 + sovQuery(uint64(m.Plane))
	}
	if len(m.Output) > 0 {
		for _, b := range m.Output {
			l = len(b)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *FISQueryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Instructions) > 0 {
		for _, e := range m.Instructions {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *FISQueryResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.InstructionResponses) > 0 {
		for _, e := range m.InstructionResponses {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryDenomLinkRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDenomLinkRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDenomLinkRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcPlane", wireType)
			}
			m.SrcPlane = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SrcPlane |= Plane(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DstPlane", wireType)
			}
			m.DstPlane = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DstPlane |= Plane(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SrcAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDenomLinkResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDenomLinkResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDenomLinkResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DstAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DstAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcDecimals", wireType)
			}
			m.SrcDecimals = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SrcDecimals |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DstDecimals", wireType)
			}
			m.DstDecimals = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DstDecimals |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BalanceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BalanceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BalanceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Plane", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Plane = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BalanceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BalanceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BalanceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FISQueryInstruction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FISQueryInstruction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FISQueryInstruction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Plane", wireType)
			}
			m.Plane = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Plane |= Plane(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			m.Action = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Action |= QueryAction(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = append(m.Address[:0], dAtA[iNdEx:postIndex]...)
			if m.Address == nil {
				m.Address = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Input", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Input = append(m.Input, make([]byte, postIndex-iNdEx))
			copy(m.Input[len(m.Input)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FISQueryInstructionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FISQueryInstructionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FISQueryInstructionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Plane", wireType)
			}
			m.Plane = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Plane |= Plane(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Output", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Output = append(m.Output, make([]byte, postIndex-iNdEx))
			copy(m.Output[len(m.Output)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FISQueryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FISQueryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FISQueryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Instructions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Instructions = append(m.Instructions, &FISQueryInstruction{})
			if err := m.Instructions[len(m.Instructions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FISQueryResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FISQueryResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FISQueryResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstructionResponses", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InstructionResponses = append(m.InstructionResponses, &FISQueryInstructionResponse{})
			if err := m.InstructionResponses[len(m.InstructionResponses)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
