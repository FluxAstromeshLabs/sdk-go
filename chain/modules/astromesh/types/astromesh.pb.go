// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: flux/astromesh/v1beta1/astromesh.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/codec/types"
	_ "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type LinkInfo struct {
	Denom       []byte `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
	SrcDecimals int32  `protobuf:"varint,2,opt,name=src_decimals,json=srcDecimals,proto3" json:"src_decimals,omitempty"`
	DstDecimals int32  `protobuf:"varint,3,opt,name=dst_decimals,json=dstDecimals,proto3" json:"dst_decimals,omitempty"`
}

func (m *LinkInfo) Reset()         { *m = LinkInfo{} }
func (m *LinkInfo) String() string { return proto.CompactTextString(m) }
func (*LinkInfo) ProtoMessage()    {}
func (*LinkInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d203ee5aed48627d, []int{0}
}
func (m *LinkInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LinkInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LinkInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LinkInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LinkInfo.Merge(m, src)
}
func (m *LinkInfo) XXX_Size() int {
	return m.Size()
}
func (m *LinkInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_LinkInfo.DiscardUnknown(m)
}

var xxx_messageInfo_LinkInfo proto.InternalMessageInfo

func (m *LinkInfo) GetDenom() []byte {
	if m != nil {
		return m.Denom
	}
	return nil
}

func (m *LinkInfo) GetSrcDecimals() int32 {
	if m != nil {
		return m.SrcDecimals
	}
	return 0
}

func (m *LinkInfo) GetDstDecimals() int32 {
	if m != nil {
		return m.DstDecimals
	}
	return 0
}

func init() {
	proto.RegisterType((*LinkInfo)(nil), "flux.astromesh.v1beta1.LinkInfo")
}

func init() {
	proto.RegisterFile("flux/astromesh/v1beta1/astromesh.proto", fileDescriptor_d203ee5aed48627d)
}

var fileDescriptor_d203ee5aed48627d = []byte{
	// 276 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x90, 0x3d, 0x4b, 0x03, 0x41,
	0x10, 0x86, 0xb3, 0x4a, 0x44, 0xce, 0x54, 0x47, 0x90, 0x24, 0xc5, 0x12, 0x2d, 0x24, 0xd5, 0x2d,
	0xc1, 0xce, 0x52, 0x24, 0x20, 0x04, 0x8b, 0x90, 0xca, 0x26, 0xec, 0xd7, 0x7d, 0xe0, 0xed, 0x4e,
	0xb8, 0xd9, 0x93, 0xe4, 0x5f, 0xf8, 0xb3, 0x2c, 0x53, 0x5a, 0xca, 0xdd, 0x1f, 0x91, 0xbb, 0x3d,
	0x3d, 0xbb, 0x79, 0x9f, 0xf7, 0x59, 0xd8, 0x99, 0xe0, 0x2e, 0xce, 0xcb, 0x03, 0xe3, 0xe8, 0x0a,
	0x30, 0x1a, 0x53, 0xf6, 0xbe, 0x14, 0xda, 0xf1, 0x65, 0x4f, 0xa2, 0x7d, 0x01, 0x0e, 0xc2, 0xeb,
	0xc6, 0x8b, 0x7a, 0xda, 0x79, 0xb3, 0x69, 0x02, 0x90, 0xe4, 0x9a, 0xb5, 0x96, 0x28, 0x63, 0xc6,
	0xed, 0xd1, 0x3f, 0x99, 0x8d, 0x13, 0x48, 0xa0, 0x1d, 0x59, 0x33, 0x75, 0x74, 0x2a, 0x01, 0x0d,
	0xe0, 0xce, 0x17, 0x3e, 0x74, 0x15, 0xf5, 0x89, 0x09, 0x8e, 0xfa, 0xef, 0x23, 0x12, 0x32, 0xeb,
	0xfb, 0xdb, 0x38, 0xb8, 0x5c, 0x67, 0xf6, 0xed, 0xd9, 0xc6, 0x10, 0x8e, 0x83, 0xa1, 0xd2, 0x16,
	0xcc, 0x84, 0xcc, 0xc9, 0x62, 0xb4, 0xf1, 0x21, 0xbc, 0x09, 0x46, 0x58, 0xc8, 0x9d, 0xd2, 0x32,
	0x33, 0x3c, 0xc7, 0xc9, 0xd9, 0x9c, 0x2c, 0x86, 0x9b, 0x2b, 0x2c, 0xe4, 0x53, 0x87, 0x1a, 0x45,
	0xa1, 0xeb, 0x95, 0x73, 0xaf, 0x28, 0x74, 0xbf, 0xca, 0xe3, 0xf6, 0xb3, 0xa2, 0xe4, 0x54, 0x51,
	0xf2, 0x5d, 0x51, 0xf2, 0x51, 0xd3, 0xc1, 0xa9, 0xa6, 0x83, 0xaf, 0x9a, 0x0e, 0x5e, 0x1f, 0x92,
	0xcc, 0xa5, 0xa5, 0x88, 0x24, 0x18, 0xb6, 0xca, 0xcb, 0xc3, 0xcb, 0x6a, 0xbb, 0xe6, 0x02, 0x59,
	0x73, 0x1c, 0xc5, 0x64, 0xca, 0x33, 0xcb, 0x0c, 0xa8, 0x32, 0xd7, 0xf8, 0xef, 0xa6, 0xee, 0xb8,
	0xd7, 0x28, 0x2e, 0xda, 0x25, 0xee, 0x7f, 0x02, 0x00, 0x00, 0xff, 0xff, 0x89, 0x85, 0xd9, 0xb8,
	0x72, 0x01, 0x00, 0x00,
}

func (m *LinkInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LinkInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LinkInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DstDecimals != 0 {
		i = encodeVarintAstromesh(dAtA, i, uint64(m.DstDecimals))
		i--
		dAtA[i] = 0x18
	}
	if m.SrcDecimals != 0 {
		i = encodeVarintAstromesh(dAtA, i, uint64(m.SrcDecimals))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintAstromesh(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintAstromesh(dAtA []byte, offset int, v uint64) int {
	offset -= sovAstromesh(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *LinkInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovAstromesh(uint64(l))
	}
	if m.SrcDecimals != 0 {
		n += 1 + sovAstromesh(uint64(m.SrcDecimals))
	}
	if m.DstDecimals != 0 {
		n += 1 + sovAstromesh(uint64(m.DstDecimals))
	}
	return n
}

func sovAstromesh(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAstromesh(x uint64) (n int) {
	return sovAstromesh(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *LinkInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAstromesh
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LinkInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LinkInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAstromesh
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAstromesh
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAstromesh
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = append(m.Denom[:0], dAtA[iNdEx:postIndex]...)
			if m.Denom == nil {
				m.Denom = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcDecimals", wireType)
			}
			m.SrcDecimals = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAstromesh
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SrcDecimals |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DstDecimals", wireType)
			}
			m.DstDecimals = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAstromesh
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DstDecimals |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAstromesh(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAstromesh
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAstromesh(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAstromesh
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAstromesh
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAstromesh
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAstromesh
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAstromesh
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAstromesh
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAstromesh        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAstromesh          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAstromesh = fmt.Errorf("proto: unexpected end of group")
)
