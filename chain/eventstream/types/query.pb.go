// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: flux/eventstream/v1beta1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/FluxNFTLabs/sdk-go/chain/modules/bazaar/types"
	_ "github.com/FluxNFTLabs/sdk-go/chain/modules/fnft/types"
	types1 "github.com/cometbft/cometbft/abci/types"
	types2 "github.com/cometbft/cometbft/proto/tendermint/types"
	types "github.com/cosmos/cosmos-sdk/codec/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// WARNING: always append to bottom or you will mess up indexer logic
type Op int32

const (
	// COSMOS event default op
	Op_COSMOS_SET Op = 0
	// FNFT
	Op_FNFTUpdateClass        Op = 100
	Op_FNFTCreate             Op = 101
	Op_FNFTPurchaseShares     Op = 102
	Op_FNFTSponsor            Op = 103
	Op_FNFTUpdateRevenue      Op = 104
	Op_FNFTISO                Op = 105
	Op_FNFTDividend           Op = 106
	Op_FNFTUpdateHolderCount  Op = 107
	Op_FNFTUpdateProductCount Op = 108
	Op_FNFTUpdateHolder       Op = 109
	Op_FNFTDeleteHolder       Op = 110
	// BAZAAR
	// product events
	Op_BazaarCreateProduct    Op = 200
	Op_BazaarPurchaseOffering Op = 201
	Op_BazaarVerifyProduct    Op = 202
	// EVM
	Op_EvmDeployContract Op = 3000
	Op_EvmExecute        Op = 3001
	Op_EvmEmitLog        Op = 3002
	// SVM
	Op_SvmExecute       Op = 4000
	Op_SvmAccUpdate     Op = 4001
	Op_SvmAccLinkCreate Op = 4002
	// astromesh
	Op_AstromeshBalanceSet     Op = 5000
	Op_AstromeshBalanceDiff    Op = 5001
	Op_AstromeshMetadataUpdate Op = 5002
	// strategy
	Op_StrategyDeploy  Op = 6000
	Op_StrategyUpdate  Op = 6001
	Op_StrategyTrigger Op = 60002
	// wasm
	Op_WasmEventEmitted Op = 7000
	// tx
	Op_NewTxs   Op = 8000
	Op_NewBlock Op = 8001
	// oracle
	Op_OracleSimpleUpdate Op = 9000
	// pool
	Op_PoolCreated  Op = 10000
	Op_PoolUpdated  Op = 10001
	Op_PoolDeposit  Op = 10002
	Op_PoolWithdraw Op = 10003
)

var Op_name = map[int32]string{
	0:     "COSMOS_SET",
	100:   "FNFTUpdateClass",
	101:   "FNFTCreate",
	102:   "FNFTPurchaseShares",
	103:   "FNFTSponsor",
	104:   "FNFTUpdateRevenue",
	105:   "FNFTISO",
	106:   "FNFTDividend",
	107:   "FNFTUpdateHolderCount",
	108:   "FNFTUpdateProductCount",
	109:   "FNFTUpdateHolder",
	110:   "FNFTDeleteHolder",
	200:   "BazaarCreateProduct",
	201:   "BazaarPurchaseOffering",
	202:   "BazaarVerifyProduct",
	3000:  "EvmDeployContract",
	3001:  "EvmExecute",
	3002:  "EvmEmitLog",
	4000:  "SvmExecute",
	4001:  "SvmAccUpdate",
	4002:  "SvmAccLinkCreate",
	5000:  "AstromeshBalanceSet",
	5001:  "AstromeshBalanceDiff",
	5002:  "AstromeshMetadataUpdate",
	6000:  "StrategyDeploy",
	6001:  "StrategyUpdate",
	60002: "StrategyTrigger",
	7000:  "WasmEventEmitted",
	8000:  "NewTxs",
	8001:  "NewBlock",
	9000:  "OracleSimpleUpdate",
	10000: "PoolCreated",
	10001: "PoolUpdated",
	10002: "PoolDeposit",
	10003: "PoolWithdraw",
}

var Op_value = map[string]int32{
	"COSMOS_SET":              0,
	"FNFTUpdateClass":         100,
	"FNFTCreate":              101,
	"FNFTPurchaseShares":      102,
	"FNFTSponsor":             103,
	"FNFTUpdateRevenue":       104,
	"FNFTISO":                 105,
	"FNFTDividend":            106,
	"FNFTUpdateHolderCount":   107,
	"FNFTUpdateProductCount":  108,
	"FNFTUpdateHolder":        109,
	"FNFTDeleteHolder":        110,
	"BazaarCreateProduct":     200,
	"BazaarPurchaseOffering":  201,
	"BazaarVerifyProduct":     202,
	"EvmDeployContract":       3000,
	"EvmExecute":              3001,
	"EvmEmitLog":              3002,
	"SvmExecute":              4000,
	"SvmAccUpdate":            4001,
	"SvmAccLinkCreate":        4002,
	"AstromeshBalanceSet":     5000,
	"AstromeshBalanceDiff":    5001,
	"AstromeshMetadataUpdate": 5002,
	"StrategyDeploy":          6000,
	"StrategyUpdate":          6001,
	"StrategyTrigger":         60002,
	"WasmEventEmitted":        7000,
	"NewTxs":                  8000,
	"NewBlock":                8001,
	"OracleSimpleUpdate":      9000,
	"PoolCreated":             10000,
	"PoolUpdated":             10001,
	"PoolDeposit":             10002,
	"PoolWithdraw":            10003,
}

func (x Op) String() string {
	return proto.EnumName(Op_name, int32(x))
}

func (Op) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d426599a928f18a7, []int{0}
}

type EventsRequest struct {
	Height    uint64   `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
	Modules   []string `protobuf:"bytes,2,rep,name=modules,proto3" json:"modules,omitempty"`
	TmQueries []string `protobuf:"bytes,3,rep,name=tm_queries,json=tmQueries,proto3" json:"tm_queries,omitempty"`
}

func (m *EventsRequest) Reset()         { *m = EventsRequest{} }
func (m *EventsRequest) String() string { return proto.CompactTextString(m) }
func (*EventsRequest) ProtoMessage()    {}
func (*EventsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d426599a928f18a7, []int{0}
}
func (m *EventsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventsRequest.Merge(m, src)
}
func (m *EventsRequest) XXX_Size() int {
	return m.Size()
}
func (m *EventsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EventsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EventsRequest proto.InternalMessageInfo

func (m *EventsRequest) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *EventsRequest) GetModules() []string {
	if m != nil {
		return m.Modules
	}
	return nil
}

func (m *EventsRequest) GetTmQueries() []string {
	if m != nil {
		return m.TmQueries
	}
	return nil
}

type EventsResponse struct {
	Height    uint64          `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
	Time      uint64          `protobuf:"varint,2,opt,name=time,proto3" json:"time,omitempty"`
	Modules   []string        `protobuf:"bytes,3,rep,name=modules,proto3" json:"modules,omitempty"`
	Events    []*ModuleEvents `protobuf:"bytes,4,rep,name=events,proto3" json:"events,omitempty"`
	TmQueries []string        `protobuf:"bytes,5,rep,name=tm_queries,json=tmQueries,proto3" json:"tm_queries,omitempty"`
	TmData    []string        `protobuf:"bytes,6,rep,name=tm_data,json=tmData,proto3" json:"tm_data,omitempty"`
}

func (m *EventsResponse) Reset()         { *m = EventsResponse{} }
func (m *EventsResponse) String() string { return proto.CompactTextString(m) }
func (*EventsResponse) ProtoMessage()    {}
func (*EventsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d426599a928f18a7, []int{1}
}
func (m *EventsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventsResponse.Merge(m, src)
}
func (m *EventsResponse) XXX_Size() int {
	return m.Size()
}
func (m *EventsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_EventsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_EventsResponse proto.InternalMessageInfo

func (m *EventsResponse) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *EventsResponse) GetTime() uint64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *EventsResponse) GetModules() []string {
	if m != nil {
		return m.Modules
	}
	return nil
}

func (m *EventsResponse) GetEvents() []*ModuleEvents {
	if m != nil {
		return m.Events
	}
	return nil
}

func (m *EventsResponse) GetTmQueries() []string {
	if m != nil {
		return m.TmQueries
	}
	return nil
}

func (m *EventsResponse) GetTmData() []string {
	if m != nil {
		return m.TmData
	}
	return nil
}

type ModuleEvents struct {
	AnyEvents []*AnyEvent `protobuf:"bytes,1,rep,name=any_events,json=anyEvents,proto3" json:"any_events,omitempty"`
}

func (m *ModuleEvents) Reset()         { *m = ModuleEvents{} }
func (m *ModuleEvents) String() string { return proto.CompactTextString(m) }
func (*ModuleEvents) ProtoMessage()    {}
func (*ModuleEvents) Descriptor() ([]byte, []int) {
	return fileDescriptor_d426599a928f18a7, []int{2}
}
func (m *ModuleEvents) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ModuleEvents) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ModuleEvents.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ModuleEvents) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ModuleEvents.Merge(m, src)
}
func (m *ModuleEvents) XXX_Size() int {
	return m.Size()
}
func (m *ModuleEvents) XXX_DiscardUnknown() {
	xxx_messageInfo_ModuleEvents.DiscardUnknown(m)
}

var xxx_messageInfo_ModuleEvents proto.InternalMessageInfo

func (m *ModuleEvents) GetAnyEvents() []*AnyEvent {
	if m != nil {
		return m.AnyEvents
	}
	return nil
}

type AnyEvent struct {
	Module string     `protobuf:"bytes,2,opt,name=module,proto3" json:"module,omitempty"`
	Data   *types.Any `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *AnyEvent) Reset()         { *m = AnyEvent{} }
func (m *AnyEvent) String() string { return proto.CompactTextString(m) }
func (*AnyEvent) ProtoMessage()    {}
func (*AnyEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_d426599a928f18a7, []int{3}
}
func (m *AnyEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AnyEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AnyEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AnyEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AnyEvent.Merge(m, src)
}
func (m *AnyEvent) XXX_Size() int {
	return m.Size()
}
func (m *AnyEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_AnyEvent.DiscardUnknown(m)
}

var xxx_messageInfo_AnyEvent proto.InternalMessageInfo

func (m *AnyEvent) GetModule() string {
	if m != nil {
		return m.Module
	}
	return ""
}

func (m *AnyEvent) GetData() *types.Any {
	if m != nil {
		return m.Data
	}
	return nil
}

type SyncStatus struct {
	LastBlock      uint64 `protobuf:"varint,1,opt,name=last_block,json=lastBlock,proto3" json:"last_block,omitempty"`
	LastBlockTime  int64  `protobuf:"varint,2,opt,name=last_block_time,json=lastBlockTime,proto3" json:"last_block_time,omitempty"`
	UpdatedAt      int64  `protobuf:"varint,3,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	CurrentVersion string `protobuf:"bytes,4,opt,name=current_version,json=currentVersion,proto3" json:"current_version,omitempty"`
}

func (m *SyncStatus) Reset()         { *m = SyncStatus{} }
func (m *SyncStatus) String() string { return proto.CompactTextString(m) }
func (*SyncStatus) ProtoMessage()    {}
func (*SyncStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_d426599a928f18a7, []int{4}
}
func (m *SyncStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SyncStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SyncStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SyncStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SyncStatus.Merge(m, src)
}
func (m *SyncStatus) XXX_Size() int {
	return m.Size()
}
func (m *SyncStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_SyncStatus.DiscardUnknown(m)
}

var xxx_messageInfo_SyncStatus proto.InternalMessageInfo

func (m *SyncStatus) GetLastBlock() uint64 {
	if m != nil {
		return m.LastBlock
	}
	return 0
}

func (m *SyncStatus) GetLastBlockTime() int64 {
	if m != nil {
		return m.LastBlockTime
	}
	return 0
}

func (m *SyncStatus) GetUpdatedAt() int64 {
	if m != nil {
		return m.UpdatedAt
	}
	return 0
}

func (m *SyncStatus) GetCurrentVersion() string {
	if m != nil {
		return m.CurrentVersion
	}
	return ""
}

type NewTxsEvent struct {
	Op        Op                     `protobuf:"varint,1,opt,name=op,proto3,enum=flux.eventstream.v1beta1.Op" json:"op,omitempty"`
	Txs       [][]byte               `protobuf:"bytes,2,rep,name=txs,proto3" json:"txs,omitempty"`
	TxResults []*types1.ExecTxResult `protobuf:"bytes,3,rep,name=tx_results,json=txResults,proto3" json:"tx_results,omitempty"`
}

func (m *NewTxsEvent) Reset()         { *m = NewTxsEvent{} }
func (m *NewTxsEvent) String() string { return proto.CompactTextString(m) }
func (*NewTxsEvent) ProtoMessage()    {}
func (*NewTxsEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_d426599a928f18a7, []int{5}
}
func (m *NewTxsEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NewTxsEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NewTxsEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NewTxsEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewTxsEvent.Merge(m, src)
}
func (m *NewTxsEvent) XXX_Size() int {
	return m.Size()
}
func (m *NewTxsEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_NewTxsEvent.DiscardUnknown(m)
}

var xxx_messageInfo_NewTxsEvent proto.InternalMessageInfo

func (m *NewTxsEvent) GetOp() Op {
	if m != nil {
		return m.Op
	}
	return Op_COSMOS_SET
}

func (m *NewTxsEvent) GetTxs() [][]byte {
	if m != nil {
		return m.Txs
	}
	return nil
}

func (m *NewTxsEvent) GetTxResults() []*types1.ExecTxResult {
	if m != nil {
		return m.TxResults
	}
	return nil
}

type Block struct {
	BlockId *types2.BlockID `protobuf:"bytes,1,opt,name=block_id,json=blockId,proto3" json:"block_id,omitempty"`
	Block   *types2.Block   `protobuf:"bytes,2,opt,name=block,proto3" json:"block,omitempty"`
}

func (m *Block) Reset()         { *m = Block{} }
func (m *Block) String() string { return proto.CompactTextString(m) }
func (*Block) ProtoMessage()    {}
func (*Block) Descriptor() ([]byte, []int) {
	return fileDescriptor_d426599a928f18a7, []int{6}
}
func (m *Block) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Block) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Block.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Block) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Block.Merge(m, src)
}
func (m *Block) XXX_Size() int {
	return m.Size()
}
func (m *Block) XXX_DiscardUnknown() {
	xxx_messageInfo_Block.DiscardUnknown(m)
}

var xxx_messageInfo_Block proto.InternalMessageInfo

func (m *Block) GetBlockId() *types2.BlockID {
	if m != nil {
		return m.BlockId
	}
	return nil
}

func (m *Block) GetBlock() *types2.Block {
	if m != nil {
		return m.Block
	}
	return nil
}

type NewBlockEvent struct {
	Op    Op     `protobuf:"varint,1,opt,name=op,proto3,enum=flux.eventstream.v1beta1.Op" json:"op,omitempty"`
	Block *Block `protobuf:"bytes,2,opt,name=block,proto3" json:"block,omitempty"`
}

func (m *NewBlockEvent) Reset()         { *m = NewBlockEvent{} }
func (m *NewBlockEvent) String() string { return proto.CompactTextString(m) }
func (*NewBlockEvent) ProtoMessage()    {}
func (*NewBlockEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_d426599a928f18a7, []int{7}
}
func (m *NewBlockEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NewBlockEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NewBlockEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NewBlockEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewBlockEvent.Merge(m, src)
}
func (m *NewBlockEvent) XXX_Size() int {
	return m.Size()
}
func (m *NewBlockEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_NewBlockEvent.DiscardUnknown(m)
}

var xxx_messageInfo_NewBlockEvent proto.InternalMessageInfo

func (m *NewBlockEvent) GetOp() Op {
	if m != nil {
		return m.Op
	}
	return Op_COSMOS_SET
}

func (m *NewBlockEvent) GetBlock() *Block {
	if m != nil {
		return m.Block
	}
	return nil
}

type WasmEvent struct {
	Attributes []types1.EventAttribute `protobuf:"bytes,1,rep,name=attributes,proto3" json:"attributes"`
}

func (m *WasmEvent) Reset()         { *m = WasmEvent{} }
func (m *WasmEvent) String() string { return proto.CompactTextString(m) }
func (*WasmEvent) ProtoMessage()    {}
func (*WasmEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_d426599a928f18a7, []int{8}
}
func (m *WasmEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WasmEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WasmEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WasmEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WasmEvent.Merge(m, src)
}
func (m *WasmEvent) XXX_Size() int {
	return m.Size()
}
func (m *WasmEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_WasmEvent.DiscardUnknown(m)
}

var xxx_messageInfo_WasmEvent proto.InternalMessageInfo

func (m *WasmEvent) GetAttributes() []types1.EventAttribute {
	if m != nil {
		return m.Attributes
	}
	return nil
}

func init() {
	proto.RegisterEnum("flux.eventstream.v1beta1.Op", Op_name, Op_value)
	proto.RegisterType((*EventsRequest)(nil), "flux.eventstream.v1beta1.EventsRequest")
	proto.RegisterType((*EventsResponse)(nil), "flux.eventstream.v1beta1.EventsResponse")
	proto.RegisterType((*ModuleEvents)(nil), "flux.eventstream.v1beta1.ModuleEvents")
	proto.RegisterType((*AnyEvent)(nil), "flux.eventstream.v1beta1.AnyEvent")
	proto.RegisterType((*SyncStatus)(nil), "flux.eventstream.v1beta1.SyncStatus")
	proto.RegisterType((*NewTxsEvent)(nil), "flux.eventstream.v1beta1.NewTxsEvent")
	proto.RegisterType((*Block)(nil), "flux.eventstream.v1beta1.Block")
	proto.RegisterType((*NewBlockEvent)(nil), "flux.eventstream.v1beta1.NewBlockEvent")
	proto.RegisterType((*WasmEvent)(nil), "flux.eventstream.v1beta1.WasmEvent")
}

func init() {
	proto.RegisterFile("flux/eventstream/v1beta1/query.proto", fileDescriptor_d426599a928f18a7)
}

var fileDescriptor_d426599a928f18a7 = []byte{
	// 1263 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x56, 0xcb, 0x6f, 0x1b, 0x45,
	0x18, 0xcf, 0xda, 0x79, 0xd4, 0x9f, 0xf3, 0x98, 0x4e, 0xf3, 0x70, 0xd2, 0x34, 0x09, 0x16, 0x6a,
	0x22, 0x04, 0x5e, 0x1a, 0x0a, 0x17, 0xa0, 0x52, 0x62, 0x27, 0x10, 0x29, 0xb5, 0xdb, 0x5d, 0xd3,
	0x4a, 0x5c, 0xcc, 0x78, 0x77, 0x6c, 0x2f, 0xdd, 0xdd, 0x71, 0x77, 0x67, 0x5d, 0x9b, 0xaa, 0x17,
	0x4e, 0x3c, 0x2e, 0x85, 0x1e, 0xb9, 0xf0, 0xb8, 0x70, 0xe2, 0x0c, 0x9c, 0xe0, 0x56, 0x38, 0xa0,
	0x4a, 0x70, 0xe8, 0xa9, 0x42, 0x29, 0x27, 0x4e, 0xf0, 0x1f, 0xa0, 0x99, 0xd9, 0xb5, 0x9d, 0x80,
	0x55, 0x84, 0xc4, 0x6d, 0xe6, 0xf7, 0xfb, 0x7d, 0xf3, 0xfd, 0xbe, 0x6f, 0xe7, 0xb1, 0xf0, 0x74,
	0xc3, 0x8d, 0xba, 0x3a, 0xed, 0x50, 0x9f, 0x87, 0x3c, 0xa0, 0xc4, 0xd3, 0x3b, 0x17, 0xea, 0x94,
	0x93, 0x0b, 0xfa, 0xcd, 0x88, 0x06, 0xbd, 0x42, 0x3b, 0x60, 0x9c, 0xe1, 0x9c, 0x50, 0x15, 0x86,
	0x54, 0x85, 0x58, 0xb5, 0xb2, 0xdc, 0x64, 0xac, 0xe9, 0x52, 0x5d, 0xea, 0xea, 0x51, 0x43, 0x27,
	0x7e, 0x1c, 0xb4, 0xb2, 0x1a, 0x53, 0xa4, 0xed, 0xe8, 0xc4, 0xf7, 0x19, 0x27, 0xdc, 0x61, 0x7e,
	0x18, 0xb3, 0x67, 0x65, 0xe2, 0x86, 0xdf, 0xe0, 0xfd, 0x8c, 0x7e, 0x83, 0xc7, 0xe4, 0x53, 0x92,
	0xac, 0x93, 0x77, 0x08, 0x09, 0xfa, 0x74, 0x3b, 0x60, 0x76, 0x64, 0x25, 0x92, 0xb3, 0x9c, 0xfa,
	0x36, 0x0d, 0x3c, 0xc7, 0xe7, 0x3a, 0xa9, 0x5b, 0x8e, 0xce, 0x7b, 0x6d, 0x9a, 0x2c, 0xbe, 0x3a,
	0x44, 0x4a, 0xfc, 0x09, 0x6c, 0xdd, 0x65, 0xd6, 0x8d, 0x98, 0x9d, 0x6f, 0xb2, 0x26, 0x93, 0x43,
	0x5d, 0x8c, 0x14, 0x9a, 0x7f, 0x0b, 0x66, 0xf6, 0x64, 0xf9, 0x06, 0xbd, 0x19, 0xd1, 0x90, 0xe3,
	0x45, 0x98, 0x6c, 0x51, 0xa7, 0xd9, 0xe2, 0x39, 0x6d, 0x43, 0xdb, 0x1a, 0x37, 0xe2, 0x19, 0xce,
	0xc1, 0x94, 0xc7, 0xec, 0xc8, 0xa5, 0x61, 0x2e, 0xb5, 0x91, 0xde, 0xca, 0x18, 0xc9, 0x14, 0x9f,
	0x03, 0xe0, 0x5e, 0x4d, 0xb4, 0xd5, 0xa1, 0x61, 0x2e, 0x2d, 0xc9, 0x0c, 0xf7, 0xae, 0x2a, 0x20,
	0xff, 0x93, 0x06, 0xb3, 0x49, 0x8a, 0xb0, 0xcd, 0xfc, 0x90, 0x8e, 0xcc, 0x81, 0x61, 0x9c, 0x3b,
	0x1e, 0xcd, 0xa5, 0x24, 0x2a, 0xc7, 0xc3, 0x79, 0xd3, 0xc7, 0xf3, 0x5e, 0x82, 0x49, 0xf5, 0xe5,
	0x72, 0xe3, 0x1b, 0xe9, 0xad, 0xec, 0xf6, 0xf9, 0xc2, 0xa8, 0xaf, 0x59, 0xb8, 0x2c, 0x43, 0x62,
	0x17, 0x71, 0xd4, 0x09, 0xdf, 0x13, 0x27, 0x7c, 0xe3, 0x25, 0x98, 0xe2, 0x5e, 0xcd, 0x26, 0x9c,
	0xe4, 0x26, 0x25, 0x37, 0xc9, 0xbd, 0x12, 0xe1, 0x24, 0x7f, 0x15, 0xa6, 0x87, 0xd7, 0xc3, 0x3b,
	0x00, 0xc4, 0xef, 0xd5, 0x62, 0x2f, 0x9a, 0xf4, 0x92, 0x1f, 0xed, 0x65, 0xc7, 0xef, 0xc9, 0x40,
	0x23, 0x43, 0xe2, 0x51, 0x98, 0x3f, 0x84, 0x53, 0x09, 0x2c, 0x9a, 0xa3, 0x2a, 0x94, 0x6d, 0xc8,
	0x18, 0xf1, 0x0c, 0x6f, 0xc1, 0xb8, 0x34, 0x93, 0xde, 0xd0, 0xb6, 0xb2, 0xdb, 0xf3, 0x05, 0xb5,
	0x0b, 0x0b, 0xc9, 0x06, 0x15, 0xeb, 0x1a, 0x52, 0x91, 0xff, 0x44, 0x03, 0x30, 0x7b, 0xbe, 0x65,
	0x72, 0xc2, 0x23, 0x59, 0xa7, 0x4b, 0x42, 0x5e, 0x93, 0x9b, 0x21, 0xee, 0x78, 0x46, 0x20, 0xbb,
	0x02, 0xc0, 0xe7, 0x61, 0x6e, 0x40, 0xd7, 0xfa, 0xfd, 0x4f, 0x1b, 0x33, 0x7d, 0x4d, 0x55, 0x7c,
	0x88, 0x73, 0x00, 0x51, 0xdb, 0x26, 0x9c, 0xda, 0x35, 0xc2, 0xa5, 0x8b, 0xb4, 0x91, 0x89, 0x91,
	0x1d, 0x8e, 0x37, 0x61, 0xce, 0x8a, 0x82, 0x80, 0xfa, 0xbc, 0xd6, 0xa1, 0x41, 0xe8, 0x30, 0x3f,
	0x37, 0x2e, 0xfd, 0xcf, 0xc6, 0xf0, 0x35, 0x85, 0xe6, 0x3f, 0xd4, 0x20, 0x5b, 0xa6, 0xb7, 0xaa,
	0xdd, 0x50, 0xd5, 0xfb, 0x2c, 0xa4, 0x58, 0x5b, 0xda, 0x9a, 0xdd, 0x5e, 0x1d, 0xdd, 0xb6, 0x4a,
	0xdb, 0x48, 0xb1, 0x36, 0x46, 0x90, 0xe6, 0x5d, 0xb5, 0x05, 0xa7, 0x0d, 0x31, 0xc4, 0xaf, 0x00,
	0xf0, 0x6e, 0x2d, 0xa0, 0x61, 0xe4, 0x72, 0xb5, 0x47, 0xb2, 0xdb, 0xe7, 0x0a, 0x83, 0xa3, 0x50,
	0x10, 0xa7, 0xa8, 0xb0, 0xd7, 0xa5, 0x56, 0xb5, 0x6b, 0x48, 0x95, 0x91, 0xe1, 0xf1, 0x28, 0xcc,
	0xbb, 0x30, 0xa1, 0xda, 0x70, 0x11, 0x4e, 0xa9, 0x0e, 0x38, 0xb6, 0x34, 0x93, 0xdd, 0x5e, 0x1e,
	0x5e, 0x44, 0x9d, 0x33, 0x29, 0x3d, 0x28, 0x19, 0x53, 0x52, 0x7a, 0x60, 0xe3, 0xe7, 0x60, 0x42,
	0xb5, 0x35, 0x25, 0x43, 0x96, 0x46, 0x84, 0x18, 0x4a, 0x95, 0xe7, 0x30, 0x53, 0xa6, 0xb7, 0x24,
	0xf4, 0x5f, 0x8a, 0x7f, 0xf1, 0x78, 0xb6, 0xf5, 0xd1, 0x01, 0xc7, 0xb2, 0x1a, 0x90, 0xb9, 0x4e,
	0x42, 0x4f, 0x65, 0xdc, 0x03, 0x20, 0x9c, 0x07, 0x4e, 0x3d, 0xe2, 0x34, 0xd9, 0xad, 0xeb, 0x7f,
	0x6f, 0x97, 0xd0, 0xee, 0x24, 0xba, 0xdd, 0xf1, 0xfb, 0x8f, 0xd6, 0xc7, 0x8c, 0xa1, 0xc0, 0x67,
	0x7e, 0x9f, 0x80, 0x54, 0xa5, 0x8d, 0x67, 0x01, 0x8a, 0x15, 0xf3, 0x72, 0xc5, 0xac, 0x99, 0x7b,
	0x55, 0x34, 0x86, 0xcf, 0xc0, 0xdc, 0x7e, 0x79, 0xbf, 0xfa, 0x86, 0xdc, 0x16, 0x45, 0x97, 0x84,
	0x21, 0xb2, 0x85, 0x48, 0x80, 0xc5, 0x80, 0x12, 0x4e, 0x91, 0x38, 0xfe, 0x58, 0xcc, 0xaf, 0x44,
	0x81, 0xd5, 0x22, 0x21, 0x35, 0x5b, 0x24, 0xa0, 0x21, 0x6a, 0xe0, 0x39, 0xc8, 0x0a, 0xdc, 0x14,
	0x97, 0x04, 0x0b, 0x50, 0x13, 0x2f, 0xc0, 0xe9, 0xc1, 0x6a, 0x86, 0xa8, 0x33, 0xa2, 0xa8, 0x85,
	0xb3, 0x30, 0x25, 0xe0, 0x03, 0xb3, 0x82, 0x1c, 0x8c, 0x60, 0x5a, 0x4c, 0x4a, 0x4e, 0xc7, 0xb1,
	0xa9, 0x6f, 0xa3, 0xb7, 0xf1, 0x32, 0x2c, 0x0c, 0xa2, 0x5e, 0x67, 0xae, 0x4d, 0x83, 0x22, 0x8b,
	0x7c, 0x8e, 0x6e, 0xe0, 0x15, 0x58, 0x1c, 0x50, 0x57, 0xd4, 0xbd, 0xab, 0x38, 0x17, 0xcf, 0x03,
	0x3a, 0x19, 0x86, 0xbc, 0x04, 0x2d, 0x51, 0x97, 0xf6, 0x51, 0x1f, 0xe7, 0xe0, 0xcc, 0xae, 0xbc,
	0xc4, 0x55, 0x4d, 0xf1, 0x4a, 0xe8, 0xbe, 0x86, 0xcf, 0xc2, 0xa2, 0x62, 0x92, 0xea, 0x2a, 0x8d,
	0x06, 0x0d, 0x1c, 0xbf, 0x89, 0x7e, 0xd0, 0x06, 0x61, 0xd7, 0x68, 0xe0, 0x34, 0x7a, 0x49, 0xd8,
	0x8f, 0x1a, 0x5e, 0x84, 0xd3, 0x7b, 0x1d, 0xaf, 0x44, 0xdb, 0x2e, 0xeb, 0x15, 0x99, 0xcf, 0x03,
	0x62, 0x71, 0xf4, 0xf5, 0x12, 0x9e, 0x03, 0xd8, 0xeb, 0x78, 0x62, 0xf3, 0x46, 0x9c, 0xa2, 0x6f,
	0xfa, 0x80, 0xe7, 0xf0, 0x43, 0xd6, 0x44, 0xdf, 0x4a, 0xc0, 0x1c, 0x28, 0x3e, 0x5d, 0xc7, 0xa7,
	0x61, 0xda, 0xec, 0x78, 0x3b, 0x96, 0xa5, 0x2a, 0x41, 0x9f, 0xad, 0xe3, 0x05, 0x40, 0x0a, 0x3a,
	0x74, 0xfc, 0x1b, 0xf1, 0x67, 0xf8, 0x7c, 0x5d, 0xd8, 0xd9, 0x09, 0x79, 0xc0, 0x3c, 0x1a, 0xb6,
	0x76, 0x89, 0x4b, 0x7c, 0x8b, 0x9a, 0x94, 0xa3, 0xf7, 0x36, 0xf1, 0x32, 0xcc, 0x9f, 0x64, 0x4a,
	0x4e, 0xa3, 0x81, 0xde, 0xdf, 0xc4, 0xab, 0xb0, 0xd4, 0xa7, 0x2e, 0x53, 0x4e, 0xc4, 0x8d, 0x13,
	0x67, 0xfa, 0x60, 0x13, 0x9f, 0x81, 0x59, 0x93, 0x07, 0x84, 0xd3, 0x66, 0x4f, 0x15, 0x83, 0xfe,
	0x28, 0x0c, 0x83, 0xb1, 0xf2, 0xcf, 0x02, 0x5e, 0x80, 0xb9, 0x04, 0xac, 0x06, 0x4e, 0xb3, 0x49,
	0x03, 0x74, 0xf4, 0x4b, 0x5a, 0x58, 0xed, 0xef, 0x55, 0x51, 0x25, 0xa7, 0x36, 0x7a, 0xf8, 0x12,
	0xce, 0xc2, 0xa4, 0xba, 0x33, 0xd0, 0x77, 0x97, 0xf0, 0x0c, 0x9c, 0x4a, 0x4e, 0x11, 0xfa, 0xfe,
	0x12, 0x5e, 0x02, 0x5c, 0x09, 0x88, 0xe5, 0x52, 0xd3, 0xf1, 0xda, 0x2e, 0x8d, 0x53, 0x7c, 0xb9,
	0x8f, 0x11, 0x64, 0xaf, 0x30, 0xe6, 0xaa, 0x82, 0x6d, 0x74, 0xb7, 0x9c, 0x20, 0x4a, 0x62, 0xa3,
	0x8f, 0xfa, 0x48, 0x89, 0xb6, 0x59, 0xe8, 0x70, 0xf4, 0x71, 0x59, 0xf4, 0x4f, 0x20, 0xd7, 0x1d,
	0xde, 0xb2, 0x03, 0x72, 0x0b, 0xdd, 0x2b, 0x6f, 0x3f, 0x4a, 0xc1, 0x84, 0x78, 0x16, 0x7a, 0xf8,
	0x0b, 0x0d, 0x32, 0xaf, 0x51, 0x1e, 0xdf, 0xfc, 0x9b, 0xa3, 0x0f, 0xe0, 0xb1, 0x47, 0x75, 0x65,
	0xeb, 0xc9, 0x42, 0xf5, 0x34, 0xe6, 0x8b, 0xef, 0xfe, 0xfc, 0xdb, 0xbd, 0xd4, 0xab, 0xf8, 0x65,
	0x5d, 0xfe, 0x2a, 0x9c, 0xf8, 0x77, 0x51, 0x0b, 0xe8, 0xb7, 0xd5, 0x7b, 0x79, 0x47, 0xbf, 0x1d,
	0xbf, 0x85, 0x77, 0xf4, 0xdb, 0x83, 0xa7, 0xec, 0x0e, 0xfe, 0x4a, 0x83, 0x69, 0x53, 0x46, 0xfe,
	0x7f, 0x46, 0x0f, 0xa4, 0xd1, 0x22, 0xde, 0xf9, 0x47, 0xa3, 0x6a, 0xfa, 0xef, 0xec, 0x3e, 0xaf,
	0xed, 0x96, 0xef, 0x1f, 0xad, 0x69, 0x0f, 0x8e, 0xd6, 0xb4, 0x5f, 0x8f, 0xd6, 0xb4, 0xbb, 0x8f,
	0xd7, 0xc6, 0x1e, 0x3c, 0x5e, 0x1b, 0x7b, 0xf8, 0x78, 0x6d, 0xec, 0xcd, 0x8b, 0x4d, 0x87, 0xb7,
	0xa2, 0x7a, 0xc1, 0x62, 0x9e, 0xbe, 0xef, 0x46, 0xdd, 0xf2, 0x7e, 0xf5, 0x90, 0xd4, 0x43, 0x99,
	0xd4, 0xd6, 0xad, 0x16, 0x71, 0xfc, 0x63, 0x7f, 0x79, 0xf2, 0xd2, 0xad, 0x4f, 0xca, 0x57, 0xf1,
	0x85, 0xbf, 0x02, 0x00, 0x00, 0xff, 0xff, 0x75, 0xe9, 0x52, 0x07, 0x06, 0x0a, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	GetEvents(ctx context.Context, in *EventsRequest, opts ...grpc.CallOption) (*EventsResponse, error)
	StreamEvents(ctx context.Context, in *EventsRequest, opts ...grpc.CallOption) (Query_StreamEventsClient, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) GetEvents(ctx context.Context, in *EventsRequest, opts ...grpc.CallOption) (*EventsResponse, error) {
	out := new(EventsResponse)
	err := c.cc.Invoke(ctx, "/flux.eventstream.v1beta1.Query/GetEvents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) StreamEvents(ctx context.Context, in *EventsRequest, opts ...grpc.CallOption) (Query_StreamEventsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Query_serviceDesc.Streams[0], "/flux.eventstream.v1beta1.Query/StreamEvents", opts...)
	if err != nil {
		return nil, err
	}
	x := &queryStreamEventsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Query_StreamEventsClient interface {
	Recv() (*EventsResponse, error)
	grpc.ClientStream
}

type queryStreamEventsClient struct {
	grpc.ClientStream
}

func (x *queryStreamEventsClient) Recv() (*EventsResponse, error) {
	m := new(EventsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	GetEvents(context.Context, *EventsRequest) (*EventsResponse, error)
	StreamEvents(*EventsRequest, Query_StreamEventsServer) error
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) GetEvents(ctx context.Context, req *EventsRequest) (*EventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEvents not implemented")
}
func (*UnimplementedQueryServer) StreamEvents(req *EventsRequest, srv Query_StreamEventsServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamEvents not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_GetEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flux.eventstream.v1beta1.Query/GetEvents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetEvents(ctx, req.(*EventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_StreamEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EventsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(QueryServer).StreamEvents(m, &queryStreamEventsServer{stream})
}

type Query_StreamEventsServer interface {
	Send(*EventsResponse) error
	grpc.ServerStream
}

type queryStreamEventsServer struct {
	grpc.ServerStream
}

func (x *queryStreamEventsServer) Send(m *EventsResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "flux.eventstream.v1beta1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetEvents",
			Handler:    _Query_GetEvents_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamEvents",
			Handler:       _Query_StreamEvents_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "flux/eventstream/v1beta1/query.proto",
}

func (m *EventsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TmQueries) > 0 {
		for iNdEx := len(m.TmQueries) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.TmQueries[iNdEx])
			copy(dAtA[i:], m.TmQueries[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.TmQueries[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Modules) > 0 {
		for iNdEx := len(m.Modules) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Modules[iNdEx])
			copy(dAtA[i:], m.Modules[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.Modules[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Height != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EventsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TmData) > 0 {
		for iNdEx := len(m.TmData) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.TmData[iNdEx])
			copy(dAtA[i:], m.TmData[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.TmData[iNdEx])))
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.TmQueries) > 0 {
		for iNdEx := len(m.TmQueries) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.TmQueries[iNdEx])
			copy(dAtA[i:], m.TmQueries[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.TmQueries[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Events) > 0 {
		for iNdEx := len(m.Events) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Events[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Modules) > 0 {
		for iNdEx := len(m.Modules) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Modules[iNdEx])
			copy(dAtA[i:], m.Modules[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.Modules[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Time != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Time))
		i--
		dAtA[i] = 0x10
	}
	if m.Height != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ModuleEvents) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ModuleEvents) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ModuleEvents) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AnyEvents) > 0 {
		for iNdEx := len(m.AnyEvents) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AnyEvents[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *AnyEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AnyEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AnyEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Data != nil {
		{
			size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Module) > 0 {
		i -= len(m.Module)
		copy(dAtA[i:], m.Module)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Module)))
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *SyncStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SyncStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SyncStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CurrentVersion) > 0 {
		i -= len(m.CurrentVersion)
		copy(dAtA[i:], m.CurrentVersion)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.CurrentVersion)))
		i--
		dAtA[i] = 0x22
	}
	if m.UpdatedAt != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.UpdatedAt))
		i--
		dAtA[i] = 0x18
	}
	if m.LastBlockTime != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.LastBlockTime))
		i--
		dAtA[i] = 0x10
	}
	if m.LastBlock != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.LastBlock))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NewTxsEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewTxsEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NewTxsEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TxResults) > 0 {
		for iNdEx := len(m.TxResults) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TxResults[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Txs) > 0 {
		for iNdEx := len(m.Txs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Txs[iNdEx])
			copy(dAtA[i:], m.Txs[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.Txs[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Op != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Op))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Block) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Block) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Block) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Block != nil {
		{
			size, err := m.Block.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.BlockId != nil {
		{
			size, err := m.BlockId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NewBlockEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewBlockEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NewBlockEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Block != nil {
		{
			size, err := m.Block.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Op != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Op))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *WasmEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WasmEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WasmEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Attributes) > 0 {
		for iNdEx := len(m.Attributes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Attributes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *EventsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Height != 0 {
		n += 1 + sovQuery(uint64(m.Height))
	}
	if len(m.Modules) > 0 {
		for _, s := range m.Modules {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if len(m.TmQueries) > 0 {
		for _, s := range m.TmQueries {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *EventsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Height != 0 {
		n += 1 + sovQuery(uint64(m.Height))
	}
	if m.Time != 0 {
		n += 1 + sovQuery(uint64(m.Time))
	}
	if len(m.Modules) > 0 {
		for _, s := range m.Modules {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if len(m.Events) > 0 {
		for _, e := range m.Events {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if len(m.TmQueries) > 0 {
		for _, s := range m.TmQueries {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if len(m.TmData) > 0 {
		for _, s := range m.TmData {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *ModuleEvents) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.AnyEvents) > 0 {
		for _, e := range m.AnyEvents {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *AnyEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Module)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *SyncStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LastBlock != 0 {
		n += 1 + sovQuery(uint64(m.LastBlock))
	}
	if m.LastBlockTime != 0 {
		n += 1 + sovQuery(uint64(m.LastBlockTime))
	}
	if m.UpdatedAt != 0 {
		n += 1 + sovQuery(uint64(m.UpdatedAt))
	}
	l = len(m.CurrentVersion)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *NewTxsEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Op != 0 {
		n += 1 + sovQuery(uint64(m.Op))
	}
	if len(m.Txs) > 0 {
		for _, b := range m.Txs {
			l = len(b)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if len(m.TxResults) > 0 {
		for _, e := range m.TxResults {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *Block) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlockId != nil {
		l = m.BlockId.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Block != nil {
		l = m.Block.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *NewBlockEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Op != 0 {
		n += 1 + sovQuery(uint64(m.Op))
	}
	if m.Block != nil {
		l = m.Block.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *WasmEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Attributes) > 0 {
		for _, e := range m.Attributes {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EventsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Modules", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Modules = append(m.Modules, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TmQueries", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TmQueries = append(m.TmQueries, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Modules", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Modules = append(m.Modules, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Events", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Events = append(m.Events, &ModuleEvents{})
			if err := m.Events[len(m.Events)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TmQueries", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TmQueries = append(m.TmQueries, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TmData", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TmData = append(m.TmData, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ModuleEvents) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ModuleEvents: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ModuleEvents: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AnyEvents", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AnyEvents = append(m.AnyEvents, &AnyEvent{})
			if err := m.AnyEvents[len(m.AnyEvents)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AnyEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AnyEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AnyEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Module", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Module = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &types.Any{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SyncStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SyncStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SyncStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastBlock", wireType)
			}
			m.LastBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastBlock |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastBlockTime", wireType)
			}
			m.LastBlockTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastBlockTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			m.UpdatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdatedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CurrentVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NewTxsEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NewTxsEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NewTxsEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Op", wireType)
			}
			m.Op = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Op |= Op(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Txs", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Txs = append(m.Txs, make([]byte, postIndex-iNdEx))
			copy(m.Txs[len(m.Txs)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxResults", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxResults = append(m.TxResults, &types1.ExecTxResult{})
			if err := m.TxResults[len(m.TxResults)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Block) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Block: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Block: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BlockId == nil {
				m.BlockId = &types2.BlockID{}
			}
			if err := m.BlockId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Block", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Block == nil {
				m.Block = &types2.Block{}
			}
			if err := m.Block.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NewBlockEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NewBlockEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NewBlockEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Op", wireType)
			}
			m.Op = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Op |= Op(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Block", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Block == nil {
				m.Block = &Block{}
			}
			if err := m.Block.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WasmEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WasmEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WasmEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attributes = append(m.Attributes, types1.EventAttribute{})
			if err := m.Attributes[len(m.Attributes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
